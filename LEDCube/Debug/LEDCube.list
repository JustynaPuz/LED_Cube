
LEDCube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005438  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080055cc  080055cc  000065cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005778  08005778  0000710c  2**0
                  CONTENTS
  4 .ARM          00000008  08005778  08005778  00006778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005780  08005780  0000710c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005780  08005780  00006780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005784  08005784  00006784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000010c  20000000  08005788  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  2000010c  08005894  0000710c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b8  08005894  000073b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000710c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d743  00000000  00000000  0000713c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e4f  00000000  00000000  0001487f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  000166d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a04  00000000  00000000  00017378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016451  00000000  00000000  00017d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f2cf  00000000  00000000  0002e1cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008da1e  00000000  00000000  0003d49c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000caeba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035d4  00000000  00000000  000caf00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000ce4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000010c 	.word	0x2000010c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080055b4 	.word	0x080055b4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000110 	.word	0x20000110
 80001d0:	080055b4 	.word	0x080055b4

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <__aeabi_uldivmod>:
 80001f8:	b953      	cbnz	r3, 8000210 <__aeabi_uldivmod+0x18>
 80001fa:	b94a      	cbnz	r2, 8000210 <__aeabi_uldivmod+0x18>
 80001fc:	2900      	cmp	r1, #0
 80001fe:	bf08      	it	eq
 8000200:	2800      	cmpeq	r0, #0
 8000202:	bf1c      	itt	ne
 8000204:	f04f 31ff 	movne.w	r1, #4294967295
 8000208:	f04f 30ff 	movne.w	r0, #4294967295
 800020c:	f000 b96a 	b.w	80004e4 <__aeabi_idiv0>
 8000210:	f1ad 0c08 	sub.w	ip, sp, #8
 8000214:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000218:	f000 f806 	bl	8000228 <__udivmoddi4>
 800021c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000224:	b004      	add	sp, #16
 8000226:	4770      	bx	lr

08000228 <__udivmoddi4>:
 8000228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800022c:	9d08      	ldr	r5, [sp, #32]
 800022e:	460c      	mov	r4, r1
 8000230:	2b00      	cmp	r3, #0
 8000232:	d14e      	bne.n	80002d2 <__udivmoddi4+0xaa>
 8000234:	4694      	mov	ip, r2
 8000236:	458c      	cmp	ip, r1
 8000238:	4686      	mov	lr, r0
 800023a:	fab2 f282 	clz	r2, r2
 800023e:	d962      	bls.n	8000306 <__udivmoddi4+0xde>
 8000240:	b14a      	cbz	r2, 8000256 <__udivmoddi4+0x2e>
 8000242:	f1c2 0320 	rsb	r3, r2, #32
 8000246:	4091      	lsls	r1, r2
 8000248:	fa20 f303 	lsr.w	r3, r0, r3
 800024c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000250:	4319      	orrs	r1, r3
 8000252:	fa00 fe02 	lsl.w	lr, r0, r2
 8000256:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025a:	fa1f f68c 	uxth.w	r6, ip
 800025e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000262:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000266:	fb07 1114 	mls	r1, r7, r4, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb04 f106 	mul.w	r1, r4, r6
 8000272:	4299      	cmp	r1, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x64>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f104 30ff 	add.w	r0, r4, #4294967295
 800027e:	f080 8112 	bcs.w	80004a6 <__udivmoddi4+0x27e>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 810f 	bls.w	80004a6 <__udivmoddi4+0x27e>
 8000288:	3c02      	subs	r4, #2
 800028a:	4463      	add	r3, ip
 800028c:	1a59      	subs	r1, r3, r1
 800028e:	fa1f f38e 	uxth.w	r3, lr
 8000292:	fbb1 f0f7 	udiv	r0, r1, r7
 8000296:	fb07 1110 	mls	r1, r7, r0, r1
 800029a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029e:	fb00 f606 	mul.w	r6, r0, r6
 80002a2:	429e      	cmp	r6, r3
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x94>
 80002a6:	eb1c 0303 	adds.w	r3, ip, r3
 80002aa:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ae:	f080 80fc 	bcs.w	80004aa <__udivmoddi4+0x282>
 80002b2:	429e      	cmp	r6, r3
 80002b4:	f240 80f9 	bls.w	80004aa <__udivmoddi4+0x282>
 80002b8:	4463      	add	r3, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	1b9b      	subs	r3, r3, r6
 80002be:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11d      	cbz	r5, 80002ce <__udivmoddi4+0xa6>
 80002c6:	40d3      	lsrs	r3, r2
 80002c8:	2200      	movs	r2, #0
 80002ca:	e9c5 3200 	strd	r3, r2, [r5]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d905      	bls.n	80002e2 <__udivmoddi4+0xba>
 80002d6:	b10d      	cbz	r5, 80002dc <__udivmoddi4+0xb4>
 80002d8:	e9c5 0100 	strd	r0, r1, [r5]
 80002dc:	2100      	movs	r1, #0
 80002de:	4608      	mov	r0, r1
 80002e0:	e7f5      	b.n	80002ce <__udivmoddi4+0xa6>
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d146      	bne.n	8000378 <__udivmoddi4+0x150>
 80002ea:	42a3      	cmp	r3, r4
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xcc>
 80002ee:	4290      	cmp	r0, r2
 80002f0:	f0c0 80f0 	bcc.w	80004d4 <__udivmoddi4+0x2ac>
 80002f4:	1a86      	subs	r6, r0, r2
 80002f6:	eb64 0303 	sbc.w	r3, r4, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	2d00      	cmp	r5, #0
 80002fe:	d0e6      	beq.n	80002ce <__udivmoddi4+0xa6>
 8000300:	e9c5 6300 	strd	r6, r3, [r5]
 8000304:	e7e3      	b.n	80002ce <__udivmoddi4+0xa6>
 8000306:	2a00      	cmp	r2, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x204>
 800030c:	eba1 040c 	sub.w	r4, r1, ip
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	fa1f f78c 	uxth.w	r7, ip
 8000318:	2101      	movs	r1, #1
 800031a:	fbb4 f6f8 	udiv	r6, r4, r8
 800031e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000322:	fb08 4416 	mls	r4, r8, r6, r4
 8000326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032a:	fb07 f006 	mul.w	r0, r7, r6
 800032e:	4298      	cmp	r0, r3
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x11c>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f106 34ff 	add.w	r4, r6, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x11a>
 800033c:	4298      	cmp	r0, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2b4>
 8000342:	4626      	mov	r6, r4
 8000344:	1a1c      	subs	r4, r3, r0
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb4 f0f8 	udiv	r0, r4, r8
 800034e:	fb08 4410 	mls	r4, r8, r0, r4
 8000352:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000356:	fb00 f707 	mul.w	r7, r0, r7
 800035a:	429f      	cmp	r7, r3
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x148>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 34ff 	add.w	r4, r0, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x146>
 8000368:	429f      	cmp	r7, r3
 800036a:	f200 80b0 	bhi.w	80004ce <__udivmoddi4+0x2a6>
 800036e:	4620      	mov	r0, r4
 8000370:	1bdb      	subs	r3, r3, r7
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	e7a5      	b.n	80002c4 <__udivmoddi4+0x9c>
 8000378:	f1c1 0620 	rsb	r6, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 f706 	lsr.w	r7, r2, r6
 8000382:	431f      	orrs	r7, r3
 8000384:	fa20 fc06 	lsr.w	ip, r0, r6
 8000388:	fa04 f301 	lsl.w	r3, r4, r1
 800038c:	ea43 030c 	orr.w	r3, r3, ip
 8000390:	40f4      	lsrs	r4, r6
 8000392:	fa00 f801 	lsl.w	r8, r0, r1
 8000396:	0c38      	lsrs	r0, r7, #16
 8000398:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800039c:	fbb4 fef0 	udiv	lr, r4, r0
 80003a0:	fa1f fc87 	uxth.w	ip, r7
 80003a4:	fb00 441e 	mls	r4, r0, lr, r4
 80003a8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ac:	fb0e f90c 	mul.w	r9, lr, ip
 80003b0:	45a1      	cmp	r9, r4
 80003b2:	fa02 f201 	lsl.w	r2, r2, r1
 80003b6:	d90a      	bls.n	80003ce <__udivmoddi4+0x1a6>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003be:	f080 8084 	bcs.w	80004ca <__udivmoddi4+0x2a2>
 80003c2:	45a1      	cmp	r9, r4
 80003c4:	f240 8081 	bls.w	80004ca <__udivmoddi4+0x2a2>
 80003c8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	eba4 0409 	sub.w	r4, r4, r9
 80003d2:	fa1f f983 	uxth.w	r9, r3
 80003d6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003da:	fb00 4413 	mls	r4, r0, r3, r4
 80003de:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d907      	bls.n	80003fa <__udivmoddi4+0x1d2>
 80003ea:	193c      	adds	r4, r7, r4
 80003ec:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f0:	d267      	bcs.n	80004c2 <__udivmoddi4+0x29a>
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0x29a>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	443c      	add	r4, r7
 80003fa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003fe:	fba0 9302 	umull	r9, r3, r0, r2
 8000402:	eba4 040c 	sub.w	r4, r4, ip
 8000406:	429c      	cmp	r4, r3
 8000408:	46ce      	mov	lr, r9
 800040a:	469c      	mov	ip, r3
 800040c:	d351      	bcc.n	80004b2 <__udivmoddi4+0x28a>
 800040e:	d04e      	beq.n	80004ae <__udivmoddi4+0x286>
 8000410:	b155      	cbz	r5, 8000428 <__udivmoddi4+0x200>
 8000412:	ebb8 030e 	subs.w	r3, r8, lr
 8000416:	eb64 040c 	sbc.w	r4, r4, ip
 800041a:	fa04 f606 	lsl.w	r6, r4, r6
 800041e:	40cb      	lsrs	r3, r1
 8000420:	431e      	orrs	r6, r3
 8000422:	40cc      	lsrs	r4, r1
 8000424:	e9c5 6400 	strd	r6, r4, [r5]
 8000428:	2100      	movs	r1, #0
 800042a:	e750      	b.n	80002ce <__udivmoddi4+0xa6>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f103 	lsr.w	r1, r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa24 f303 	lsr.w	r3, r4, r3
 800043c:	4094      	lsls	r4, r2
 800043e:	430c      	orrs	r4, r1
 8000440:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000444:	fa00 fe02 	lsl.w	lr, r0, r2
 8000448:	fa1f f78c 	uxth.w	r7, ip
 800044c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000450:	fb08 3110 	mls	r1, r8, r0, r3
 8000454:	0c23      	lsrs	r3, r4, #16
 8000456:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045a:	fb00 f107 	mul.w	r1, r0, r7
 800045e:	4299      	cmp	r1, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x24c>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 36ff 	add.w	r6, r0, #4294967295
 800046a:	d22c      	bcs.n	80004c6 <__udivmoddi4+0x29e>
 800046c:	4299      	cmp	r1, r3
 800046e:	d92a      	bls.n	80004c6 <__udivmoddi4+0x29e>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1a5b      	subs	r3, r3, r1
 8000476:	b2a4      	uxth	r4, r4
 8000478:	fbb3 f1f8 	udiv	r1, r3, r8
 800047c:	fb08 3311 	mls	r3, r8, r1, r3
 8000480:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000484:	fb01 f307 	mul.w	r3, r1, r7
 8000488:	42a3      	cmp	r3, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x276>
 800048c:	eb1c 0404 	adds.w	r4, ip, r4
 8000490:	f101 36ff 	add.w	r6, r1, #4294967295
 8000494:	d213      	bcs.n	80004be <__udivmoddi4+0x296>
 8000496:	42a3      	cmp	r3, r4
 8000498:	d911      	bls.n	80004be <__udivmoddi4+0x296>
 800049a:	3902      	subs	r1, #2
 800049c:	4464      	add	r4, ip
 800049e:	1ae4      	subs	r4, r4, r3
 80004a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a4:	e739      	b.n	800031a <__udivmoddi4+0xf2>
 80004a6:	4604      	mov	r4, r0
 80004a8:	e6f0      	b.n	800028c <__udivmoddi4+0x64>
 80004aa:	4608      	mov	r0, r1
 80004ac:	e706      	b.n	80002bc <__udivmoddi4+0x94>
 80004ae:	45c8      	cmp	r8, r9
 80004b0:	d2ae      	bcs.n	8000410 <__udivmoddi4+0x1e8>
 80004b2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004b6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7a8      	b.n	8000410 <__udivmoddi4+0x1e8>
 80004be:	4631      	mov	r1, r6
 80004c0:	e7ed      	b.n	800049e <__udivmoddi4+0x276>
 80004c2:	4603      	mov	r3, r0
 80004c4:	e799      	b.n	80003fa <__udivmoddi4+0x1d2>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e7d4      	b.n	8000474 <__udivmoddi4+0x24c>
 80004ca:	46d6      	mov	lr, sl
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1a6>
 80004ce:	4463      	add	r3, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e74d      	b.n	8000370 <__udivmoddi4+0x148>
 80004d4:	4606      	mov	r6, r0
 80004d6:	4623      	mov	r3, r4
 80004d8:	4608      	mov	r0, r1
 80004da:	e70f      	b.n	80002fc <__udivmoddi4+0xd4>
 80004dc:	3e02      	subs	r6, #2
 80004de:	4463      	add	r3, ip
 80004e0:	e730      	b.n	8000344 <__udivmoddi4+0x11c>
 80004e2:	bf00      	nop

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <flickerOn>:
    }
    return NULL;
}
//flicker on
void flickerOn()
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
  int i = 150;
 80004ee:	2396      	movs	r3, #150	@ 0x96
 80004f0:	607b      	str	r3, [r7, #4]
  while(i != 0)
 80004f2:	e00e      	b.n	8000512 <flickerOn+0x2a>
  {
    enableAllPins();
 80004f4:	f000 f868 	bl	80005c8 <enableAllPins>
    HAL_Delay(i);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4618      	mov	r0, r3
 80004fc:	f002 fcbe 	bl	8002e7c <HAL_Delay>
    disableAllPins();
 8000500:	f000 f810 	bl	8000524 <disableAllPins>
    HAL_Delay(i);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4618      	mov	r0, r3
 8000508:	f002 fcb8 	bl	8002e7c <HAL_Delay>
    i-= 5;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	3b05      	subs	r3, #5
 8000510:	607b      	str	r3, [r7, #4]
  while(i != 0)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d1ed      	bne.n	80004f4 <flickerOn+0xc>
  }
}
 8000518:	bf00      	nop
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <disableAllPins>:


void disableAllPins() {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
    for (int i = 0; i < mapSize; i++) {
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	e018      	b.n	8000562 <disableAllPins+0x3e>
        HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_SET);
 8000530:	4921      	ldr	r1, [pc, #132]	@ (80005b8 <disableAllPins+0x94>)
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	4613      	mov	r3, r2
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	4413      	add	r3, r2
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	440b      	add	r3, r1
 800053e:	3304      	adds	r3, #4
 8000540:	6818      	ldr	r0, [r3, #0]
 8000542:	491d      	ldr	r1, [pc, #116]	@ (80005b8 <disableAllPins+0x94>)
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	4613      	mov	r3, r2
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	4413      	add	r3, r2
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	440b      	add	r3, r1
 8000550:	3308      	adds	r3, #8
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	2201      	movs	r2, #1
 8000556:	4619      	mov	r1, r3
 8000558:	f002 ffdc 	bl	8003514 <HAL_GPIO_WritePin>
    for (int i = 0; i < mapSize; i++) {
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	3301      	adds	r3, #1
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	4b16      	ldr	r3, [pc, #88]	@ (80005bc <disableAllPins+0x98>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	429a      	cmp	r2, r3
 800056a:	dbe1      	blt.n	8000530 <disableAllPins+0xc>
    }

    for(int i = 0; i < layersSize; i++) {
 800056c:	2300      	movs	r3, #0
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	e018      	b.n	80005a4 <disableAllPins+0x80>
    	HAL_GPIO_WritePin(layers[i].port, layers[i].pin, GPIO_PIN_RESET);
 8000572:	4913      	ldr	r1, [pc, #76]	@ (80005c0 <disableAllPins+0x9c>)
 8000574:	683a      	ldr	r2, [r7, #0]
 8000576:	4613      	mov	r3, r2
 8000578:	005b      	lsls	r3, r3, #1
 800057a:	4413      	add	r3, r2
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	440b      	add	r3, r1
 8000580:	3304      	adds	r3, #4
 8000582:	6818      	ldr	r0, [r3, #0]
 8000584:	490e      	ldr	r1, [pc, #56]	@ (80005c0 <disableAllPins+0x9c>)
 8000586:	683a      	ldr	r2, [r7, #0]
 8000588:	4613      	mov	r3, r2
 800058a:	005b      	lsls	r3, r3, #1
 800058c:	4413      	add	r3, r2
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	440b      	add	r3, r1
 8000592:	3308      	adds	r3, #8
 8000594:	881b      	ldrh	r3, [r3, #0]
 8000596:	2200      	movs	r2, #0
 8000598:	4619      	mov	r1, r3
 800059a:	f002 ffbb 	bl	8003514 <HAL_GPIO_WritePin>
    for(int i = 0; i < layersSize; i++) {
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	3301      	adds	r3, #1
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	4b07      	ldr	r3, [pc, #28]	@ (80005c4 <disableAllPins+0xa0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	683a      	ldr	r2, [r7, #0]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	dbe1      	blt.n	8000572 <disableAllPins+0x4e>
    }
}
 80005ae:	bf00      	nop
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000000 	.word	0x20000000
 80005bc:	200000f0 	.word	0x200000f0
 80005c0:	200000c0 	.word	0x200000c0
 80005c4:	200000f4 	.word	0x200000f4

080005c8 <enableAllPins>:

void enableAllPins() {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
    for (int i = 0; i < mapSize; i++) {
 80005ce:	2300      	movs	r3, #0
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	e018      	b.n	8000606 <enableAllPins+0x3e>
        HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 80005d4:	4921      	ldr	r1, [pc, #132]	@ (800065c <enableAllPins+0x94>)
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	4613      	mov	r3, r2
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	4413      	add	r3, r2
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	440b      	add	r3, r1
 80005e2:	3304      	adds	r3, #4
 80005e4:	6818      	ldr	r0, [r3, #0]
 80005e6:	491d      	ldr	r1, [pc, #116]	@ (800065c <enableAllPins+0x94>)
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	4613      	mov	r3, r2
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	4413      	add	r3, r2
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	440b      	add	r3, r1
 80005f4:	3308      	adds	r3, #8
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	2200      	movs	r2, #0
 80005fa:	4619      	mov	r1, r3
 80005fc:	f002 ff8a 	bl	8003514 <HAL_GPIO_WritePin>
    for (int i = 0; i < mapSize; i++) {
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3301      	adds	r3, #1
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	4b16      	ldr	r3, [pc, #88]	@ (8000660 <enableAllPins+0x98>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	429a      	cmp	r2, r3
 800060e:	dbe1      	blt.n	80005d4 <enableAllPins+0xc>
    }

    for(int i = 0; i < layersSize; i++) {
 8000610:	2300      	movs	r3, #0
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	e018      	b.n	8000648 <enableAllPins+0x80>
    	HAL_GPIO_WritePin(layers[i].port, layers[i].pin, GPIO_PIN_SET);
 8000616:	4913      	ldr	r1, [pc, #76]	@ (8000664 <enableAllPins+0x9c>)
 8000618:	683a      	ldr	r2, [r7, #0]
 800061a:	4613      	mov	r3, r2
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	4413      	add	r3, r2
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	440b      	add	r3, r1
 8000624:	3304      	adds	r3, #4
 8000626:	6818      	ldr	r0, [r3, #0]
 8000628:	490e      	ldr	r1, [pc, #56]	@ (8000664 <enableAllPins+0x9c>)
 800062a:	683a      	ldr	r2, [r7, #0]
 800062c:	4613      	mov	r3, r2
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	4413      	add	r3, r2
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	440b      	add	r3, r1
 8000636:	3308      	adds	r3, #8
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	2201      	movs	r2, #1
 800063c:	4619      	mov	r1, r3
 800063e:	f002 ff69 	bl	8003514 <HAL_GPIO_WritePin>
    for(int i = 0; i < layersSize; i++) {
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	3301      	adds	r3, #1
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	4b07      	ldr	r3, [pc, #28]	@ (8000668 <enableAllPins+0xa0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	683a      	ldr	r2, [r7, #0]
 800064e:	429a      	cmp	r2, r3
 8000650:	dbe1      	blt.n	8000616 <enableAllPins+0x4e>
    }
}
 8000652:	bf00      	nop
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000000 	.word	0x20000000
 8000660:	200000f0 	.word	0x200000f0
 8000664:	200000c0 	.word	0x200000c0
 8000668:	200000f4 	.word	0x200000f4

0800066c <turnColumnsOff>:
//turn columns off
void turnColumnsOff() {
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0

	for (int i = 0; i < mapSize; i++) {
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	e018      	b.n	80006aa <turnColumnsOff+0x3e>
	        HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_SET);
 8000678:	4911      	ldr	r1, [pc, #68]	@ (80006c0 <turnColumnsOff+0x54>)
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	4613      	mov	r3, r2
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	4413      	add	r3, r2
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	440b      	add	r3, r1
 8000686:	3304      	adds	r3, #4
 8000688:	6818      	ldr	r0, [r3, #0]
 800068a:	490d      	ldr	r1, [pc, #52]	@ (80006c0 <turnColumnsOff+0x54>)
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4613      	mov	r3, r2
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	4413      	add	r3, r2
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	440b      	add	r3, r1
 8000698:	3308      	adds	r3, #8
 800069a:	881b      	ldrh	r3, [r3, #0]
 800069c:	2201      	movs	r2, #1
 800069e:	4619      	mov	r1, r3
 80006a0:	f002 ff38 	bl	8003514 <HAL_GPIO_WritePin>
	for (int i = 0; i < mapSize; i++) {
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3301      	adds	r3, #1
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <turnColumnsOff+0x58>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	dbe1      	blt.n	8000678 <turnColumnsOff+0xc>
	    }

}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000000 	.word	0x20000000
 80006c4:	200000f0 	.word	0x200000f0

080006c8 <turnOnAndOffAllByLayerUpAndDownNotTimed>:


void turnOnAndOffAllByLayerUpAndDownNotTimed()
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
  int x = 75;
 80006ce:	234b      	movs	r3, #75	@ 0x4b
 80006d0:	603b      	str	r3, [r7, #0]
  for(int i = 5; i != 0; i--)
 80006d2:	2305      	movs	r3, #5
 80006d4:	617b      	str	r3, [r7, #20]
 80006d6:	e09a      	b.n	800080e <turnOnAndOffAllByLayerUpAndDownNotTimed+0x146>
  {
    enableAllPins();
 80006d8:	f7ff ff76 	bl	80005c8 <enableAllPins>
    for(int i = layersSize; i!=0; i--)
 80006dc:	4b50      	ldr	r3, [pc, #320]	@ (8000820 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x158>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	e01e      	b.n	8000722 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x5a>
    {
    	HAL_GPIO_WritePin(layers[i-1].port, layers[i-1].pin, GPIO_PIN_RESET);
 80006e4:	693b      	ldr	r3, [r7, #16]
 80006e6:	1e5a      	subs	r2, r3, #1
 80006e8:	494e      	ldr	r1, [pc, #312]	@ (8000824 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x15c>)
 80006ea:	4613      	mov	r3, r2
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	4413      	add	r3, r2
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	440b      	add	r3, r1
 80006f4:	3304      	adds	r3, #4
 80006f6:	6818      	ldr	r0, [r3, #0]
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	1e5a      	subs	r2, r3, #1
 80006fc:	4949      	ldr	r1, [pc, #292]	@ (8000824 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x15c>)
 80006fe:	4613      	mov	r3, r2
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	4413      	add	r3, r2
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	440b      	add	r3, r1
 8000708:	3308      	adds	r3, #8
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	2200      	movs	r2, #0
 800070e:	4619      	mov	r1, r3
 8000710:	f002 ff00 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	4618      	mov	r0, r3
 8000718:	f002 fbb0 	bl	8002e7c <HAL_Delay>
    for(int i = layersSize; i!=0; i--)
 800071c:	693b      	ldr	r3, [r7, #16]
 800071e:	3b01      	subs	r3, #1
 8000720:	613b      	str	r3, [r7, #16]
 8000722:	693b      	ldr	r3, [r7, #16]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d1dd      	bne.n	80006e4 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x1c>
    }
    for(int i = 0; i< layersSize; i++)
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	e01c      	b.n	8000768 <turnOnAndOffAllByLayerUpAndDownNotTimed+0xa0>
    {
    	HAL_GPIO_WritePin(layers[i].port, layers[i].pin, GPIO_PIN_SET);
 800072e:	493d      	ldr	r1, [pc, #244]	@ (8000824 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x15c>)
 8000730:	68fa      	ldr	r2, [r7, #12]
 8000732:	4613      	mov	r3, r2
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	4413      	add	r3, r2
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	440b      	add	r3, r1
 800073c:	3304      	adds	r3, #4
 800073e:	6818      	ldr	r0, [r3, #0]
 8000740:	4938      	ldr	r1, [pc, #224]	@ (8000824 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x15c>)
 8000742:	68fa      	ldr	r2, [r7, #12]
 8000744:	4613      	mov	r3, r2
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	4413      	add	r3, r2
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	440b      	add	r3, r1
 800074e:	3308      	adds	r3, #8
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	2201      	movs	r2, #1
 8000754:	4619      	mov	r1, r3
 8000756:	f002 fedd 	bl	8003514 <HAL_GPIO_WritePin>
    	    	HAL_Delay(x);
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	4618      	mov	r0, r3
 800075e:	f002 fb8d 	bl	8002e7c <HAL_Delay>
    for(int i = 0; i< layersSize; i++)
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	3301      	adds	r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	4b2d      	ldr	r3, [pc, #180]	@ (8000820 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x158>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	68fa      	ldr	r2, [r7, #12]
 800076e:	429a      	cmp	r2, r3
 8000770:	dbdd      	blt.n	800072e <turnOnAndOffAllByLayerUpAndDownNotTimed+0x66>
    }
      for(int i = 0; i<layersSize; i++)
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	e01c      	b.n	80007b2 <turnOnAndOffAllByLayerUpAndDownNotTimed+0xea>
    {
    	  HAL_GPIO_WritePin(layers[i].port, layers[i].pin, GPIO_PIN_RESET);
 8000778:	492a      	ldr	r1, [pc, #168]	@ (8000824 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x15c>)
 800077a:	68ba      	ldr	r2, [r7, #8]
 800077c:	4613      	mov	r3, r2
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	4413      	add	r3, r2
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	440b      	add	r3, r1
 8000786:	3304      	adds	r3, #4
 8000788:	6818      	ldr	r0, [r3, #0]
 800078a:	4926      	ldr	r1, [pc, #152]	@ (8000824 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x15c>)
 800078c:	68ba      	ldr	r2, [r7, #8]
 800078e:	4613      	mov	r3, r2
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	4413      	add	r3, r2
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	440b      	add	r3, r1
 8000798:	3308      	adds	r3, #8
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	2200      	movs	r2, #0
 800079e:	4619      	mov	r1, r3
 80007a0:	f002 feb8 	bl	8003514 <HAL_GPIO_WritePin>
    	      	    	HAL_Delay(x);
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f002 fb68 	bl	8002e7c <HAL_Delay>
      for(int i = 0; i<layersSize; i++)
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	3301      	adds	r3, #1
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000820 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x158>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	dbdd      	blt.n	8000778 <turnOnAndOffAllByLayerUpAndDownNotTimed+0xb0>
    }
    for(int i = layersSize; i!=0; i--)
 80007bc:	4b18      	ldr	r3, [pc, #96]	@ (8000820 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x158>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	e01e      	b.n	8000802 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x13a>
    {
    	HAL_GPIO_WritePin(layers[i-1].port, layers[i-1].pin, GPIO_PIN_SET);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	1e5a      	subs	r2, r3, #1
 80007c8:	4916      	ldr	r1, [pc, #88]	@ (8000824 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x15c>)
 80007ca:	4613      	mov	r3, r2
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	4413      	add	r3, r2
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	440b      	add	r3, r1
 80007d4:	3304      	adds	r3, #4
 80007d6:	6818      	ldr	r0, [r3, #0]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	1e5a      	subs	r2, r3, #1
 80007dc:	4911      	ldr	r1, [pc, #68]	@ (8000824 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x15c>)
 80007de:	4613      	mov	r3, r2
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	4413      	add	r3, r2
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	440b      	add	r3, r1
 80007e8:	3308      	adds	r3, #8
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	2201      	movs	r2, #1
 80007ee:	4619      	mov	r1, r3
 80007f0:	f002 fe90 	bl	8003514 <HAL_GPIO_WritePin>
    	    	HAL_Delay(x);
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 fb40 	bl	8002e7c <HAL_Delay>
    for(int i = layersSize; i!=0; i--)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3b01      	subs	r3, #1
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d1dd      	bne.n	80007c4 <turnOnAndOffAllByLayerUpAndDownNotTimed+0xfc>
  for(int i = 5; i != 0; i--)
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	3b01      	subs	r3, #1
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	2b00      	cmp	r3, #0
 8000812:	f47f af61 	bne.w	80006d8 <turnOnAndOffAllByLayerUpAndDownNotTimed+0x10>
    }
  }
}
 8000816:	bf00      	nop
 8000818:	bf00      	nop
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200000f4 	.word	0x200000f4
 8000824:	200000c0 	.word	0x200000c0

08000828 <turnOnAndOffAllByColumnSideways>:

//turn everything on and off by column sideways
void turnOnAndOffAllByColumnSideways()
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b094      	sub	sp, #80	@ 0x50
 800082c:	af00      	add	r7, sp, #0
  int x = 75;
 800082e:	234b      	movs	r3, #75	@ 0x4b
 8000830:	607b      	str	r3, [r7, #4]
  disableAllPins();
 8000832:	f7ff fe77 	bl	8000524 <disableAllPins>
  //turn on layers
  for(int i = 0; i<layersSize; i++)
 8000836:	2300      	movs	r3, #0
 8000838:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800083a:	e018      	b.n	800086e <turnOnAndOffAllByColumnSideways+0x46>
  {
	  HAL_GPIO_WritePin(layers[i].port, layers[i].pin, GPIO_PIN_SET);
 800083c:	49af      	ldr	r1, [pc, #700]	@ (8000afc <turnOnAndOffAllByColumnSideways+0x2d4>)
 800083e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000840:	4613      	mov	r3, r2
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	4413      	add	r3, r2
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	440b      	add	r3, r1
 800084a:	3304      	adds	r3, #4
 800084c:	6818      	ldr	r0, [r3, #0]
 800084e:	49ab      	ldr	r1, [pc, #684]	@ (8000afc <turnOnAndOffAllByColumnSideways+0x2d4>)
 8000850:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000852:	4613      	mov	r3, r2
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4413      	add	r3, r2
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	440b      	add	r3, r1
 800085c:	3308      	adds	r3, #8
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	2201      	movs	r2, #1
 8000862:	4619      	mov	r1, r3
 8000864:	f002 fe56 	bl	8003514 <HAL_GPIO_WritePin>
  for(int i = 0; i<layersSize; i++)
 8000868:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800086a:	3301      	adds	r3, #1
 800086c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800086e:	4ba4      	ldr	r3, [pc, #656]	@ (8000b00 <turnOnAndOffAllByColumnSideways+0x2d8>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000874:	429a      	cmp	r2, r3
 8000876:	dbe1      	blt.n	800083c <turnOnAndOffAllByColumnSideways+0x14>
  }
  for(int y = 0; y<3; y++)
 8000878:	2300      	movs	r3, #0
 800087a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800087c:	e239      	b.n	8000cf2 <turnOnAndOffAllByColumnSideways+0x4ca>
  {
    //turn on 0-3
    for(int i = 0; i<4; i++)
 800087e:	2300      	movs	r3, #0
 8000880:	647b      	str	r3, [r7, #68]	@ 0x44
 8000882:	e01c      	b.n	80008be <turnOnAndOffAllByColumnSideways+0x96>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 8000884:	499f      	ldr	r1, [pc, #636]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 8000886:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000888:	4613      	mov	r3, r2
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	4413      	add	r3, r2
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	440b      	add	r3, r1
 8000892:	3304      	adds	r3, #4
 8000894:	6818      	ldr	r0, [r3, #0]
 8000896:	499b      	ldr	r1, [pc, #620]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 8000898:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800089a:	4613      	mov	r3, r2
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	4413      	add	r3, r2
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	440b      	add	r3, r1
 80008a4:	3308      	adds	r3, #8
 80008a6:	881b      	ldrh	r3, [r3, #0]
 80008a8:	2200      	movs	r2, #0
 80008aa:	4619      	mov	r1, r3
 80008ac:	f002 fe32 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f002 fae2 	bl	8002e7c <HAL_Delay>
    for(int i = 0; i<4; i++)
 80008b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80008ba:	3301      	adds	r3, #1
 80008bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80008be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80008c0:	2b03      	cmp	r3, #3
 80008c2:	dddf      	ble.n	8000884 <turnOnAndOffAllByColumnSideways+0x5c>
    }
    //turn on 4-7
    for(int i = 4; i<8; i++)
 80008c4:	2304      	movs	r3, #4
 80008c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80008c8:	e01c      	b.n	8000904 <turnOnAndOffAllByColumnSideways+0xdc>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 80008ca:	498e      	ldr	r1, [pc, #568]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 80008cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80008ce:	4613      	mov	r3, r2
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	4413      	add	r3, r2
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	440b      	add	r3, r1
 80008d8:	3304      	adds	r3, #4
 80008da:	6818      	ldr	r0, [r3, #0]
 80008dc:	4989      	ldr	r1, [pc, #548]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 80008de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80008e0:	4613      	mov	r3, r2
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	4413      	add	r3, r2
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	440b      	add	r3, r1
 80008ea:	3308      	adds	r3, #8
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	2200      	movs	r2, #0
 80008f0:	4619      	mov	r1, r3
 80008f2:	f002 fe0f 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 fabf 	bl	8002e7c <HAL_Delay>
    for(int i = 4; i<8; i++)
 80008fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000900:	3301      	adds	r3, #1
 8000902:	643b      	str	r3, [r7, #64]	@ 0x40
 8000904:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000906:	2b07      	cmp	r3, #7
 8000908:	dddf      	ble.n	80008ca <turnOnAndOffAllByColumnSideways+0xa2>
    }
    //turn on 8-11
    for(int i = 8; i<12; i++)
 800090a:	2308      	movs	r3, #8
 800090c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800090e:	e01c      	b.n	800094a <turnOnAndOffAllByColumnSideways+0x122>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 8000910:	497c      	ldr	r1, [pc, #496]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 8000912:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000914:	4613      	mov	r3, r2
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	4413      	add	r3, r2
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	440b      	add	r3, r1
 800091e:	3304      	adds	r3, #4
 8000920:	6818      	ldr	r0, [r3, #0]
 8000922:	4978      	ldr	r1, [pc, #480]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 8000924:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000926:	4613      	mov	r3, r2
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	4413      	add	r3, r2
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	440b      	add	r3, r1
 8000930:	3308      	adds	r3, #8
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	2200      	movs	r2, #0
 8000936:	4619      	mov	r1, r3
 8000938:	f002 fdec 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4618      	mov	r0, r3
 8000940:	f002 fa9c 	bl	8002e7c <HAL_Delay>
    for(int i = 8; i<12; i++)
 8000944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000946:	3301      	adds	r3, #1
 8000948:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800094a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800094c:	2b0b      	cmp	r3, #11
 800094e:	dddf      	ble.n	8000910 <turnOnAndOffAllByColumnSideways+0xe8>
    }
    //turn on 12-15
    for(int i = 12; i<16; i++)
 8000950:	230c      	movs	r3, #12
 8000952:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000954:	e01c      	b.n	8000990 <turnOnAndOffAllByColumnSideways+0x168>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 8000956:	496b      	ldr	r1, [pc, #428]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 8000958:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800095a:	4613      	mov	r3, r2
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	4413      	add	r3, r2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	440b      	add	r3, r1
 8000964:	3304      	adds	r3, #4
 8000966:	6818      	ldr	r0, [r3, #0]
 8000968:	4966      	ldr	r1, [pc, #408]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 800096a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800096c:	4613      	mov	r3, r2
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	4413      	add	r3, r2
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	440b      	add	r3, r1
 8000976:	3308      	adds	r3, #8
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	2200      	movs	r2, #0
 800097c:	4619      	mov	r1, r3
 800097e:	f002 fdc9 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4618      	mov	r0, r3
 8000986:	f002 fa79 	bl	8002e7c <HAL_Delay>
    for(int i = 12; i<16; i++)
 800098a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800098c:	3301      	adds	r3, #1
 800098e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000992:	2b0f      	cmp	r3, #15
 8000994:	dddf      	ble.n	8000956 <turnOnAndOffAllByColumnSideways+0x12e>
    }
    //turn off 0-3
    for(int i = 0; i<4; i++)
 8000996:	2300      	movs	r3, #0
 8000998:	637b      	str	r3, [r7, #52]	@ 0x34
 800099a:	e01c      	b.n	80009d6 <turnOnAndOffAllByColumnSideways+0x1ae>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_SET);
 800099c:	4959      	ldr	r1, [pc, #356]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 800099e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80009a0:	4613      	mov	r3, r2
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	4413      	add	r3, r2
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	440b      	add	r3, r1
 80009aa:	3304      	adds	r3, #4
 80009ac:	6818      	ldr	r0, [r3, #0]
 80009ae:	4955      	ldr	r1, [pc, #340]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 80009b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80009b2:	4613      	mov	r3, r2
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	4413      	add	r3, r2
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	440b      	add	r3, r1
 80009bc:	3308      	adds	r3, #8
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	2201      	movs	r2, #1
 80009c2:	4619      	mov	r1, r3
 80009c4:	f002 fda6 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f002 fa56 	bl	8002e7c <HAL_Delay>
    for(int i = 0; i<4; i++)
 80009d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009d2:	3301      	adds	r3, #1
 80009d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80009d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009d8:	2b03      	cmp	r3, #3
 80009da:	dddf      	ble.n	800099c <turnOnAndOffAllByColumnSideways+0x174>
    }
    //turn off 4-7
    for(int i = 4; i<8; i++)
 80009dc:	2304      	movs	r3, #4
 80009de:	633b      	str	r3, [r7, #48]	@ 0x30
 80009e0:	e01c      	b.n	8000a1c <turnOnAndOffAllByColumnSideways+0x1f4>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_SET);
 80009e2:	4948      	ldr	r1, [pc, #288]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 80009e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80009e6:	4613      	mov	r3, r2
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	4413      	add	r3, r2
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	440b      	add	r3, r1
 80009f0:	3304      	adds	r3, #4
 80009f2:	6818      	ldr	r0, [r3, #0]
 80009f4:	4943      	ldr	r1, [pc, #268]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 80009f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80009f8:	4613      	mov	r3, r2
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	4413      	add	r3, r2
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	440b      	add	r3, r1
 8000a02:	3308      	adds	r3, #8
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	2201      	movs	r2, #1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f002 fd83 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f002 fa33 	bl	8002e7c <HAL_Delay>
    for(int i = 4; i<8; i++)
 8000a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a18:	3301      	adds	r3, #1
 8000a1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8000a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	dddf      	ble.n	80009e2 <turnOnAndOffAllByColumnSideways+0x1ba>
    }
    //turn off 8-11
    for(int i = 8; i<12; i++)
 8000a22:	2308      	movs	r3, #8
 8000a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a26:	e01c      	b.n	8000a62 <turnOnAndOffAllByColumnSideways+0x23a>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_SET);
 8000a28:	4936      	ldr	r1, [pc, #216]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 8000a2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	4413      	add	r3, r2
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	440b      	add	r3, r1
 8000a36:	3304      	adds	r3, #4
 8000a38:	6818      	ldr	r0, [r3, #0]
 8000a3a:	4932      	ldr	r1, [pc, #200]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 8000a3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a3e:	4613      	mov	r3, r2
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	4413      	add	r3, r2
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	440b      	add	r3, r1
 8000a48:	3308      	adds	r3, #8
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	4619      	mov	r1, r3
 8000a50:	f002 fd60 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f002 fa10 	bl	8002e7c <HAL_Delay>
    for(int i = 8; i<12; i++)
 8000a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a5e:	3301      	adds	r3, #1
 8000a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a64:	2b0b      	cmp	r3, #11
 8000a66:	dddf      	ble.n	8000a28 <turnOnAndOffAllByColumnSideways+0x200>
    }
    //turn off 12-15
    for(int i = 12; i<16; i++)
 8000a68:	230c      	movs	r3, #12
 8000a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a6c:	e01c      	b.n	8000aa8 <turnOnAndOffAllByColumnSideways+0x280>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_SET);
 8000a6e:	4925      	ldr	r1, [pc, #148]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 8000a70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a72:	4613      	mov	r3, r2
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	4413      	add	r3, r2
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	6818      	ldr	r0, [r3, #0]
 8000a80:	4920      	ldr	r1, [pc, #128]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 8000a82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a84:	4613      	mov	r3, r2
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	4413      	add	r3, r2
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	440b      	add	r3, r1
 8000a8e:	3308      	adds	r3, #8
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	2201      	movs	r2, #1
 8000a94:	4619      	mov	r1, r3
 8000a96:	f002 fd3d 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f002 f9ed 	bl	8002e7c <HAL_Delay>
    for(int i = 12; i<16; i++)
 8000aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aaa:	2b0f      	cmp	r3, #15
 8000aac:	dddf      	ble.n	8000a6e <turnOnAndOffAllByColumnSideways+0x246>
    }
    //turn on 12-15
    for(int i = 12; i<16; i++)
 8000aae:	230c      	movs	r3, #12
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ab2:	e01c      	b.n	8000aee <turnOnAndOffAllByColumnSideways+0x2c6>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 8000ab4:	4913      	ldr	r1, [pc, #76]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 8000ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ab8:	4613      	mov	r3, r2
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	4413      	add	r3, r2
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	3304      	adds	r3, #4
 8000ac4:	6818      	ldr	r0, [r3, #0]
 8000ac6:	490f      	ldr	r1, [pc, #60]	@ (8000b04 <turnOnAndOffAllByColumnSideways+0x2dc>)
 8000ac8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aca:	4613      	mov	r3, r2
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	4413      	add	r3, r2
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	440b      	add	r3, r1
 8000ad4:	3308      	adds	r3, #8
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	4619      	mov	r1, r3
 8000adc:	f002 fd1a 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f002 f9ca 	bl	8002e7c <HAL_Delay>
    for(int i = 12; i<16; i++)
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aea:	3301      	adds	r3, #1
 8000aec:	627b      	str	r3, [r7, #36]	@ 0x24
 8000aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af0:	2b0f      	cmp	r3, #15
 8000af2:	dddf      	ble.n	8000ab4 <turnOnAndOffAllByColumnSideways+0x28c>
    }
    //turn on 8-11
    for(int i = 8; i<12; i++)
 8000af4:	2308      	movs	r3, #8
 8000af6:	623b      	str	r3, [r7, #32]
 8000af8:	e023      	b.n	8000b42 <turnOnAndOffAllByColumnSideways+0x31a>
 8000afa:	bf00      	nop
 8000afc:	200000c0 	.word	0x200000c0
 8000b00:	200000f4 	.word	0x200000f4
 8000b04:	20000000 	.word	0x20000000
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 8000b08:	497e      	ldr	r1, [pc, #504]	@ (8000d04 <turnOnAndOffAllByColumnSideways+0x4dc>)
 8000b0a:	6a3a      	ldr	r2, [r7, #32]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	4413      	add	r3, r2
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	440b      	add	r3, r1
 8000b16:	3304      	adds	r3, #4
 8000b18:	6818      	ldr	r0, [r3, #0]
 8000b1a:	497a      	ldr	r1, [pc, #488]	@ (8000d04 <turnOnAndOffAllByColumnSideways+0x4dc>)
 8000b1c:	6a3a      	ldr	r2, [r7, #32]
 8000b1e:	4613      	mov	r3, r2
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	4413      	add	r3, r2
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	440b      	add	r3, r1
 8000b28:	3308      	adds	r3, #8
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	4619      	mov	r1, r3
 8000b30:	f002 fcf0 	bl	8003514 <HAL_GPIO_WritePin>
    	    	HAL_Delay(x);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f002 f9a0 	bl	8002e7c <HAL_Delay>
    for(int i = 8; i<12; i++)
 8000b3c:	6a3b      	ldr	r3, [r7, #32]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	623b      	str	r3, [r7, #32]
 8000b42:	6a3b      	ldr	r3, [r7, #32]
 8000b44:	2b0b      	cmp	r3, #11
 8000b46:	dddf      	ble.n	8000b08 <turnOnAndOffAllByColumnSideways+0x2e0>
    }
    //turn on 4-7
    for(int i = 4; i<8; i++)
 8000b48:	2304      	movs	r3, #4
 8000b4a:	61fb      	str	r3, [r7, #28]
 8000b4c:	e01c      	b.n	8000b88 <turnOnAndOffAllByColumnSideways+0x360>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 8000b4e:	496d      	ldr	r1, [pc, #436]	@ (8000d04 <turnOnAndOffAllByColumnSideways+0x4dc>)
 8000b50:	69fa      	ldr	r2, [r7, #28]
 8000b52:	4613      	mov	r3, r2
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	4413      	add	r3, r2
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	6818      	ldr	r0, [r3, #0]
 8000b60:	4968      	ldr	r1, [pc, #416]	@ (8000d04 <turnOnAndOffAllByColumnSideways+0x4dc>)
 8000b62:	69fa      	ldr	r2, [r7, #28]
 8000b64:	4613      	mov	r3, r2
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	4413      	add	r3, r2
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	440b      	add	r3, r1
 8000b6e:	3308      	adds	r3, #8
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	2200      	movs	r2, #0
 8000b74:	4619      	mov	r1, r3
 8000b76:	f002 fccd 	bl	8003514 <HAL_GPIO_WritePin>
    	    	HAL_Delay(x);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f002 f97d 	bl	8002e7c <HAL_Delay>
    for(int i = 4; i<8; i++)
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3301      	adds	r3, #1
 8000b86:	61fb      	str	r3, [r7, #28]
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	2b07      	cmp	r3, #7
 8000b8c:	dddf      	ble.n	8000b4e <turnOnAndOffAllByColumnSideways+0x326>
    }
    //turn on 0-3
    for(int i = 0; i<4; i++)
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61bb      	str	r3, [r7, #24]
 8000b92:	e01c      	b.n	8000bce <turnOnAndOffAllByColumnSideways+0x3a6>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 8000b94:	495b      	ldr	r1, [pc, #364]	@ (8000d04 <turnOnAndOffAllByColumnSideways+0x4dc>)
 8000b96:	69ba      	ldr	r2, [r7, #24]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	4413      	add	r3, r2
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	3304      	adds	r3, #4
 8000ba4:	6818      	ldr	r0, [r3, #0]
 8000ba6:	4957      	ldr	r1, [pc, #348]	@ (8000d04 <turnOnAndOffAllByColumnSideways+0x4dc>)
 8000ba8:	69ba      	ldr	r2, [r7, #24]
 8000baa:	4613      	mov	r3, r2
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	4413      	add	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	440b      	add	r3, r1
 8000bb4:	3308      	adds	r3, #8
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	4619      	mov	r1, r3
 8000bbc:	f002 fcaa 	bl	8003514 <HAL_GPIO_WritePin>
    	    	HAL_Delay(x);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f002 f95a 	bl	8002e7c <HAL_Delay>
    for(int i = 0; i<4; i++)
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	61bb      	str	r3, [r7, #24]
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	dddf      	ble.n	8000b94 <turnOnAndOffAllByColumnSideways+0x36c>
    }
    //turn off 12-15
    for(int i = 12; i<16; i++)
 8000bd4:	230c      	movs	r3, #12
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	e01c      	b.n	8000c14 <turnOnAndOffAllByColumnSideways+0x3ec>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_SET);
 8000bda:	494a      	ldr	r1, [pc, #296]	@ (8000d04 <turnOnAndOffAllByColumnSideways+0x4dc>)
 8000bdc:	697a      	ldr	r2, [r7, #20]
 8000bde:	4613      	mov	r3, r2
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	4413      	add	r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	440b      	add	r3, r1
 8000be8:	3304      	adds	r3, #4
 8000bea:	6818      	ldr	r0, [r3, #0]
 8000bec:	4945      	ldr	r1, [pc, #276]	@ (8000d04 <turnOnAndOffAllByColumnSideways+0x4dc>)
 8000bee:	697a      	ldr	r2, [r7, #20]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	4413      	add	r3, r2
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	440b      	add	r3, r1
 8000bfa:	3308      	adds	r3, #8
 8000bfc:	881b      	ldrh	r3, [r3, #0]
 8000bfe:	2201      	movs	r2, #1
 8000c00:	4619      	mov	r1, r3
 8000c02:	f002 fc87 	bl	8003514 <HAL_GPIO_WritePin>
    	    	HAL_Delay(x);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f002 f937 	bl	8002e7c <HAL_Delay>
    for(int i = 12; i<16; i++)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	3301      	adds	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	2b0f      	cmp	r3, #15
 8000c18:	dddf      	ble.n	8000bda <turnOnAndOffAllByColumnSideways+0x3b2>
    }
    //turn off 8-11
    for(int i = 8; i<12; i++)
 8000c1a:	2308      	movs	r3, #8
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	e01c      	b.n	8000c5a <turnOnAndOffAllByColumnSideways+0x432>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_SET);
 8000c20:	4938      	ldr	r1, [pc, #224]	@ (8000d04 <turnOnAndOffAllByColumnSideways+0x4dc>)
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4613      	mov	r3, r2
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	4413      	add	r3, r2
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	3304      	adds	r3, #4
 8000c30:	6818      	ldr	r0, [r3, #0]
 8000c32:	4934      	ldr	r1, [pc, #208]	@ (8000d04 <turnOnAndOffAllByColumnSideways+0x4dc>)
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	4613      	mov	r3, r2
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	4413      	add	r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	440b      	add	r3, r1
 8000c40:	3308      	adds	r3, #8
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	2201      	movs	r2, #1
 8000c46:	4619      	mov	r1, r3
 8000c48:	f002 fc64 	bl	8003514 <HAL_GPIO_WritePin>
    	    	    	HAL_Delay(x);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f002 f914 	bl	8002e7c <HAL_Delay>
    for(int i = 8; i<12; i++)
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	3301      	adds	r3, #1
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	2b0b      	cmp	r3, #11
 8000c5e:	dddf      	ble.n	8000c20 <turnOnAndOffAllByColumnSideways+0x3f8>
    }
    //turn off 4-7
    for(int i = 4; i<8; i++)
 8000c60:	2304      	movs	r3, #4
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	e01c      	b.n	8000ca0 <turnOnAndOffAllByColumnSideways+0x478>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_SET);
 8000c66:	4927      	ldr	r1, [pc, #156]	@ (8000d04 <turnOnAndOffAllByColumnSideways+0x4dc>)
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	4413      	add	r3, r2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	440b      	add	r3, r1
 8000c74:	3304      	adds	r3, #4
 8000c76:	6818      	ldr	r0, [r3, #0]
 8000c78:	4922      	ldr	r1, [pc, #136]	@ (8000d04 <turnOnAndOffAllByColumnSideways+0x4dc>)
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	4413      	add	r3, r2
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	440b      	add	r3, r1
 8000c86:	3308      	adds	r3, #8
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f002 fc41 	bl	8003514 <HAL_GPIO_WritePin>
    	    	    	HAL_Delay(x);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f002 f8f1 	bl	8002e7c <HAL_Delay>
    for(int i = 4; i<8; i++)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2b07      	cmp	r3, #7
 8000ca4:	dddf      	ble.n	8000c66 <turnOnAndOffAllByColumnSideways+0x43e>
    }
    //turn off 0-3
    for(int i = 0; i<4; i++)
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	e01c      	b.n	8000ce6 <turnOnAndOffAllByColumnSideways+0x4be>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_SET);
 8000cac:	4915      	ldr	r1, [pc, #84]	@ (8000d04 <turnOnAndOffAllByColumnSideways+0x4dc>)
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	4413      	add	r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	440b      	add	r3, r1
 8000cba:	3304      	adds	r3, #4
 8000cbc:	6818      	ldr	r0, [r3, #0]
 8000cbe:	4911      	ldr	r1, [pc, #68]	@ (8000d04 <turnOnAndOffAllByColumnSideways+0x4dc>)
 8000cc0:	68ba      	ldr	r2, [r7, #8]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	4413      	add	r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	440b      	add	r3, r1
 8000ccc:	3308      	adds	r3, #8
 8000cce:	881b      	ldrh	r3, [r3, #0]
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	f002 fc1e 	bl	8003514 <HAL_GPIO_WritePin>
    	    	    	HAL_Delay(x);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f002 f8ce 	bl	8002e7c <HAL_Delay>
    for(int i = 0; i<4; i++)
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	2b03      	cmp	r3, #3
 8000cea:	dddf      	ble.n	8000cac <turnOnAndOffAllByColumnSideways+0x484>
  for(int y = 0; y<3; y++)
 8000cec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000cee:	3301      	adds	r3, #1
 8000cf0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000cf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	f77f adc2 	ble.w	800087e <turnOnAndOffAllByColumnSideways+0x56>
    }
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	bf00      	nop
 8000cfe:	3750      	adds	r7, #80	@ 0x50
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000000 	.word	0x20000000

08000d08 <layerstompUpAndDown>:

//up and down single layer stomp
void layerstompUpAndDown()
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af00      	add	r7, sp, #0
  int x = 75;
 8000d0e:	234b      	movs	r3, #75	@ 0x4b
 8000d10:	603b      	str	r3, [r7, #0]
  for(int i = 0; i<4; i++)
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
 8000d16:	e018      	b.n	8000d4a <layerstompUpAndDown+0x42>
  {
	  HAL_GPIO_WritePin(layers[i].port, layers[i].pin, GPIO_PIN_RESET);
 8000d18:	4978      	ldr	r1, [pc, #480]	@ (8000efc <layerstompUpAndDown+0x1f4>)
 8000d1a:	69fa      	ldr	r2, [r7, #28]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	4413      	add	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	440b      	add	r3, r1
 8000d26:	3304      	adds	r3, #4
 8000d28:	6818      	ldr	r0, [r3, #0]
 8000d2a:	4974      	ldr	r1, [pc, #464]	@ (8000efc <layerstompUpAndDown+0x1f4>)
 8000d2c:	69fa      	ldr	r2, [r7, #28]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	4413      	add	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	440b      	add	r3, r1
 8000d38:	3308      	adds	r3, #8
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f002 fbe8 	bl	8003514 <HAL_GPIO_WritePin>
  for(int i = 0; i<4; i++)
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	3301      	adds	r3, #1
 8000d48:	61fb      	str	r3, [r7, #28]
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	2b03      	cmp	r3, #3
 8000d4e:	dde3      	ble.n	8000d18 <layerstompUpAndDown+0x10>
  }
  for(int y = 0; y<5; y++)
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
 8000d54:	e0c9      	b.n	8000eea <layerstompUpAndDown+0x1e2>
  {
    for(int count = 0; count<1; count++)
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	e078      	b.n	8000e4e <layerstompUpAndDown+0x146>
    {
      for(int i = 0; i<4; i++)
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	e032      	b.n	8000dc8 <layerstompUpAndDown+0xc0>
      {
    	  HAL_GPIO_WritePin(layers[i].port, layers[i].pin, GPIO_PIN_SET);
 8000d62:	4966      	ldr	r1, [pc, #408]	@ (8000efc <layerstompUpAndDown+0x1f4>)
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4613      	mov	r3, r2
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	4413      	add	r3, r2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	440b      	add	r3, r1
 8000d70:	3304      	adds	r3, #4
 8000d72:	6818      	ldr	r0, [r3, #0]
 8000d74:	4961      	ldr	r1, [pc, #388]	@ (8000efc <layerstompUpAndDown+0x1f4>)
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	440b      	add	r3, r1
 8000d82:	3308      	adds	r3, #8
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	2201      	movs	r2, #1
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f002 fbc3 	bl	8003514 <HAL_GPIO_WritePin>
    	  HAL_Delay(x);
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f002 f873 	bl	8002e7c <HAL_Delay>
          HAL_GPIO_WritePin(layers[i].port, layers[i].pin, GPIO_PIN_RESET);
 8000d96:	4959      	ldr	r1, [pc, #356]	@ (8000efc <layerstompUpAndDown+0x1f4>)
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	4413      	add	r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	440b      	add	r3, r1
 8000da4:	3304      	adds	r3, #4
 8000da6:	6818      	ldr	r0, [r3, #0]
 8000da8:	4954      	ldr	r1, [pc, #336]	@ (8000efc <layerstompUpAndDown+0x1f4>)
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4613      	mov	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4413      	add	r3, r2
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	440b      	add	r3, r1
 8000db6:	3308      	adds	r3, #8
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f002 fba9 	bl	8003514 <HAL_GPIO_WritePin>
      for(int i = 0; i<4; i++)
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	ddc9      	ble.n	8000d62 <layerstompUpAndDown+0x5a>
      }
      for(int i = 4; i !=0; i--)
 8000dce:	2304      	movs	r3, #4
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	e036      	b.n	8000e42 <layerstompUpAndDown+0x13a>
      {
    	  HAL_GPIO_WritePin(layers[i-1].port, layers[i-1].pin, GPIO_PIN_SET);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	1e5a      	subs	r2, r3, #1
 8000dd8:	4948      	ldr	r1, [pc, #288]	@ (8000efc <layerstompUpAndDown+0x1f4>)
 8000dda:	4613      	mov	r3, r2
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	4413      	add	r3, r2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	440b      	add	r3, r1
 8000de4:	3304      	adds	r3, #4
 8000de6:	6818      	ldr	r0, [r3, #0]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	1e5a      	subs	r2, r3, #1
 8000dec:	4943      	ldr	r1, [pc, #268]	@ (8000efc <layerstompUpAndDown+0x1f4>)
 8000dee:	4613      	mov	r3, r2
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	4413      	add	r3, r2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	440b      	add	r3, r1
 8000df8:	3308      	adds	r3, #8
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f002 fb88 	bl	8003514 <HAL_GPIO_WritePin>
    	  HAL_Delay(x);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f002 f838 	bl	8002e7c <HAL_Delay>
    	  HAL_GPIO_WritePin(layers[i-1].port, layers[i-1].pin, GPIO_PIN_RESET);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	1e5a      	subs	r2, r3, #1
 8000e10:	493a      	ldr	r1, [pc, #232]	@ (8000efc <layerstompUpAndDown+0x1f4>)
 8000e12:	4613      	mov	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4413      	add	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	6818      	ldr	r0, [r3, #0]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	1e5a      	subs	r2, r3, #1
 8000e24:	4935      	ldr	r1, [pc, #212]	@ (8000efc <layerstompUpAndDown+0x1f4>)
 8000e26:	4613      	mov	r3, r2
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	4413      	add	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	440b      	add	r3, r1
 8000e30:	3308      	adds	r3, #8
 8000e32:	881b      	ldrh	r3, [r3, #0]
 8000e34:	2200      	movs	r2, #0
 8000e36:	4619      	mov	r1, r3
 8000e38:	f002 fb6c 	bl	8003514 <HAL_GPIO_WritePin>
      for(int i = 4; i !=0; i--)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1c5      	bne.n	8000dd4 <layerstompUpAndDown+0xcc>
    for(int count = 0; count<1; count++)
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	dd83      	ble.n	8000d5c <layerstompUpAndDown+0x54>
      }
    }
    for(int i = 0; i<4; i++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	e01c      	b.n	8000e94 <layerstompUpAndDown+0x18c>
    {
    	HAL_GPIO_WritePin(layers[i].port, layers[i].pin, GPIO_PIN_SET);
 8000e5a:	4928      	ldr	r1, [pc, #160]	@ (8000efc <layerstompUpAndDown+0x1f4>)
 8000e5c:	68ba      	ldr	r2, [r7, #8]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	4413      	add	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	440b      	add	r3, r1
 8000e68:	3304      	adds	r3, #4
 8000e6a:	6818      	ldr	r0, [r3, #0]
 8000e6c:	4923      	ldr	r1, [pc, #140]	@ (8000efc <layerstompUpAndDown+0x1f4>)
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	4613      	mov	r3, r2
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	4413      	add	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	440b      	add	r3, r1
 8000e7a:	3308      	adds	r3, #8
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4619      	mov	r1, r3
 8000e82:	f002 fb47 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f001 fff7 	bl	8002e7c <HAL_Delay>
    for(int i = 0; i<4; i++)
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	3301      	adds	r3, #1
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	dddf      	ble.n	8000e5a <layerstompUpAndDown+0x152>
    }
    for(int i = 4; i!=0; i--)
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	e01e      	b.n	8000ede <layerstompUpAndDown+0x1d6>
    {
    	HAL_GPIO_WritePin(layers[i-1].port, layers[i-1].pin, GPIO_PIN_RESET);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	1e5a      	subs	r2, r3, #1
 8000ea4:	4915      	ldr	r1, [pc, #84]	@ (8000efc <layerstompUpAndDown+0x1f4>)
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	4413      	add	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	440b      	add	r3, r1
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	6818      	ldr	r0, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	1e5a      	subs	r2, r3, #1
 8000eb8:	4910      	ldr	r1, [pc, #64]	@ (8000efc <layerstompUpAndDown+0x1f4>)
 8000eba:	4613      	mov	r3, r2
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	4413      	add	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	3308      	adds	r3, #8
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f002 fb22 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f001 ffd2 	bl	8002e7c <HAL_Delay>
    for(int i = 4; i!=0; i--)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1dd      	bne.n	8000ea0 <layerstompUpAndDown+0x198>
  for(int y = 0; y<5; y++)
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	61bb      	str	r3, [r7, #24]
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	2b04      	cmp	r3, #4
 8000eee:	f77f af32 	ble.w	8000d56 <layerstompUpAndDown+0x4e>
    }
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	bf00      	nop
 8000ef6:	3720      	adds	r7, #32
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200000c0 	.word	0x200000c0

08000f00 <flickerOff>:

//flicker off
void flickerOff()
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
  enableAllPins();
 8000f06:	f7ff fb5f 	bl	80005c8 <enableAllPins>
  for(int i = 0; i!= 150; i+=5)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	e00f      	b.n	8000f30 <flickerOff+0x30>
  {
    disableAllPins();
 8000f10:	f7ff fb08 	bl	8000524 <disableAllPins>
    HAL_Delay(i+50);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3332      	adds	r3, #50	@ 0x32
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f001 ffaf 	bl	8002e7c <HAL_Delay>
    enableAllPins();
 8000f1e:	f7ff fb53 	bl	80005c8 <enableAllPins>
    HAL_Delay(i);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f001 ffa9 	bl	8002e7c <HAL_Delay>
  for(int i = 0; i!= 150; i+=5)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3305      	adds	r3, #5
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b96      	cmp	r3, #150	@ 0x96
 8000f34:	d1ec      	bne.n	8000f10 <flickerOff+0x10>
  }
}
 8000f36:	bf00      	nop
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <aroundEdgeDown>:
//around edge of the cube down
void aroundEdgeDown()
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
  for(int x = 200; x != 0; x -=50)
 8000f46:	23c8      	movs	r3, #200	@ 0xc8
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	e152      	b.n	80011f2 <aroundEdgeDown+0x2b2>
  {
    disableAllPins();
 8000f4c:	f7ff faea 	bl	8000524 <disableAllPins>
    for(int i = 4; i != 0; i--)
 8000f50:	2304      	movs	r3, #4
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	e146      	b.n	80011e4 <aroundEdgeDown+0x2a4>
    {
    	HAL_GPIO_WritePin(layers[i-1].port, layers[i-1].pin, GPIO_PIN_SET);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	1e5a      	subs	r2, r3, #1
 8000f5a:	49aa      	ldr	r1, [pc, #680]	@ (8001204 <aroundEdgeDown+0x2c4>)
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	4413      	add	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	440b      	add	r3, r1
 8000f66:	3304      	adds	r3, #4
 8000f68:	6818      	ldr	r0, [r3, #0]
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	1e5a      	subs	r2, r3, #1
 8000f6e:	49a5      	ldr	r1, [pc, #660]	@ (8001204 <aroundEdgeDown+0x2c4>)
 8000f70:	4613      	mov	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	4413      	add	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	440b      	add	r3, r1
 8000f7a:	3308      	adds	r3, #8
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	4619      	mov	r1, r3
 8000f82:	f002 fac7 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(pinMap[5].port, pinMap[5].pin, GPIO_PIN_RESET);
 8000f86:	4ba0      	ldr	r3, [pc, #640]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8a:	4a9f      	ldr	r2, [pc, #636]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8000f8c:	f8b2 1044 	ldrh.w	r1, [r2, #68]	@ 0x44
 8000f90:	2200      	movs	r2, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f002 fabe 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(pinMap[6].port, pinMap[6].pin, GPIO_PIN_RESET);
 8000f98:	4b9b      	ldr	r3, [pc, #620]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9c:	4a9a      	ldr	r2, [pc, #616]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8000f9e:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f002 fab5 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(pinMap[9].port, pinMap[9].pin, GPIO_PIN_RESET);
 8000faa:	4b97      	ldr	r3, [pc, #604]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8000fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fae:	4a96      	ldr	r2, [pc, #600]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8000fb0:	f8b2 1074 	ldrh.w	r1, [r2, #116]	@ 0x74
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f002 faac 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(pinMap[10].port, pinMap[10].pin, GPIO_PIN_RESET);
 8000fbc:	4b92      	ldr	r3, [pc, #584]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8000fbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000fc0:	4a91      	ldr	r2, [pc, #580]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8000fc2:	f8b2 1080 	ldrh.w	r1, [r2, #128]	@ 0x80
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f002 faa3 	bl	8003514 <HAL_GPIO_WritePin>

    	HAL_GPIO_WritePin(pinMap[0].port, pinMap[0].pin, GPIO_PIN_RESET);
 8000fce:	4b8e      	ldr	r3, [pc, #568]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	4a8d      	ldr	r2, [pc, #564]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8000fd4:	8911      	ldrh	r1, [r2, #8]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f002 fa9b 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 ff4b 	bl	8002e7c <HAL_Delay>

    	HAL_GPIO_WritePin(pinMap[0].port, pinMap[0].pin, GPIO_PIN_SET);
 8000fe6:	4b88      	ldr	r3, [pc, #544]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	4a87      	ldr	r2, [pc, #540]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8000fec:	8911      	ldrh	r1, [r2, #8]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f002 fa8f 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(pinMap[4].port, pinMap[4].pin, GPIO_PIN_RESET);
 8000ff6:	4b84      	ldr	r3, [pc, #528]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8000ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ffa:	4a83      	ldr	r2, [pc, #524]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8000ffc:	8f11      	ldrh	r1, [r2, #56]	@ 0x38
 8000ffe:	2200      	movs	r2, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f002 fa87 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4618      	mov	r0, r3
 800100a:	f001 ff37 	bl	8002e7c <HAL_Delay>

    	HAL_GPIO_WritePin(pinMap[4].port, pinMap[4].pin, GPIO_PIN_SET);
 800100e:	4b7e      	ldr	r3, [pc, #504]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001012:	4a7d      	ldr	r2, [pc, #500]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001014:	8f11      	ldrh	r1, [r2, #56]	@ 0x38
 8001016:	2201      	movs	r2, #1
 8001018:	4618      	mov	r0, r3
 800101a:	f002 fa7b 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(pinMap[8].port, pinMap[8].pin, GPIO_PIN_RESET);
 800101e:	4b7a      	ldr	r3, [pc, #488]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001020:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001022:	4a79      	ldr	r2, [pc, #484]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001024:	f8b2 1068 	ldrh.w	r1, [r2, #104]	@ 0x68
 8001028:	2200      	movs	r2, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f002 fa72 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4618      	mov	r0, r3
 8001034:	f001 ff22 	bl	8002e7c <HAL_Delay>

    	HAL_GPIO_WritePin(pinMap[8].port, pinMap[8].pin, GPIO_PIN_SET);
 8001038:	4b73      	ldr	r3, [pc, #460]	@ (8001208 <aroundEdgeDown+0x2c8>)
 800103a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800103c:	4a72      	ldr	r2, [pc, #456]	@ (8001208 <aroundEdgeDown+0x2c8>)
 800103e:	f8b2 1068 	ldrh.w	r1, [r2, #104]	@ 0x68
 8001042:	2201      	movs	r2, #1
 8001044:	4618      	mov	r0, r3
 8001046:	f002 fa65 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(pinMap[12].port, pinMap[12].pin, GPIO_PIN_RESET);
 800104a:	4b6f      	ldr	r3, [pc, #444]	@ (8001208 <aroundEdgeDown+0x2c8>)
 800104c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001050:	4a6d      	ldr	r2, [pc, #436]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001052:	f8b2 1098 	ldrh.w	r1, [r2, #152]	@ 0x98
 8001056:	2200      	movs	r2, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f002 fa5b 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4618      	mov	r0, r3
 8001062:	f001 ff0b 	bl	8002e7c <HAL_Delay>

    	HAL_GPIO_WritePin(pinMap[12].port, pinMap[12].pin, GPIO_PIN_SET);
 8001066:	4b68      	ldr	r3, [pc, #416]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001068:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800106c:	4a66      	ldr	r2, [pc, #408]	@ (8001208 <aroundEdgeDown+0x2c8>)
 800106e:	f8b2 1098 	ldrh.w	r1, [r2, #152]	@ 0x98
 8001072:	2201      	movs	r2, #1
 8001074:	4618      	mov	r0, r3
 8001076:	f002 fa4d 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(pinMap[13].port, pinMap[13].pin, GPIO_PIN_RESET);
 800107a:	4b63      	ldr	r3, [pc, #396]	@ (8001208 <aroundEdgeDown+0x2c8>)
 800107c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001080:	4a61      	ldr	r2, [pc, #388]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001082:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	@ 0xa4
 8001086:	2200      	movs	r2, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f002 fa43 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4618      	mov	r0, r3
 8001092:	f001 fef3 	bl	8002e7c <HAL_Delay>

    	HAL_GPIO_WritePin(pinMap[13].port, pinMap[13].pin, GPIO_PIN_SET);
 8001096:	4b5c      	ldr	r3, [pc, #368]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001098:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800109c:	4a5a      	ldr	r2, [pc, #360]	@ (8001208 <aroundEdgeDown+0x2c8>)
 800109e:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	@ 0xa4
 80010a2:	2201      	movs	r2, #1
 80010a4:	4618      	mov	r0, r3
 80010a6:	f002 fa35 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(pinMap[14].port, pinMap[14].pin, GPIO_PIN_RESET);
 80010aa:	4b57      	ldr	r3, [pc, #348]	@ (8001208 <aroundEdgeDown+0x2c8>)
 80010ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80010b0:	4a55      	ldr	r2, [pc, #340]	@ (8001208 <aroundEdgeDown+0x2c8>)
 80010b2:	f8b2 10b0 	ldrh.w	r1, [r2, #176]	@ 0xb0
 80010b6:	2200      	movs	r2, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f002 fa2b 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f001 fedb 	bl	8002e7c <HAL_Delay>

    	HAL_GPIO_WritePin(pinMap[14].port, pinMap[14].pin, GPIO_PIN_SET);
 80010c6:	4b50      	ldr	r3, [pc, #320]	@ (8001208 <aroundEdgeDown+0x2c8>)
 80010c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80010cc:	4a4e      	ldr	r2, [pc, #312]	@ (8001208 <aroundEdgeDown+0x2c8>)
 80010ce:	f8b2 10b0 	ldrh.w	r1, [r2, #176]	@ 0xb0
 80010d2:	2201      	movs	r2, #1
 80010d4:	4618      	mov	r0, r3
 80010d6:	f002 fa1d 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(pinMap[15].port, pinMap[15].pin, GPIO_PIN_RESET);
 80010da:	4b4b      	ldr	r3, [pc, #300]	@ (8001208 <aroundEdgeDown+0x2c8>)
 80010dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80010e0:	4a49      	ldr	r2, [pc, #292]	@ (8001208 <aroundEdgeDown+0x2c8>)
 80010e2:	f8b2 10bc 	ldrh.w	r1, [r2, #188]	@ 0xbc
 80010e6:	2200      	movs	r2, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f002 fa13 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f001 fec3 	bl	8002e7c <HAL_Delay>

    	HAL_GPIO_WritePin(pinMap[15].port, pinMap[15].pin, GPIO_PIN_SET);
 80010f6:	4b44      	ldr	r3, [pc, #272]	@ (8001208 <aroundEdgeDown+0x2c8>)
 80010f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80010fc:	4a42      	ldr	r2, [pc, #264]	@ (8001208 <aroundEdgeDown+0x2c8>)
 80010fe:	f8b2 10bc 	ldrh.w	r1, [r2, #188]	@ 0xbc
 8001102:	2201      	movs	r2, #1
 8001104:	4618      	mov	r0, r3
 8001106:	f002 fa05 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(pinMap[11].port, pinMap[11].pin, GPIO_PIN_RESET);
 800110a:	4b3f      	ldr	r3, [pc, #252]	@ (8001208 <aroundEdgeDown+0x2c8>)
 800110c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001110:	4a3d      	ldr	r2, [pc, #244]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001112:	f8b2 108c 	ldrh.w	r1, [r2, #140]	@ 0x8c
 8001116:	2200      	movs	r2, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f002 f9fb 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	f001 feab 	bl	8002e7c <HAL_Delay>

    	HAL_GPIO_WritePin(pinMap[11].port, pinMap[11].pin, GPIO_PIN_SET);
 8001126:	4b38      	ldr	r3, [pc, #224]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800112c:	4a36      	ldr	r2, [pc, #216]	@ (8001208 <aroundEdgeDown+0x2c8>)
 800112e:	f8b2 108c 	ldrh.w	r1, [r2, #140]	@ 0x8c
 8001132:	2201      	movs	r2, #1
 8001134:	4618      	mov	r0, r3
 8001136:	f002 f9ed 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(pinMap[7].port, pinMap[7].pin, GPIO_PIN_RESET);
 800113a:	4b33      	ldr	r3, [pc, #204]	@ (8001208 <aroundEdgeDown+0x2c8>)
 800113c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800113e:	4a32      	ldr	r2, [pc, #200]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001140:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8001144:	2200      	movs	r2, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f002 f9e4 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4618      	mov	r0, r3
 8001150:	f001 fe94 	bl	8002e7c <HAL_Delay>

    	HAL_GPIO_WritePin(pinMap[7].port, pinMap[7].pin, GPIO_PIN_SET);
 8001154:	4b2c      	ldr	r3, [pc, #176]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001158:	4a2b      	ldr	r2, [pc, #172]	@ (8001208 <aroundEdgeDown+0x2c8>)
 800115a:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800115e:	2201      	movs	r2, #1
 8001160:	4618      	mov	r0, r3
 8001162:	f002 f9d7 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(pinMap[3].port, pinMap[3].pin, GPIO_PIN_RESET);
 8001166:	4b28      	ldr	r3, [pc, #160]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800116a:	4a27      	ldr	r2, [pc, #156]	@ (8001208 <aroundEdgeDown+0x2c8>)
 800116c:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 800116e:	2200      	movs	r2, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f002 f9cf 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4618      	mov	r0, r3
 800117a:	f001 fe7f 	bl	8002e7c <HAL_Delay>

    	HAL_GPIO_WritePin(pinMap[3].port, pinMap[3].pin, GPIO_PIN_SET);
 800117e:	4b22      	ldr	r3, [pc, #136]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001182:	4a21      	ldr	r2, [pc, #132]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001184:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 8001186:	2201      	movs	r2, #1
 8001188:	4618      	mov	r0, r3
 800118a:	f002 f9c3 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(pinMap[2].port, pinMap[2].pin, GPIO_PIN_RESET);
 800118e:	4b1e      	ldr	r3, [pc, #120]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	4a1d      	ldr	r2, [pc, #116]	@ (8001208 <aroundEdgeDown+0x2c8>)
 8001194:	8c11      	ldrh	r1, [r2, #32]
 8001196:	2200      	movs	r2, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f002 f9bb 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f001 fe6b 	bl	8002e7c <HAL_Delay>

    	HAL_GPIO_WritePin(pinMap[2].port, pinMap[2].pin, GPIO_PIN_SET);
 80011a6:	4b18      	ldr	r3, [pc, #96]	@ (8001208 <aroundEdgeDown+0x2c8>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	4a17      	ldr	r2, [pc, #92]	@ (8001208 <aroundEdgeDown+0x2c8>)
 80011ac:	8c11      	ldrh	r1, [r2, #32]
 80011ae:	2201      	movs	r2, #1
 80011b0:	4618      	mov	r0, r3
 80011b2:	f002 f9af 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(pinMap[1].port, pinMap[1].pin, GPIO_PIN_RESET);
 80011b6:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <aroundEdgeDown+0x2c8>)
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	4a13      	ldr	r2, [pc, #76]	@ (8001208 <aroundEdgeDown+0x2c8>)
 80011bc:	8a91      	ldrh	r1, [r2, #20]
 80011be:	2200      	movs	r2, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f002 f9a7 	bl	8003514 <HAL_GPIO_WritePin>
    	HAL_Delay(x);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f001 fe57 	bl	8002e7c <HAL_Delay>

    	HAL_GPIO_WritePin(pinMap[1].port, pinMap[1].pin, GPIO_PIN_SET);
 80011ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <aroundEdgeDown+0x2c8>)
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	4a0d      	ldr	r2, [pc, #52]	@ (8001208 <aroundEdgeDown+0x2c8>)
 80011d4:	8a91      	ldrh	r1, [r2, #20]
 80011d6:	2201      	movs	r2, #1
 80011d8:	4618      	mov	r0, r3
 80011da:	f002 f99b 	bl	8003514 <HAL_GPIO_WritePin>
    for(int i = 4; i != 0; i--)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	3b01      	subs	r3, #1
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f47f aeb5 	bne.w	8000f56 <aroundEdgeDown+0x16>
  for(int x = 200; x != 0; x -=50)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3b32      	subs	r3, #50	@ 0x32
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f47f aea9 	bne.w	8000f4c <aroundEdgeDown+0xc>
    }
  }
}
 80011fa:	bf00      	nop
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200000c0 	.word	0x200000c0
 8001208:	20000000 	.word	0x20000000

0800120c <diagonalRectangle>:

//diagonal rectangle
void diagonalRectangle()
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08c      	sub	sp, #48	@ 0x30
 8001210:	af00      	add	r7, sp, #0
  int x = 350;
 8001212:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8001216:	607b      	str	r3, [r7, #4]
  disableAllPins();
 8001218:	f7ff f984 	bl	8000524 <disableAllPins>
  for(int count = 0; count<5; count++)
 800121c:	2300      	movs	r3, #0
 800121e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001220:	e1ae      	b.n	8001580 <diagonalRectangle+0x374>
  {
    //top left
    for(int i = 0; i<8; i++)
 8001222:	2300      	movs	r3, #0
 8001224:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001226:	e018      	b.n	800125a <diagonalRectangle+0x4e>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 8001228:	499e      	ldr	r1, [pc, #632]	@ (80014a4 <diagonalRectangle+0x298>)
 800122a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800122c:	4613      	mov	r3, r2
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4413      	add	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	440b      	add	r3, r1
 8001236:	3304      	adds	r3, #4
 8001238:	6818      	ldr	r0, [r3, #0]
 800123a:	499a      	ldr	r1, [pc, #616]	@ (80014a4 <diagonalRectangle+0x298>)
 800123c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	3308      	adds	r3, #8
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	2200      	movs	r2, #0
 800124e:	4619      	mov	r1, r3
 8001250:	f002 f960 	bl	8003514 <HAL_GPIO_WritePin>
    for(int i = 0; i<8; i++)
 8001254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001256:	3301      	adds	r3, #1
 8001258:	62bb      	str	r3, [r7, #40]	@ 0x28
 800125a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800125c:	2b07      	cmp	r3, #7
 800125e:	dde3      	ble.n	8001228 <diagonalRectangle+0x1c>

    }
    HAL_GPIO_WritePin(layers[3].port, layers[3].pin, GPIO_PIN_SET);
 8001260:	4b91      	ldr	r3, [pc, #580]	@ (80014a8 <diagonalRectangle+0x29c>)
 8001262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001264:	4a90      	ldr	r2, [pc, #576]	@ (80014a8 <diagonalRectangle+0x29c>)
 8001266:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 8001268:	2201      	movs	r2, #1
 800126a:	4618      	mov	r0, r3
 800126c:	f002 f952 	bl	8003514 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(layers[2].port, layers[2].pin, GPIO_PIN_SET);
 8001270:	4b8d      	ldr	r3, [pc, #564]	@ (80014a8 <diagonalRectangle+0x29c>)
 8001272:	69db      	ldr	r3, [r3, #28]
 8001274:	4a8c      	ldr	r2, [pc, #560]	@ (80014a8 <diagonalRectangle+0x29c>)
 8001276:	8c11      	ldrh	r1, [r2, #32]
 8001278:	2201      	movs	r2, #1
 800127a:	4618      	mov	r0, r3
 800127c:	f002 f94a 	bl	8003514 <HAL_GPIO_WritePin>
    HAL_Delay(x);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4618      	mov	r0, r3
 8001284:	f001 fdfa 	bl	8002e7c <HAL_Delay>

    disableAllPins();
 8001288:	f7ff f94c 	bl	8000524 <disableAllPins>
    //middle middle
    for(int i = 4; i<12; i++)
 800128c:	2304      	movs	r3, #4
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001290:	e018      	b.n	80012c4 <diagonalRectangle+0xb8>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 8001292:	4984      	ldr	r1, [pc, #528]	@ (80014a4 <diagonalRectangle+0x298>)
 8001294:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001296:	4613      	mov	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4413      	add	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	440b      	add	r3, r1
 80012a0:	3304      	adds	r3, #4
 80012a2:	6818      	ldr	r0, [r3, #0]
 80012a4:	497f      	ldr	r1, [pc, #508]	@ (80014a4 <diagonalRectangle+0x298>)
 80012a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012a8:	4613      	mov	r3, r2
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	4413      	add	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	440b      	add	r3, r1
 80012b2:	3308      	adds	r3, #8
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	2200      	movs	r2, #0
 80012b8:	4619      	mov	r1, r3
 80012ba:	f002 f92b 	bl	8003514 <HAL_GPIO_WritePin>
    for(int i = 4; i<12; i++)
 80012be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c0:	3301      	adds	r3, #1
 80012c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80012c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c6:	2b0b      	cmp	r3, #11
 80012c8:	dde3      	ble.n	8001292 <diagonalRectangle+0x86>
    }
    HAL_GPIO_WritePin(layers[1].port, layers[1].pin, GPIO_PIN_SET);
 80012ca:	4b77      	ldr	r3, [pc, #476]	@ (80014a8 <diagonalRectangle+0x29c>)
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	4a76      	ldr	r2, [pc, #472]	@ (80014a8 <diagonalRectangle+0x29c>)
 80012d0:	8a91      	ldrh	r1, [r2, #20]
 80012d2:	2201      	movs	r2, #1
 80012d4:	4618      	mov	r0, r3
 80012d6:	f002 f91d 	bl	8003514 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(layers[2].port, layers[2].pin, GPIO_PIN_SET);
 80012da:	4b73      	ldr	r3, [pc, #460]	@ (80014a8 <diagonalRectangle+0x29c>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	4a72      	ldr	r2, [pc, #456]	@ (80014a8 <diagonalRectangle+0x29c>)
 80012e0:	8c11      	ldrh	r1, [r2, #32]
 80012e2:	2201      	movs	r2, #1
 80012e4:	4618      	mov	r0, r3
 80012e6:	f002 f915 	bl	8003514 <HAL_GPIO_WritePin>

    HAL_Delay(x);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f001 fdc5 	bl	8002e7c <HAL_Delay>

    disableAllPins();
 80012f2:	f7ff f917 	bl	8000524 <disableAllPins>
    //bottom right
    for(int i = 8; i<16; i++)
 80012f6:	2308      	movs	r3, #8
 80012f8:	623b      	str	r3, [r7, #32]
 80012fa:	e018      	b.n	800132e <diagonalRectangle+0x122>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 80012fc:	4969      	ldr	r1, [pc, #420]	@ (80014a4 <diagonalRectangle+0x298>)
 80012fe:	6a3a      	ldr	r2, [r7, #32]
 8001300:	4613      	mov	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4413      	add	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	440b      	add	r3, r1
 800130a:	3304      	adds	r3, #4
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	4965      	ldr	r1, [pc, #404]	@ (80014a4 <diagonalRectangle+0x298>)
 8001310:	6a3a      	ldr	r2, [r7, #32]
 8001312:	4613      	mov	r3, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4413      	add	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	440b      	add	r3, r1
 800131c:	3308      	adds	r3, #8
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	2200      	movs	r2, #0
 8001322:	4619      	mov	r1, r3
 8001324:	f002 f8f6 	bl	8003514 <HAL_GPIO_WritePin>
    for(int i = 8; i<16; i++)
 8001328:	6a3b      	ldr	r3, [r7, #32]
 800132a:	3301      	adds	r3, #1
 800132c:	623b      	str	r3, [r7, #32]
 800132e:	6a3b      	ldr	r3, [r7, #32]
 8001330:	2b0f      	cmp	r3, #15
 8001332:	dde3      	ble.n	80012fc <diagonalRectangle+0xf0>
    }
    HAL_GPIO_WritePin(layers[0].port, layers[0].pin, GPIO_PIN_SET);
 8001334:	4b5c      	ldr	r3, [pc, #368]	@ (80014a8 <diagonalRectangle+0x29c>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4a5b      	ldr	r2, [pc, #364]	@ (80014a8 <diagonalRectangle+0x29c>)
 800133a:	8911      	ldrh	r1, [r2, #8]
 800133c:	2201      	movs	r2, #1
 800133e:	4618      	mov	r0, r3
 8001340:	f002 f8e8 	bl	8003514 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(layers[1].port, layers[1].pin, GPIO_PIN_SET);
 8001344:	4b58      	ldr	r3, [pc, #352]	@ (80014a8 <diagonalRectangle+0x29c>)
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	4a57      	ldr	r2, [pc, #348]	@ (80014a8 <diagonalRectangle+0x29c>)
 800134a:	8a91      	ldrh	r1, [r2, #20]
 800134c:	2201      	movs	r2, #1
 800134e:	4618      	mov	r0, r3
 8001350:	f002 f8e0 	bl	8003514 <HAL_GPIO_WritePin>
    HAL_Delay(x);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4618      	mov	r0, r3
 8001358:	f001 fd90 	bl	8002e7c <HAL_Delay>

    disableAllPins();
 800135c:	f7ff f8e2 	bl	8000524 <disableAllPins>
    //bottom middle
    for(int i = 4; i<12; i++)
 8001360:	2304      	movs	r3, #4
 8001362:	61fb      	str	r3, [r7, #28]
 8001364:	e018      	b.n	8001398 <diagonalRectangle+0x18c>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 8001366:	494f      	ldr	r1, [pc, #316]	@ (80014a4 <diagonalRectangle+0x298>)
 8001368:	69fa      	ldr	r2, [r7, #28]
 800136a:	4613      	mov	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	440b      	add	r3, r1
 8001374:	3304      	adds	r3, #4
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	494a      	ldr	r1, [pc, #296]	@ (80014a4 <diagonalRectangle+0x298>)
 800137a:	69fa      	ldr	r2, [r7, #28]
 800137c:	4613      	mov	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	440b      	add	r3, r1
 8001386:	3308      	adds	r3, #8
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	2200      	movs	r2, #0
 800138c:	4619      	mov	r1, r3
 800138e:	f002 f8c1 	bl	8003514 <HAL_GPIO_WritePin>
    for(int i = 4; i<12; i++)
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3301      	adds	r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	2b0b      	cmp	r3, #11
 800139c:	dde3      	ble.n	8001366 <diagonalRectangle+0x15a>
    }
    HAL_GPIO_WritePin(layers[0].port, layers[0].pin, GPIO_PIN_SET);
 800139e:	4b42      	ldr	r3, [pc, #264]	@ (80014a8 <diagonalRectangle+0x29c>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	4a41      	ldr	r2, [pc, #260]	@ (80014a8 <diagonalRectangle+0x29c>)
 80013a4:	8911      	ldrh	r1, [r2, #8]
 80013a6:	2201      	movs	r2, #1
 80013a8:	4618      	mov	r0, r3
 80013aa:	f002 f8b3 	bl	8003514 <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(layers[1].port, layers[1].pin, GPIO_PIN_SET);
 80013ae:	4b3e      	ldr	r3, [pc, #248]	@ (80014a8 <diagonalRectangle+0x29c>)
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	4a3d      	ldr	r2, [pc, #244]	@ (80014a8 <diagonalRectangle+0x29c>)
 80013b4:	8a91      	ldrh	r1, [r2, #20]
 80013b6:	2201      	movs	r2, #1
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 f8ab 	bl	8003514 <HAL_GPIO_WritePin>
       HAL_Delay(x);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f001 fd5b 	bl	8002e7c <HAL_Delay>
       disableAllPins();
 80013c6:	f7ff f8ad 	bl	8000524 <disableAllPins>
    //bottom left
    for(int i = 0; i<8; i++)
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
 80013ce:	e018      	b.n	8001402 <diagonalRectangle+0x1f6>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 80013d0:	4934      	ldr	r1, [pc, #208]	@ (80014a4 <diagonalRectangle+0x298>)
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4613      	mov	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4413      	add	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	440b      	add	r3, r1
 80013de:	3304      	adds	r3, #4
 80013e0:	6818      	ldr	r0, [r3, #0]
 80013e2:	4930      	ldr	r1, [pc, #192]	@ (80014a4 <diagonalRectangle+0x298>)
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4613      	mov	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4413      	add	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	440b      	add	r3, r1
 80013f0:	3308      	adds	r3, #8
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	2200      	movs	r2, #0
 80013f6:	4619      	mov	r1, r3
 80013f8:	f002 f88c 	bl	8003514 <HAL_GPIO_WritePin>
    for(int i = 0; i<8; i++)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	3301      	adds	r3, #1
 8001400:	61bb      	str	r3, [r7, #24]
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	2b07      	cmp	r3, #7
 8001406:	dde3      	ble.n	80013d0 <diagonalRectangle+0x1c4>
    }
    HAL_GPIO_WritePin(layers[0].port, layers[0].pin, GPIO_PIN_SET);
 8001408:	4b27      	ldr	r3, [pc, #156]	@ (80014a8 <diagonalRectangle+0x29c>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	4a26      	ldr	r2, [pc, #152]	@ (80014a8 <diagonalRectangle+0x29c>)
 800140e:	8911      	ldrh	r1, [r2, #8]
 8001410:	2201      	movs	r2, #1
 8001412:	4618      	mov	r0, r3
 8001414:	f002 f87e 	bl	8003514 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(layers[1].port, layers[1].pin, GPIO_PIN_SET);
 8001418:	4b23      	ldr	r3, [pc, #140]	@ (80014a8 <diagonalRectangle+0x29c>)
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	4a22      	ldr	r2, [pc, #136]	@ (80014a8 <diagonalRectangle+0x29c>)
 800141e:	8a91      	ldrh	r1, [r2, #20]
 8001420:	2201      	movs	r2, #1
 8001422:	4618      	mov	r0, r3
 8001424:	f002 f876 	bl	8003514 <HAL_GPIO_WritePin>
    HAL_Delay(x);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4618      	mov	r0, r3
 800142c:	f001 fd26 	bl	8002e7c <HAL_Delay>
    disableAllPins();
 8001430:	f7ff f878 	bl	8000524 <disableAllPins>
    //middle middle
    for(int i = 4; i<12; i++)
 8001434:	2304      	movs	r3, #4
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	e018      	b.n	800146c <diagonalRectangle+0x260>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 800143a:	491a      	ldr	r1, [pc, #104]	@ (80014a4 <diagonalRectangle+0x298>)
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	440b      	add	r3, r1
 8001448:	3304      	adds	r3, #4
 800144a:	6818      	ldr	r0, [r3, #0]
 800144c:	4915      	ldr	r1, [pc, #84]	@ (80014a4 <diagonalRectangle+0x298>)
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	4613      	mov	r3, r2
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4413      	add	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	440b      	add	r3, r1
 800145a:	3308      	adds	r3, #8
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	2200      	movs	r2, #0
 8001460:	4619      	mov	r1, r3
 8001462:	f002 f857 	bl	8003514 <HAL_GPIO_WritePin>
    for(int i = 4; i<12; i++)
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	3301      	adds	r3, #1
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	2b0b      	cmp	r3, #11
 8001470:	dde3      	ble.n	800143a <diagonalRectangle+0x22e>
    }
    HAL_GPIO_WritePin(layers[1].port, layers[1].pin, GPIO_PIN_SET);
 8001472:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <diagonalRectangle+0x29c>)
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	4a0c      	ldr	r2, [pc, #48]	@ (80014a8 <diagonalRectangle+0x29c>)
 8001478:	8a91      	ldrh	r1, [r2, #20]
 800147a:	2201      	movs	r2, #1
 800147c:	4618      	mov	r0, r3
 800147e:	f002 f849 	bl	8003514 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(layers[2].port, layers[2].pin, GPIO_PIN_SET);
 8001482:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <diagonalRectangle+0x29c>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	4a08      	ldr	r2, [pc, #32]	@ (80014a8 <diagonalRectangle+0x29c>)
 8001488:	8c11      	ldrh	r1, [r2, #32]
 800148a:	2201      	movs	r2, #1
 800148c:	4618      	mov	r0, r3
 800148e:	f002 f841 	bl	8003514 <HAL_GPIO_WritePin>
    HAL_Delay(x);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4618      	mov	r0, r3
 8001496:	f001 fcf1 	bl	8002e7c <HAL_Delay>
    disableAllPins();
 800149a:	f7ff f843 	bl	8000524 <disableAllPins>
    //top right
    for(int i = 8; i<16; i++)
 800149e:	2308      	movs	r3, #8
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	e01c      	b.n	80014de <diagonalRectangle+0x2d2>
 80014a4:	20000000 	.word	0x20000000
 80014a8:	200000c0 	.word	0x200000c0
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 80014ac:	4953      	ldr	r1, [pc, #332]	@ (80015fc <diagonalRectangle+0x3f0>)
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	3304      	adds	r3, #4
 80014bc:	6818      	ldr	r0, [r3, #0]
 80014be:	494f      	ldr	r1, [pc, #316]	@ (80015fc <diagonalRectangle+0x3f0>)
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4613      	mov	r3, r2
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	4413      	add	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	440b      	add	r3, r1
 80014cc:	3308      	adds	r3, #8
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	2200      	movs	r2, #0
 80014d2:	4619      	mov	r1, r3
 80014d4:	f002 f81e 	bl	8003514 <HAL_GPIO_WritePin>
    for(int i = 8; i<16; i++)
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	3301      	adds	r3, #1
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	2b0f      	cmp	r3, #15
 80014e2:	dde3      	ble.n	80014ac <diagonalRectangle+0x2a0>
    }
    HAL_GPIO_WritePin(layers[2].port, layers[2].pin, GPIO_PIN_SET);
 80014e4:	4b46      	ldr	r3, [pc, #280]	@ (8001600 <diagonalRectangle+0x3f4>)
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	4a45      	ldr	r2, [pc, #276]	@ (8001600 <diagonalRectangle+0x3f4>)
 80014ea:	8c11      	ldrh	r1, [r2, #32]
 80014ec:	2201      	movs	r2, #1
 80014ee:	4618      	mov	r0, r3
 80014f0:	f002 f810 	bl	8003514 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(layers[3].port, layers[3].pin, GPIO_PIN_SET);
 80014f4:	4b42      	ldr	r3, [pc, #264]	@ (8001600 <diagonalRectangle+0x3f4>)
 80014f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f8:	4a41      	ldr	r2, [pc, #260]	@ (8001600 <diagonalRectangle+0x3f4>)
 80014fa:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 80014fc:	2201      	movs	r2, #1
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 f808 	bl	8003514 <HAL_GPIO_WritePin>
        HAL_Delay(x);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4618      	mov	r0, r3
 8001508:	f001 fcb8 	bl	8002e7c <HAL_Delay>
        disableAllPins();
 800150c:	f7ff f80a 	bl	8000524 <disableAllPins>
    //top middle
    for(int i = 4; i<12; i++)
 8001510:	2304      	movs	r3, #4
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	e018      	b.n	8001548 <diagonalRectangle+0x33c>
    {
    	HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 8001516:	4939      	ldr	r1, [pc, #228]	@ (80015fc <diagonalRectangle+0x3f0>)
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	4613      	mov	r3, r2
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	4413      	add	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	440b      	add	r3, r1
 8001524:	3304      	adds	r3, #4
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	4934      	ldr	r1, [pc, #208]	@ (80015fc <diagonalRectangle+0x3f0>)
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	4613      	mov	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	3308      	adds	r3, #8
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	2200      	movs	r2, #0
 800153c:	4619      	mov	r1, r3
 800153e:	f001 ffe9 	bl	8003514 <HAL_GPIO_WritePin>
    for(int i = 4; i<12; i++)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	3301      	adds	r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2b0b      	cmp	r3, #11
 800154c:	dde3      	ble.n	8001516 <diagonalRectangle+0x30a>
    }
    HAL_GPIO_WritePin(layers[2].port, layers[2].pin, GPIO_PIN_SET);
 800154e:	4b2c      	ldr	r3, [pc, #176]	@ (8001600 <diagonalRectangle+0x3f4>)
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	4a2b      	ldr	r2, [pc, #172]	@ (8001600 <diagonalRectangle+0x3f4>)
 8001554:	8c11      	ldrh	r1, [r2, #32]
 8001556:	2201      	movs	r2, #1
 8001558:	4618      	mov	r0, r3
 800155a:	f001 ffdb 	bl	8003514 <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(layers[3].port, layers[3].pin, GPIO_PIN_SET);
 800155e:	4b28      	ldr	r3, [pc, #160]	@ (8001600 <diagonalRectangle+0x3f4>)
 8001560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001562:	4a27      	ldr	r2, [pc, #156]	@ (8001600 <diagonalRectangle+0x3f4>)
 8001564:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 8001566:	2201      	movs	r2, #1
 8001568:	4618      	mov	r0, r3
 800156a:	f001 ffd3 	bl	8003514 <HAL_GPIO_WritePin>
           HAL_Delay(x);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4618      	mov	r0, r3
 8001572:	f001 fc83 	bl	8002e7c <HAL_Delay>
           disableAllPins();
 8001576:	f7fe ffd5 	bl	8000524 <disableAllPins>
  for(int count = 0; count<5; count++)
 800157a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800157c:	3301      	adds	r3, #1
 800157e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001582:	2b04      	cmp	r3, #4
 8001584:	f77f ae4d 	ble.w	8001222 <diagonalRectangle+0x16>
  }
  //top left
  for(int i = 0; i<8; i++)
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	e018      	b.n	80015c0 <diagonalRectangle+0x3b4>
  {
	  HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 800158e:	491b      	ldr	r1, [pc, #108]	@ (80015fc <diagonalRectangle+0x3f0>)
 8001590:	68ba      	ldr	r2, [r7, #8]
 8001592:	4613      	mov	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	440b      	add	r3, r1
 800159c:	3304      	adds	r3, #4
 800159e:	6818      	ldr	r0, [r3, #0]
 80015a0:	4916      	ldr	r1, [pc, #88]	@ (80015fc <diagonalRectangle+0x3f0>)
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	4613      	mov	r3, r2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4413      	add	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	3308      	adds	r3, #8
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	2200      	movs	r2, #0
 80015b4:	4619      	mov	r1, r3
 80015b6:	f001 ffad 	bl	8003514 <HAL_GPIO_WritePin>
  for(int i = 0; i<8; i++)
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	3301      	adds	r3, #1
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	2b07      	cmp	r3, #7
 80015c4:	dde3      	ble.n	800158e <diagonalRectangle+0x382>
  }
  HAL_GPIO_WritePin(layers[3].port, layers[3].pin, GPIO_PIN_SET);
 80015c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001600 <diagonalRectangle+0x3f4>)
 80015c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001600 <diagonalRectangle+0x3f4>)
 80015cc:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 80015ce:	2201      	movs	r2, #1
 80015d0:	4618      	mov	r0, r3
 80015d2:	f001 ff9f 	bl	8003514 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(layers[2].port, layers[2].pin, GPIO_PIN_SET);
 80015d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001600 <diagonalRectangle+0x3f4>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	4a09      	ldr	r2, [pc, #36]	@ (8001600 <diagonalRectangle+0x3f4>)
 80015dc:	8c11      	ldrh	r1, [r2, #32]
 80015de:	2201      	movs	r2, #1
 80015e0:	4618      	mov	r0, r3
 80015e2:	f001 ff97 	bl	8003514 <HAL_GPIO_WritePin>
  HAL_Delay(x);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f001 fc47 	bl	8002e7c <HAL_Delay>
  disableAllPins();
 80015ee:	f7fe ff99 	bl	8000524 <disableAllPins>
}
 80015f2:	bf00      	nop
 80015f4:	3730      	adds	r7, #48	@ 0x30
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000000 	.word	0x20000000
 8001600:	200000c0 	.word	0x200000c0

08001604 <propeller>:

//propeller
void propeller()
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
  disableAllPins();
 800160a:	f7fe ff8b 	bl	8000524 <disableAllPins>
  int x = 90;
 800160e:	235a      	movs	r3, #90	@ 0x5a
 8001610:	607b      	str	r3, [r7, #4]
  for(int y = 4; y>0; y--)
 8001612:	2304      	movs	r3, #4
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	e120      	b.n	800185a <propeller+0x256>
  {
    for(int i = 0; i<6; i++)
 8001618:	2300      	movs	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	e116      	b.n	800184c <propeller+0x248>
    {
      //turn on layer
    	HAL_GPIO_WritePin(layers[y-1].port, layers[y-1].pin, GPIO_PIN_SET);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	1e5a      	subs	r2, r3, #1
 8001622:	49a7      	ldr	r1, [pc, #668]	@ (80018c0 <propeller+0x2bc>)
 8001624:	4613      	mov	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	3304      	adds	r3, #4
 8001630:	6818      	ldr	r0, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	1e5a      	subs	r2, r3, #1
 8001636:	49a2      	ldr	r1, [pc, #648]	@ (80018c0 <propeller+0x2bc>)
 8001638:	4613      	mov	r3, r2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	4413      	add	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	3308      	adds	r3, #8
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	2201      	movs	r2, #1
 8001648:	4619      	mov	r1, r3
 800164a:	f001 ff63 	bl	8003514 <HAL_GPIO_WritePin>
      //a1
      turnColumnsOff();
 800164e:	f7ff f80d 	bl	800066c <turnColumnsOff>
      HAL_GPIO_WritePin(pinMap[0].port, pinMap[0].pin, GPIO_PIN_RESET);
 8001652:	4b9c      	ldr	r3, [pc, #624]	@ (80018c4 <propeller+0x2c0>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	4a9b      	ldr	r2, [pc, #620]	@ (80018c4 <propeller+0x2c0>)
 8001658:	8911      	ldrh	r1, [r2, #8]
 800165a:	2200      	movs	r2, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f001 ff59 	bl	8003514 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[5].port, pinMap[5].pin, GPIO_PIN_RESET);
 8001662:	4b98      	ldr	r3, [pc, #608]	@ (80018c4 <propeller+0x2c0>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	4a97      	ldr	r2, [pc, #604]	@ (80018c4 <propeller+0x2c0>)
 8001668:	f8b2 1044 	ldrh.w	r1, [r2, #68]	@ 0x44
 800166c:	2200      	movs	r2, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f001 ff50 	bl	8003514 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[10].port, pinMap[10].pin, GPIO_PIN_RESET);
 8001674:	4b93      	ldr	r3, [pc, #588]	@ (80018c4 <propeller+0x2c0>)
 8001676:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001678:	4a92      	ldr	r2, [pc, #584]	@ (80018c4 <propeller+0x2c0>)
 800167a:	f8b2 1080 	ldrh.w	r1, [r2, #128]	@ 0x80
 800167e:	2200      	movs	r2, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f001 ff47 	bl	8003514 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[15].port, pinMap[15].pin, GPIO_PIN_RESET);
 8001686:	4b8f      	ldr	r3, [pc, #572]	@ (80018c4 <propeller+0x2c0>)
 8001688:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800168c:	4a8d      	ldr	r2, [pc, #564]	@ (80018c4 <propeller+0x2c0>)
 800168e:	f8b2 10bc 	ldrh.w	r1, [r2, #188]	@ 0xbc
 8001692:	2200      	movs	r2, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f001 ff3d 	bl	8003514 <HAL_GPIO_WritePin>
      HAL_Delay(x);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4618      	mov	r0, r3
 800169e:	f001 fbed 	bl	8002e7c <HAL_Delay>
      //b1
      turnColumnsOff();
 80016a2:	f7fe ffe3 	bl	800066c <turnColumnsOff>
      HAL_GPIO_WritePin(pinMap[4].port, pinMap[4].pin, GPIO_PIN_RESET);
 80016a6:	4b87      	ldr	r3, [pc, #540]	@ (80018c4 <propeller+0x2c0>)
 80016a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016aa:	4a86      	ldr	r2, [pc, #536]	@ (80018c4 <propeller+0x2c0>)
 80016ac:	8f11      	ldrh	r1, [r2, #56]	@ 0x38
 80016ae:	2200      	movs	r2, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f001 ff2f 	bl	8003514 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[5].port, pinMap[5].pin, GPIO_PIN_RESET);
 80016b6:	4b83      	ldr	r3, [pc, #524]	@ (80018c4 <propeller+0x2c0>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ba:	4a82      	ldr	r2, [pc, #520]	@ (80018c4 <propeller+0x2c0>)
 80016bc:	f8b2 1044 	ldrh.w	r1, [r2, #68]	@ 0x44
 80016c0:	2200      	movs	r2, #0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f001 ff26 	bl	8003514 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[10].port, pinMap[10].pin, GPIO_PIN_RESET);
 80016c8:	4b7e      	ldr	r3, [pc, #504]	@ (80018c4 <propeller+0x2c0>)
 80016ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80016cc:	4a7d      	ldr	r2, [pc, #500]	@ (80018c4 <propeller+0x2c0>)
 80016ce:	f8b2 1080 	ldrh.w	r1, [r2, #128]	@ 0x80
 80016d2:	2200      	movs	r2, #0
 80016d4:	4618      	mov	r0, r3
 80016d6:	f001 ff1d 	bl	8003514 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[11].port, pinMap[11].pin, GPIO_PIN_RESET);
 80016da:	4b7a      	ldr	r3, [pc, #488]	@ (80018c4 <propeller+0x2c0>)
 80016dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016e0:	4a78      	ldr	r2, [pc, #480]	@ (80018c4 <propeller+0x2c0>)
 80016e2:	f8b2 108c 	ldrh.w	r1, [r2, #140]	@ 0x8c
 80016e6:	2200      	movs	r2, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f001 ff13 	bl	8003514 <HAL_GPIO_WritePin>
      HAL_Delay(x);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f001 fbc3 	bl	8002e7c <HAL_Delay>
      //c1
      turnColumnsOff();
 80016f6:	f7fe ffb9 	bl	800066c <turnColumnsOff>
      HAL_GPIO_WritePin(pinMap[6].port, pinMap[6].pin, GPIO_PIN_RESET);
 80016fa:	4b72      	ldr	r3, [pc, #456]	@ (80018c4 <propeller+0x2c0>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fe:	4a71      	ldr	r2, [pc, #452]	@ (80018c4 <propeller+0x2c0>)
 8001700:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 8001704:	2200      	movs	r2, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f001 ff04 	bl	8003514 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[7].port, pinMap[7].pin, GPIO_PIN_RESET);
 800170c:	4b6d      	ldr	r3, [pc, #436]	@ (80018c4 <propeller+0x2c0>)
 800170e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001710:	4a6c      	ldr	r2, [pc, #432]	@ (80018c4 <propeller+0x2c0>)
 8001712:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8001716:	2200      	movs	r2, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f001 fefb 	bl	8003514 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[8].port, pinMap[8].pin, GPIO_PIN_RESET);
 800171e:	4b69      	ldr	r3, [pc, #420]	@ (80018c4 <propeller+0x2c0>)
 8001720:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001722:	4a68      	ldr	r2, [pc, #416]	@ (80018c4 <propeller+0x2c0>)
 8001724:	f8b2 1068 	ldrh.w	r1, [r2, #104]	@ 0x68
 8001728:	2200      	movs	r2, #0
 800172a:	4618      	mov	r0, r3
 800172c:	f001 fef2 	bl	8003514 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[9].port, pinMap[9].pin, GPIO_PIN_RESET);
 8001730:	4b64      	ldr	r3, [pc, #400]	@ (80018c4 <propeller+0x2c0>)
 8001732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001734:	4a63      	ldr	r2, [pc, #396]	@ (80018c4 <propeller+0x2c0>)
 8001736:	f8b2 1074 	ldrh.w	r1, [r2, #116]	@ 0x74
 800173a:	2200      	movs	r2, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f001 fee9 	bl	8003514 <HAL_GPIO_WritePin>
      HAL_Delay(x);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4618      	mov	r0, r3
 8001746:	f001 fb99 	bl	8002e7c <HAL_Delay>
      //d1
      turnColumnsOff();
 800174a:	f7fe ff8f 	bl	800066c <turnColumnsOff>
      HAL_GPIO_WritePin(pinMap[3].port, pinMap[3].pin, GPIO_PIN_RESET);
 800174e:	4b5d      	ldr	r3, [pc, #372]	@ (80018c4 <propeller+0x2c0>)
 8001750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001752:	4a5c      	ldr	r2, [pc, #368]	@ (80018c4 <propeller+0x2c0>)
 8001754:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 8001756:	2200      	movs	r2, #0
 8001758:	4618      	mov	r0, r3
 800175a:	f001 fedb 	bl	8003514 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[6].port, pinMap[6].pin, GPIO_PIN_RESET);
 800175e:	4b59      	ldr	r3, [pc, #356]	@ (80018c4 <propeller+0x2c0>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001762:	4a58      	ldr	r2, [pc, #352]	@ (80018c4 <propeller+0x2c0>)
 8001764:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 8001768:	2200      	movs	r2, #0
 800176a:	4618      	mov	r0, r3
 800176c:	f001 fed2 	bl	8003514 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[9].port, pinMap[9].pin, GPIO_PIN_RESET);
 8001770:	4b54      	ldr	r3, [pc, #336]	@ (80018c4 <propeller+0x2c0>)
 8001772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001774:	4a53      	ldr	r2, [pc, #332]	@ (80018c4 <propeller+0x2c0>)
 8001776:	f8b2 1074 	ldrh.w	r1, [r2, #116]	@ 0x74
 800177a:	2200      	movs	r2, #0
 800177c:	4618      	mov	r0, r3
 800177e:	f001 fec9 	bl	8003514 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[12].port, pinMap[12].pin, GPIO_PIN_RESET);
 8001782:	4b50      	ldr	r3, [pc, #320]	@ (80018c4 <propeller+0x2c0>)
 8001784:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001788:	4a4e      	ldr	r2, [pc, #312]	@ (80018c4 <propeller+0x2c0>)
 800178a:	f8b2 1098 	ldrh.w	r1, [r2, #152]	@ 0x98
 800178e:	2200      	movs	r2, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f001 febf 	bl	8003514 <HAL_GPIO_WritePin>
      HAL_Delay(x);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4618      	mov	r0, r3
 800179a:	f001 fb6f 	bl	8002e7c <HAL_Delay>
      //d2
      turnColumnsOff();
 800179e:	f7fe ff65 	bl	800066c <turnColumnsOff>
      HAL_GPIO_WritePin(pinMap[2].port, pinMap[2].pin, GPIO_PIN_RESET);
 80017a2:	4b48      	ldr	r3, [pc, #288]	@ (80018c4 <propeller+0x2c0>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	4a47      	ldr	r2, [pc, #284]	@ (80018c4 <propeller+0x2c0>)
 80017a8:	8c11      	ldrh	r1, [r2, #32]
 80017aa:	2200      	movs	r2, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f001 feb1 	bl	8003514 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[6].port, pinMap[6].pin, GPIO_PIN_RESET);
 80017b2:	4b44      	ldr	r3, [pc, #272]	@ (80018c4 <propeller+0x2c0>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b6:	4a43      	ldr	r2, [pc, #268]	@ (80018c4 <propeller+0x2c0>)
 80017b8:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 80017bc:	2200      	movs	r2, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f001 fea8 	bl	8003514 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[9].port, pinMap[9].pin, GPIO_PIN_RESET);
 80017c4:	4b3f      	ldr	r3, [pc, #252]	@ (80018c4 <propeller+0x2c0>)
 80017c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c8:	4a3e      	ldr	r2, [pc, #248]	@ (80018c4 <propeller+0x2c0>)
 80017ca:	f8b2 1074 	ldrh.w	r1, [r2, #116]	@ 0x74
 80017ce:	2200      	movs	r2, #0
 80017d0:	4618      	mov	r0, r3
 80017d2:	f001 fe9f 	bl	8003514 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[13].port, pinMap[13].pin, GPIO_PIN_RESET);
 80017d6:	4b3b      	ldr	r3, [pc, #236]	@ (80018c4 <propeller+0x2c0>)
 80017d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80017dc:	4a39      	ldr	r2, [pc, #228]	@ (80018c4 <propeller+0x2c0>)
 80017de:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	@ 0xa4
 80017e2:	2200      	movs	r2, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f001 fe95 	bl	8003514 <HAL_GPIO_WritePin>
      HAL_Delay(x);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f001 fb45 	bl	8002e7c <HAL_Delay>
      //d3
      turnColumnsOff();
 80017f2:	f7fe ff3b 	bl	800066c <turnColumnsOff>
      HAL_GPIO_WritePin(pinMap[1].port, pinMap[1].pin, GPIO_PIN_RESET);
 80017f6:	4b33      	ldr	r3, [pc, #204]	@ (80018c4 <propeller+0x2c0>)
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	4a32      	ldr	r2, [pc, #200]	@ (80018c4 <propeller+0x2c0>)
 80017fc:	8a91      	ldrh	r1, [r2, #20]
 80017fe:	2200      	movs	r2, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f001 fe87 	bl	8003514 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[5].port, pinMap[5].pin, GPIO_PIN_RESET);
 8001806:	4b2f      	ldr	r3, [pc, #188]	@ (80018c4 <propeller+0x2c0>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	4a2e      	ldr	r2, [pc, #184]	@ (80018c4 <propeller+0x2c0>)
 800180c:	f8b2 1044 	ldrh.w	r1, [r2, #68]	@ 0x44
 8001810:	2200      	movs	r2, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f001 fe7e 	bl	8003514 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[10].port, pinMap[10].pin, GPIO_PIN_RESET);
 8001818:	4b2a      	ldr	r3, [pc, #168]	@ (80018c4 <propeller+0x2c0>)
 800181a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800181c:	4a29      	ldr	r2, [pc, #164]	@ (80018c4 <propeller+0x2c0>)
 800181e:	f8b2 1080 	ldrh.w	r1, [r2, #128]	@ 0x80
 8001822:	2200      	movs	r2, #0
 8001824:	4618      	mov	r0, r3
 8001826:	f001 fe75 	bl	8003514 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(pinMap[14].port, pinMap[14].pin, GPIO_PIN_RESET);
 800182a:	4b26      	ldr	r3, [pc, #152]	@ (80018c4 <propeller+0x2c0>)
 800182c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8001830:	4a24      	ldr	r2, [pc, #144]	@ (80018c4 <propeller+0x2c0>)
 8001832:	f8b2 10b0 	ldrh.w	r1, [r2, #176]	@ 0xb0
 8001836:	2200      	movs	r2, #0
 8001838:	4618      	mov	r0, r3
 800183a:	f001 fe6b 	bl	8003514 <HAL_GPIO_WritePin>
      HAL_Delay(x);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4618      	mov	r0, r3
 8001842:	f001 fb1b 	bl	8002e7c <HAL_Delay>
    for(int i = 0; i<6; i++)
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	3301      	adds	r3, #1
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	2b05      	cmp	r3, #5
 8001850:	f77f aee5 	ble.w	800161e <propeller+0x1a>
  for(int y = 4; y>0; y--)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	3b01      	subs	r3, #1
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2b00      	cmp	r3, #0
 800185e:	f73f aedb 	bgt.w	8001618 <propeller+0x14>
    }
  }
  //d4
  turnColumnsOff();
 8001862:	f7fe ff03 	bl	800066c <turnColumnsOff>
  HAL_GPIO_WritePin(pinMap[0].port, pinMap[0].pin, GPIO_PIN_RESET);
 8001866:	4b17      	ldr	r3, [pc, #92]	@ (80018c4 <propeller+0x2c0>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4a16      	ldr	r2, [pc, #88]	@ (80018c4 <propeller+0x2c0>)
 800186c:	8911      	ldrh	r1, [r2, #8]
 800186e:	2200      	movs	r2, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f001 fe4f 	bl	8003514 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(pinMap[5].port, pinMap[5].pin, GPIO_PIN_RESET);
 8001876:	4b13      	ldr	r3, [pc, #76]	@ (80018c4 <propeller+0x2c0>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187a:	4a12      	ldr	r2, [pc, #72]	@ (80018c4 <propeller+0x2c0>)
 800187c:	f8b2 1044 	ldrh.w	r1, [r2, #68]	@ 0x44
 8001880:	2200      	movs	r2, #0
 8001882:	4618      	mov	r0, r3
 8001884:	f001 fe46 	bl	8003514 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(pinMap[10].port, pinMap[10].pin, GPIO_PIN_RESET);
 8001888:	4b0e      	ldr	r3, [pc, #56]	@ (80018c4 <propeller+0x2c0>)
 800188a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800188c:	4a0d      	ldr	r2, [pc, #52]	@ (80018c4 <propeller+0x2c0>)
 800188e:	f8b2 1080 	ldrh.w	r1, [r2, #128]	@ 0x80
 8001892:	2200      	movs	r2, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f001 fe3d 	bl	8003514 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(pinMap[15].port, pinMap[15].pin, GPIO_PIN_RESET);
 800189a:	4b0a      	ldr	r3, [pc, #40]	@ (80018c4 <propeller+0x2c0>)
 800189c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80018a0:	4a08      	ldr	r2, [pc, #32]	@ (80018c4 <propeller+0x2c0>)
 80018a2:	f8b2 10bc 	ldrh.w	r1, [r2, #188]	@ 0xbc
 80018a6:	2200      	movs	r2, #0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f001 fe33 	bl	8003514 <HAL_GPIO_WritePin>
  HAL_Delay(x);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f001 fae3 	bl	8002e7c <HAL_Delay>
}
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200000c0 	.word	0x200000c0
 80018c4:	20000000 	.word	0x20000000

080018c8 <spiralInAndOut>:

//spiral in and out
void spiralInAndOut()
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
  enableAllPins();
 80018ce:	f7fe fe7b 	bl	80005c8 <enableAllPins>
  int x = 60;
 80018d2:	233c      	movs	r3, #60	@ 0x3c
 80018d4:	603b      	str	r3, [r7, #0]
  for(int i = 0; i<6; i++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	e349      	b.n	8001f70 <spiralInAndOut+0x6a8>
  {
    //spiral in clockwise
	  HAL_GPIO_WritePin(pinMap[0].port, pinMap[0].pin, GPIO_PIN_SET);
 80018dc:	4bc3      	ldr	r3, [pc, #780]	@ (8001bec <spiralInAndOut+0x324>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	4ac2      	ldr	r2, [pc, #776]	@ (8001bec <spiralInAndOut+0x324>)
 80018e2:	8911      	ldrh	r1, [r2, #8]
 80018e4:	2201      	movs	r2, #1
 80018e6:	4618      	mov	r0, r3
 80018e8:	f001 fe14 	bl	8003514 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f001 fac4 	bl	8002e7c <HAL_Delay>
	  HAL_GPIO_WritePin(pinMap[1].port, pinMap[1].pin, GPIO_PIN_SET);
 80018f4:	4bbd      	ldr	r3, [pc, #756]	@ (8001bec <spiralInAndOut+0x324>)
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	4abc      	ldr	r2, [pc, #752]	@ (8001bec <spiralInAndOut+0x324>)
 80018fa:	8a91      	ldrh	r1, [r2, #20]
 80018fc:	2201      	movs	r2, #1
 80018fe:	4618      	mov	r0, r3
 8001900:	f001 fe08 	bl	8003514 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f001 fab8 	bl	8002e7c <HAL_Delay>
	  HAL_GPIO_WritePin(pinMap[2].port, pinMap[2].pin, GPIO_PIN_SET);
 800190c:	4bb7      	ldr	r3, [pc, #732]	@ (8001bec <spiralInAndOut+0x324>)
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	4ab6      	ldr	r2, [pc, #728]	@ (8001bec <spiralInAndOut+0x324>)
 8001912:	8c11      	ldrh	r1, [r2, #32]
 8001914:	2201      	movs	r2, #1
 8001916:	4618      	mov	r0, r3
 8001918:	f001 fdfc 	bl	8003514 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f001 faac 	bl	8002e7c <HAL_Delay>
	  HAL_GPIO_WritePin(pinMap[3].port, pinMap[3].pin, GPIO_PIN_SET);
 8001924:	4bb1      	ldr	r3, [pc, #708]	@ (8001bec <spiralInAndOut+0x324>)
 8001926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001928:	4ab0      	ldr	r2, [pc, #704]	@ (8001bec <spiralInAndOut+0x324>)
 800192a:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 800192c:	2201      	movs	r2, #1
 800192e:	4618      	mov	r0, r3
 8001930:	f001 fdf0 	bl	8003514 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f001 faa0 	bl	8002e7c <HAL_Delay>
	  HAL_GPIO_WritePin(pinMap[7].port, pinMap[7].pin, GPIO_PIN_SET);
 800193c:	4bab      	ldr	r3, [pc, #684]	@ (8001bec <spiralInAndOut+0x324>)
 800193e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001940:	4aaa      	ldr	r2, [pc, #680]	@ (8001bec <spiralInAndOut+0x324>)
 8001942:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8001946:	2201      	movs	r2, #1
 8001948:	4618      	mov	r0, r3
 800194a:	f001 fde3 	bl	8003514 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f001 fa93 	bl	8002e7c <HAL_Delay>
	  HAL_GPIO_WritePin(pinMap[11].port, pinMap[11].pin, GPIO_PIN_SET);
 8001956:	4ba5      	ldr	r3, [pc, #660]	@ (8001bec <spiralInAndOut+0x324>)
 8001958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800195c:	4aa3      	ldr	r2, [pc, #652]	@ (8001bec <spiralInAndOut+0x324>)
 800195e:	f8b2 108c 	ldrh.w	r1, [r2, #140]	@ 0x8c
 8001962:	2201      	movs	r2, #1
 8001964:	4618      	mov	r0, r3
 8001966:	f001 fdd5 	bl	8003514 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f001 fa85 	bl	8002e7c <HAL_Delay>
	  HAL_GPIO_WritePin(pinMap[15].port, pinMap[15].pin, GPIO_PIN_SET);
 8001972:	4b9e      	ldr	r3, [pc, #632]	@ (8001bec <spiralInAndOut+0x324>)
 8001974:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8001978:	4a9c      	ldr	r2, [pc, #624]	@ (8001bec <spiralInAndOut+0x324>)
 800197a:	f8b2 10bc 	ldrh.w	r1, [r2, #188]	@ 0xbc
 800197e:	2201      	movs	r2, #1
 8001980:	4618      	mov	r0, r3
 8001982:	f001 fdc7 	bl	8003514 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f001 fa77 	bl	8002e7c <HAL_Delay>
	  HAL_GPIO_WritePin(pinMap[14].port, pinMap[14].pin, GPIO_PIN_SET);
 800198e:	4b97      	ldr	r3, [pc, #604]	@ (8001bec <spiralInAndOut+0x324>)
 8001990:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8001994:	4a95      	ldr	r2, [pc, #596]	@ (8001bec <spiralInAndOut+0x324>)
 8001996:	f8b2 10b0 	ldrh.w	r1, [r2, #176]	@ 0xb0
 800199a:	2201      	movs	r2, #1
 800199c:	4618      	mov	r0, r3
 800199e:	f001 fdb9 	bl	8003514 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f001 fa69 	bl	8002e7c <HAL_Delay>
	  HAL_GPIO_WritePin(pinMap[13].port, pinMap[13].pin, GPIO_PIN_SET);
 80019aa:	4b90      	ldr	r3, [pc, #576]	@ (8001bec <spiralInAndOut+0x324>)
 80019ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80019b0:	4a8e      	ldr	r2, [pc, #568]	@ (8001bec <spiralInAndOut+0x324>)
 80019b2:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	@ 0xa4
 80019b6:	2201      	movs	r2, #1
 80019b8:	4618      	mov	r0, r3
 80019ba:	f001 fdab 	bl	8003514 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f001 fa5b 	bl	8002e7c <HAL_Delay>
	  HAL_GPIO_WritePin(pinMap[12].port, pinMap[12].pin, GPIO_PIN_SET);
 80019c6:	4b89      	ldr	r3, [pc, #548]	@ (8001bec <spiralInAndOut+0x324>)
 80019c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019cc:	4a87      	ldr	r2, [pc, #540]	@ (8001bec <spiralInAndOut+0x324>)
 80019ce:	f8b2 1098 	ldrh.w	r1, [r2, #152]	@ 0x98
 80019d2:	2201      	movs	r2, #1
 80019d4:	4618      	mov	r0, r3
 80019d6:	f001 fd9d 	bl	8003514 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f001 fa4d 	bl	8002e7c <HAL_Delay>
	  HAL_GPIO_WritePin(pinMap[8].port, pinMap[8].pin, GPIO_PIN_SET);
 80019e2:	4b82      	ldr	r3, [pc, #520]	@ (8001bec <spiralInAndOut+0x324>)
 80019e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80019e6:	4a81      	ldr	r2, [pc, #516]	@ (8001bec <spiralInAndOut+0x324>)
 80019e8:	f8b2 1068 	ldrh.w	r1, [r2, #104]	@ 0x68
 80019ec:	2201      	movs	r2, #1
 80019ee:	4618      	mov	r0, r3
 80019f0:	f001 fd90 	bl	8003514 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f001 fa40 	bl	8002e7c <HAL_Delay>
	  HAL_GPIO_WritePin(pinMap[4].port, pinMap[4].pin, GPIO_PIN_SET);
 80019fc:	4b7b      	ldr	r3, [pc, #492]	@ (8001bec <spiralInAndOut+0x324>)
 80019fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a00:	4a7a      	ldr	r2, [pc, #488]	@ (8001bec <spiralInAndOut+0x324>)
 8001a02:	8f11      	ldrh	r1, [r2, #56]	@ 0x38
 8001a04:	2201      	movs	r2, #1
 8001a06:	4618      	mov	r0, r3
 8001a08:	f001 fd84 	bl	8003514 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f001 fa34 	bl	8002e7c <HAL_Delay>
	  HAL_GPIO_WritePin(pinMap[5].port, pinMap[5].pin, GPIO_PIN_SET);
 8001a14:	4b75      	ldr	r3, [pc, #468]	@ (8001bec <spiralInAndOut+0x324>)
 8001a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a18:	4a74      	ldr	r2, [pc, #464]	@ (8001bec <spiralInAndOut+0x324>)
 8001a1a:	f8b2 1044 	ldrh.w	r1, [r2, #68]	@ 0x44
 8001a1e:	2201      	movs	r2, #1
 8001a20:	4618      	mov	r0, r3
 8001a22:	f001 fd77 	bl	8003514 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f001 fa27 	bl	8002e7c <HAL_Delay>
	  HAL_GPIO_WritePin(pinMap[6].port, pinMap[6].pin, GPIO_PIN_SET);
 8001a2e:	4b6f      	ldr	r3, [pc, #444]	@ (8001bec <spiralInAndOut+0x324>)
 8001a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a32:	4a6e      	ldr	r2, [pc, #440]	@ (8001bec <spiralInAndOut+0x324>)
 8001a34:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 8001a38:	2201      	movs	r2, #1
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f001 fd6a 	bl	8003514 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f001 fa1a 	bl	8002e7c <HAL_Delay>
	  HAL_GPIO_WritePin(pinMap[10].port, pinMap[10].pin, GPIO_PIN_SET);
 8001a48:	4b68      	ldr	r3, [pc, #416]	@ (8001bec <spiralInAndOut+0x324>)
 8001a4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001a4c:	4a67      	ldr	r2, [pc, #412]	@ (8001bec <spiralInAndOut+0x324>)
 8001a4e:	f8b2 1080 	ldrh.w	r1, [r2, #128]	@ 0x80
 8001a52:	2201      	movs	r2, #1
 8001a54:	4618      	mov	r0, r3
 8001a56:	f001 fd5d 	bl	8003514 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f001 fa0d 	bl	8002e7c <HAL_Delay>
	  HAL_GPIO_WritePin(pinMap[9].port, pinMap[9].pin, GPIO_PIN_SET);
 8001a62:	4b62      	ldr	r3, [pc, #392]	@ (8001bec <spiralInAndOut+0x324>)
 8001a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a66:	4a61      	ldr	r2, [pc, #388]	@ (8001bec <spiralInAndOut+0x324>)
 8001a68:	f8b2 1074 	ldrh.w	r1, [r2, #116]	@ 0x74
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f001 fd50 	bl	8003514 <HAL_GPIO_WritePin>
	  HAL_Delay(x);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f001 fa00 	bl	8002e7c <HAL_Delay>
	  	  HAL_GPIO_WritePin(pinMap[9].port, pinMap[9].pin, GPIO_PIN_RESET);
 8001a7c:	4b5b      	ldr	r3, [pc, #364]	@ (8001bec <spiralInAndOut+0x324>)
 8001a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a80:	4a5a      	ldr	r2, [pc, #360]	@ (8001bec <spiralInAndOut+0x324>)
 8001a82:	f8b2 1074 	ldrh.w	r1, [r2, #116]	@ 0x74
 8001a86:	2200      	movs	r2, #0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f001 fd43 	bl	8003514 <HAL_GPIO_WritePin>
	  	  HAL_Delay(x);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f001 f9f3 	bl	8002e7c <HAL_Delay>
	  	  HAL_GPIO_WritePin(pinMap[10].port, pinMap[10].pin, GPIO_PIN_RESET);
 8001a96:	4b55      	ldr	r3, [pc, #340]	@ (8001bec <spiralInAndOut+0x324>)
 8001a98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001a9a:	4a54      	ldr	r2, [pc, #336]	@ (8001bec <spiralInAndOut+0x324>)
 8001a9c:	f8b2 1080 	ldrh.w	r1, [r2, #128]	@ 0x80
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f001 fd36 	bl	8003514 <HAL_GPIO_WritePin>
	  	  HAL_Delay(x);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f001 f9e6 	bl	8002e7c <HAL_Delay>
	  	  HAL_GPIO_WritePin(pinMap[6].port, pinMap[6].pin, GPIO_PIN_RESET);
 8001ab0:	4b4e      	ldr	r3, [pc, #312]	@ (8001bec <spiralInAndOut+0x324>)
 8001ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab4:	4a4d      	ldr	r2, [pc, #308]	@ (8001bec <spiralInAndOut+0x324>)
 8001ab6:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 8001aba:	2200      	movs	r2, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f001 fd29 	bl	8003514 <HAL_GPIO_WritePin>
	  	  HAL_Delay(x);
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f001 f9d9 	bl	8002e7c <HAL_Delay>
	  	  HAL_GPIO_WritePin(pinMap[5].port, pinMap[5].pin, GPIO_PIN_RESET);
 8001aca:	4b48      	ldr	r3, [pc, #288]	@ (8001bec <spiralInAndOut+0x324>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	4a47      	ldr	r2, [pc, #284]	@ (8001bec <spiralInAndOut+0x324>)
 8001ad0:	f8b2 1044 	ldrh.w	r1, [r2, #68]	@ 0x44
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f001 fd1c 	bl	8003514 <HAL_GPIO_WritePin>
	  	  HAL_Delay(x);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f001 f9cc 	bl	8002e7c <HAL_Delay>
	  	  HAL_GPIO_WritePin(pinMap[4].port, pinMap[4].pin, GPIO_PIN_RESET);
 8001ae4:	4b41      	ldr	r3, [pc, #260]	@ (8001bec <spiralInAndOut+0x324>)
 8001ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ae8:	4a40      	ldr	r2, [pc, #256]	@ (8001bec <spiralInAndOut+0x324>)
 8001aea:	8f11      	ldrh	r1, [r2, #56]	@ 0x38
 8001aec:	2200      	movs	r2, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f001 fd10 	bl	8003514 <HAL_GPIO_WritePin>
	  	  HAL_Delay(x);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f001 f9c0 	bl	8002e7c <HAL_Delay>
	  	  HAL_GPIO_WritePin(pinMap[8].port, pinMap[8].pin, GPIO_PIN_RESET);
 8001afc:	4b3b      	ldr	r3, [pc, #236]	@ (8001bec <spiralInAndOut+0x324>)
 8001afe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001b00:	4a3a      	ldr	r2, [pc, #232]	@ (8001bec <spiralInAndOut+0x324>)
 8001b02:	f8b2 1068 	ldrh.w	r1, [r2, #104]	@ 0x68
 8001b06:	2200      	movs	r2, #0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f001 fd03 	bl	8003514 <HAL_GPIO_WritePin>
	  	  HAL_Delay(x);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f001 f9b3 	bl	8002e7c <HAL_Delay>
	  	  HAL_GPIO_WritePin(pinMap[12].port, pinMap[12].pin, GPIO_PIN_RESET);
 8001b16:	4b35      	ldr	r3, [pc, #212]	@ (8001bec <spiralInAndOut+0x324>)
 8001b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b1c:	4a33      	ldr	r2, [pc, #204]	@ (8001bec <spiralInAndOut+0x324>)
 8001b1e:	f8b2 1098 	ldrh.w	r1, [r2, #152]	@ 0x98
 8001b22:	2200      	movs	r2, #0
 8001b24:	4618      	mov	r0, r3
 8001b26:	f001 fcf5 	bl	8003514 <HAL_GPIO_WritePin>
	  	  HAL_Delay(x);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f001 f9a5 	bl	8002e7c <HAL_Delay>
	  	  HAL_GPIO_WritePin(pinMap[13].port, pinMap[13].pin, GPIO_PIN_RESET);
 8001b32:	4b2e      	ldr	r3, [pc, #184]	@ (8001bec <spiralInAndOut+0x324>)
 8001b34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001b38:	4a2c      	ldr	r2, [pc, #176]	@ (8001bec <spiralInAndOut+0x324>)
 8001b3a:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	@ 0xa4
 8001b3e:	2200      	movs	r2, #0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f001 fce7 	bl	8003514 <HAL_GPIO_WritePin>
	  	  HAL_Delay(x);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f001 f997 	bl	8002e7c <HAL_Delay>
	  	  HAL_GPIO_WritePin(pinMap[14].port, pinMap[14].pin, GPIO_PIN_RESET);
 8001b4e:	4b27      	ldr	r3, [pc, #156]	@ (8001bec <spiralInAndOut+0x324>)
 8001b50:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8001b54:	4a25      	ldr	r2, [pc, #148]	@ (8001bec <spiralInAndOut+0x324>)
 8001b56:	f8b2 10b0 	ldrh.w	r1, [r2, #176]	@ 0xb0
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f001 fcd9 	bl	8003514 <HAL_GPIO_WritePin>
	  	  HAL_Delay(x);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f001 f989 	bl	8002e7c <HAL_Delay>
	      HAL_GPIO_WritePin(pinMap[15].port, pinMap[15].pin, GPIO_PIN_RESET);
 8001b6a:	4b20      	ldr	r3, [pc, #128]	@ (8001bec <spiralInAndOut+0x324>)
 8001b6c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8001b70:	4a1e      	ldr	r2, [pc, #120]	@ (8001bec <spiralInAndOut+0x324>)
 8001b72:	f8b2 10bc 	ldrh.w	r1, [r2, #188]	@ 0xbc
 8001b76:	2200      	movs	r2, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f001 fccb 	bl	8003514 <HAL_GPIO_WritePin>
	      HAL_Delay(x);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f001 f97b 	bl	8002e7c <HAL_Delay>
	  	  HAL_GPIO_WritePin(pinMap[11].port, pinMap[11].pin, GPIO_PIN_RESET);
 8001b86:	4b19      	ldr	r3, [pc, #100]	@ (8001bec <spiralInAndOut+0x324>)
 8001b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b8c:	4a17      	ldr	r2, [pc, #92]	@ (8001bec <spiralInAndOut+0x324>)
 8001b8e:	f8b2 108c 	ldrh.w	r1, [r2, #140]	@ 0x8c
 8001b92:	2200      	movs	r2, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f001 fcbd 	bl	8003514 <HAL_GPIO_WritePin>
	      HAL_Delay(x);
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f001 f96d 	bl	8002e7c <HAL_Delay>
	  	  HAL_GPIO_WritePin(pinMap[7].port, pinMap[7].pin, GPIO_PIN_RESET);
 8001ba2:	4b12      	ldr	r3, [pc, #72]	@ (8001bec <spiralInAndOut+0x324>)
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba6:	4a11      	ldr	r2, [pc, #68]	@ (8001bec <spiralInAndOut+0x324>)
 8001ba8:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8001bac:	2200      	movs	r2, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f001 fcb0 	bl	8003514 <HAL_GPIO_WritePin>
	  	  HAL_Delay(x);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f001 f960 	bl	8002e7c <HAL_Delay>
	  	  HAL_GPIO_WritePin(pinMap[3].port, pinMap[3].pin, GPIO_PIN_RESET);
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <spiralInAndOut+0x324>)
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8001bec <spiralInAndOut+0x324>)
 8001bc2:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f001 fca4 	bl	8003514 <HAL_GPIO_WritePin>
	  	  HAL_Delay(x);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f001 f954 	bl	8002e7c <HAL_Delay>
	  	  HAL_GPIO_WritePin(pinMap[2].port, pinMap[2].pin, GPIO_PIN_RESET);
 8001bd4:	4b05      	ldr	r3, [pc, #20]	@ (8001bec <spiralInAndOut+0x324>)
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	4a04      	ldr	r2, [pc, #16]	@ (8001bec <spiralInAndOut+0x324>)
 8001bda:	8c11      	ldrh	r1, [r2, #32]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	4618      	mov	r0, r3
 8001be0:	f001 fc98 	bl	8003514 <HAL_GPIO_WritePin>
	  	  HAL_Delay(x);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	e002      	b.n	8001bf0 <spiralInAndOut+0x328>
 8001bea:	bf00      	nop
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	f001 f944 	bl	8002e7c <HAL_Delay>
	      HAL_GPIO_WritePin(pinMap[1].port, pinMap[1].pin, GPIO_PIN_RESET);
 8001bf4:	4bc1      	ldr	r3, [pc, #772]	@ (8001efc <spiralInAndOut+0x634>)
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	4ac0      	ldr	r2, [pc, #768]	@ (8001efc <spiralInAndOut+0x634>)
 8001bfa:	8a91      	ldrh	r1, [r2, #20]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f001 fc88 	bl	8003514 <HAL_GPIO_WritePin>
	  	  HAL_Delay(x);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f001 f938 	bl	8002e7c <HAL_Delay>
	      HAL_GPIO_WritePin(pinMap[0].port, pinMap[0].pin, GPIO_PIN_RESET);
 8001c0c:	4bbb      	ldr	r3, [pc, #748]	@ (8001efc <spiralInAndOut+0x634>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	4aba      	ldr	r2, [pc, #744]	@ (8001efc <spiralInAndOut+0x634>)
 8001c12:	8911      	ldrh	r1, [r2, #8]
 8001c14:	2200      	movs	r2, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f001 fc7c 	bl	8003514 <HAL_GPIO_WritePin>
	  	  HAL_Delay(x);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f001 f92c 	bl	8002e7c <HAL_Delay>
	  	      HAL_GPIO_WritePin(pinMap[0].port, pinMap[0].pin, GPIO_PIN_SET);
 8001c24:	4bb5      	ldr	r3, [pc, #724]	@ (8001efc <spiralInAndOut+0x634>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	4ab4      	ldr	r2, [pc, #720]	@ (8001efc <spiralInAndOut+0x634>)
 8001c2a:	8911      	ldrh	r1, [r2, #8]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f001 fc70 	bl	8003514 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f001 f920 	bl	8002e7c <HAL_Delay>
	  		  HAL_GPIO_WritePin(pinMap[4].port, pinMap[4].pin, GPIO_PIN_SET);
 8001c3c:	4baf      	ldr	r3, [pc, #700]	@ (8001efc <spiralInAndOut+0x634>)
 8001c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c40:	4aae      	ldr	r2, [pc, #696]	@ (8001efc <spiralInAndOut+0x634>)
 8001c42:	8f11      	ldrh	r1, [r2, #56]	@ 0x38
 8001c44:	2201      	movs	r2, #1
 8001c46:	4618      	mov	r0, r3
 8001c48:	f001 fc64 	bl	8003514 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f001 f914 	bl	8002e7c <HAL_Delay>
	  		  HAL_GPIO_WritePin(pinMap[8].port, pinMap[8].pin, GPIO_PIN_SET);
 8001c54:	4ba9      	ldr	r3, [pc, #676]	@ (8001efc <spiralInAndOut+0x634>)
 8001c56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c58:	4aa8      	ldr	r2, [pc, #672]	@ (8001efc <spiralInAndOut+0x634>)
 8001c5a:	f8b2 1068 	ldrh.w	r1, [r2, #104]	@ 0x68
 8001c5e:	2201      	movs	r2, #1
 8001c60:	4618      	mov	r0, r3
 8001c62:	f001 fc57 	bl	8003514 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f001 f907 	bl	8002e7c <HAL_Delay>
	  		  HAL_GPIO_WritePin(pinMap[12].port, pinMap[12].pin, GPIO_PIN_SET);
 8001c6e:	4ba3      	ldr	r3, [pc, #652]	@ (8001efc <spiralInAndOut+0x634>)
 8001c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c74:	4aa1      	ldr	r2, [pc, #644]	@ (8001efc <spiralInAndOut+0x634>)
 8001c76:	f8b2 1098 	ldrh.w	r1, [r2, #152]	@ 0x98
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f001 fc49 	bl	8003514 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f001 f8f9 	bl	8002e7c <HAL_Delay>
	  		  HAL_GPIO_WritePin(pinMap[13].port, pinMap[13].pin, GPIO_PIN_SET);
 8001c8a:	4b9c      	ldr	r3, [pc, #624]	@ (8001efc <spiralInAndOut+0x634>)
 8001c8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001c90:	4a9a      	ldr	r2, [pc, #616]	@ (8001efc <spiralInAndOut+0x634>)
 8001c92:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	@ 0xa4
 8001c96:	2201      	movs	r2, #1
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f001 fc3b 	bl	8003514 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f001 f8eb 	bl	8002e7c <HAL_Delay>
	  		  HAL_GPIO_WritePin(pinMap[14].port, pinMap[14].pin, GPIO_PIN_SET);
 8001ca6:	4b95      	ldr	r3, [pc, #596]	@ (8001efc <spiralInAndOut+0x634>)
 8001ca8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8001cac:	4a93      	ldr	r2, [pc, #588]	@ (8001efc <spiralInAndOut+0x634>)
 8001cae:	f8b2 10b0 	ldrh.w	r1, [r2, #176]	@ 0xb0
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f001 fc2d 	bl	8003514 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f001 f8dd 	bl	8002e7c <HAL_Delay>
	  		  HAL_GPIO_WritePin(pinMap[15].port, pinMap[15].pin, GPIO_PIN_SET);
 8001cc2:	4b8e      	ldr	r3, [pc, #568]	@ (8001efc <spiralInAndOut+0x634>)
 8001cc4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8001cc8:	4a8c      	ldr	r2, [pc, #560]	@ (8001efc <spiralInAndOut+0x634>)
 8001cca:	f8b2 10bc 	ldrh.w	r1, [r2, #188]	@ 0xbc
 8001cce:	2201      	movs	r2, #1
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f001 fc1f 	bl	8003514 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f001 f8cf 	bl	8002e7c <HAL_Delay>
	  		  HAL_GPIO_WritePin(pinMap[11].port, pinMap[11].pin, GPIO_PIN_SET);
 8001cde:	4b87      	ldr	r3, [pc, #540]	@ (8001efc <spiralInAndOut+0x634>)
 8001ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ce4:	4a85      	ldr	r2, [pc, #532]	@ (8001efc <spiralInAndOut+0x634>)
 8001ce6:	f8b2 108c 	ldrh.w	r1, [r2, #140]	@ 0x8c
 8001cea:	2201      	movs	r2, #1
 8001cec:	4618      	mov	r0, r3
 8001cee:	f001 fc11 	bl	8003514 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f001 f8c1 	bl	8002e7c <HAL_Delay>
	  		  HAL_GPIO_WritePin(pinMap[7].port, pinMap[7].pin, GPIO_PIN_SET);
 8001cfa:	4b80      	ldr	r3, [pc, #512]	@ (8001efc <spiralInAndOut+0x634>)
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfe:	4a7f      	ldr	r2, [pc, #508]	@ (8001efc <spiralInAndOut+0x634>)
 8001d00:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8001d04:	2201      	movs	r2, #1
 8001d06:	4618      	mov	r0, r3
 8001d08:	f001 fc04 	bl	8003514 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f001 f8b4 	bl	8002e7c <HAL_Delay>
	  		  HAL_GPIO_WritePin(pinMap[3].port, pinMap[3].pin, GPIO_PIN_SET);
 8001d14:	4b79      	ldr	r3, [pc, #484]	@ (8001efc <spiralInAndOut+0x634>)
 8001d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d18:	4a78      	ldr	r2, [pc, #480]	@ (8001efc <spiralInAndOut+0x634>)
 8001d1a:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f001 fbf8 	bl	8003514 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f001 f8a8 	bl	8002e7c <HAL_Delay>
	  		  HAL_GPIO_WritePin(pinMap[2].port, pinMap[2].pin, GPIO_PIN_SET);
 8001d2c:	4b73      	ldr	r3, [pc, #460]	@ (8001efc <spiralInAndOut+0x634>)
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	4a72      	ldr	r2, [pc, #456]	@ (8001efc <spiralInAndOut+0x634>)
 8001d32:	8c11      	ldrh	r1, [r2, #32]
 8001d34:	2201      	movs	r2, #1
 8001d36:	4618      	mov	r0, r3
 8001d38:	f001 fbec 	bl	8003514 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f001 f89c 	bl	8002e7c <HAL_Delay>
	  		  HAL_GPIO_WritePin(pinMap[1].port, pinMap[1].pin, GPIO_PIN_SET);
 8001d44:	4b6d      	ldr	r3, [pc, #436]	@ (8001efc <spiralInAndOut+0x634>)
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	4a6c      	ldr	r2, [pc, #432]	@ (8001efc <spiralInAndOut+0x634>)
 8001d4a:	8a91      	ldrh	r1, [r2, #20]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f001 fbe0 	bl	8003514 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f001 f890 	bl	8002e7c <HAL_Delay>
	  		  HAL_GPIO_WritePin(pinMap[5].port, pinMap[5].pin, GPIO_PIN_SET);
 8001d5c:	4b67      	ldr	r3, [pc, #412]	@ (8001efc <spiralInAndOut+0x634>)
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d60:	4a66      	ldr	r2, [pc, #408]	@ (8001efc <spiralInAndOut+0x634>)
 8001d62:	f8b2 1044 	ldrh.w	r1, [r2, #68]	@ 0x44
 8001d66:	2201      	movs	r2, #1
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f001 fbd3 	bl	8003514 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f001 f883 	bl	8002e7c <HAL_Delay>
	  		  HAL_GPIO_WritePin(pinMap[9].port, pinMap[9].pin, GPIO_PIN_SET);
 8001d76:	4b61      	ldr	r3, [pc, #388]	@ (8001efc <spiralInAndOut+0x634>)
 8001d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d7a:	4a60      	ldr	r2, [pc, #384]	@ (8001efc <spiralInAndOut+0x634>)
 8001d7c:	f8b2 1074 	ldrh.w	r1, [r2, #116]	@ 0x74
 8001d80:	2201      	movs	r2, #1
 8001d82:	4618      	mov	r0, r3
 8001d84:	f001 fbc6 	bl	8003514 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f001 f876 	bl	8002e7c <HAL_Delay>
	  		  HAL_GPIO_WritePin(pinMap[10].port, pinMap[10].pin, GPIO_PIN_SET);
 8001d90:	4b5a      	ldr	r3, [pc, #360]	@ (8001efc <spiralInAndOut+0x634>)
 8001d92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001d94:	4a59      	ldr	r2, [pc, #356]	@ (8001efc <spiralInAndOut+0x634>)
 8001d96:	f8b2 1080 	ldrh.w	r1, [r2, #128]	@ 0x80
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f001 fbb9 	bl	8003514 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f001 f869 	bl	8002e7c <HAL_Delay>
	  		  HAL_GPIO_WritePin(pinMap[6].port, pinMap[6].pin, GPIO_PIN_SET);
 8001daa:	4b54      	ldr	r3, [pc, #336]	@ (8001efc <spiralInAndOut+0x634>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dae:	4a53      	ldr	r2, [pc, #332]	@ (8001efc <spiralInAndOut+0x634>)
 8001db0:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 8001db4:	2201      	movs	r2, #1
 8001db6:	4618      	mov	r0, r3
 8001db8:	f001 fbac 	bl	8003514 <HAL_GPIO_WritePin>
	  		  HAL_Delay(x);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f001 f85c 	bl	8002e7c <HAL_Delay>
	  		          HAL_GPIO_WritePin(pinMap[6].port, pinMap[6].pin, GPIO_PIN_RESET);
 8001dc4:	4b4d      	ldr	r3, [pc, #308]	@ (8001efc <spiralInAndOut+0x634>)
 8001dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc8:	4a4c      	ldr	r2, [pc, #304]	@ (8001efc <spiralInAndOut+0x634>)
 8001dca:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 8001dce:	2200      	movs	r2, #0
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f001 fb9f 	bl	8003514 <HAL_GPIO_WritePin>
	  			  	  HAL_Delay(x);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f001 f84f 	bl	8002e7c <HAL_Delay>
	  			  	  HAL_GPIO_WritePin(pinMap[10].port, pinMap[10].pin, GPIO_PIN_RESET);
 8001dde:	4b47      	ldr	r3, [pc, #284]	@ (8001efc <spiralInAndOut+0x634>)
 8001de0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001de2:	4a46      	ldr	r2, [pc, #280]	@ (8001efc <spiralInAndOut+0x634>)
 8001de4:	f8b2 1080 	ldrh.w	r1, [r2, #128]	@ 0x80
 8001de8:	2200      	movs	r2, #0
 8001dea:	4618      	mov	r0, r3
 8001dec:	f001 fb92 	bl	8003514 <HAL_GPIO_WritePin>
	  			  	  HAL_Delay(x);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f001 f842 	bl	8002e7c <HAL_Delay>
	  			  	  HAL_GPIO_WritePin(pinMap[9].port, pinMap[9].pin, GPIO_PIN_RESET);
 8001df8:	4b40      	ldr	r3, [pc, #256]	@ (8001efc <spiralInAndOut+0x634>)
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dfc:	4a3f      	ldr	r2, [pc, #252]	@ (8001efc <spiralInAndOut+0x634>)
 8001dfe:	f8b2 1074 	ldrh.w	r1, [r2, #116]	@ 0x74
 8001e02:	2200      	movs	r2, #0
 8001e04:	4618      	mov	r0, r3
 8001e06:	f001 fb85 	bl	8003514 <HAL_GPIO_WritePin>
	  			  	  HAL_Delay(x);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f001 f835 	bl	8002e7c <HAL_Delay>
	  			  	  HAL_GPIO_WritePin(pinMap[5].port, pinMap[5].pin, GPIO_PIN_RESET);
 8001e12:	4b3a      	ldr	r3, [pc, #232]	@ (8001efc <spiralInAndOut+0x634>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	4a39      	ldr	r2, [pc, #228]	@ (8001efc <spiralInAndOut+0x634>)
 8001e18:	f8b2 1044 	ldrh.w	r1, [r2, #68]	@ 0x44
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f001 fb78 	bl	8003514 <HAL_GPIO_WritePin>
	  			  	  HAL_Delay(x);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f001 f828 	bl	8002e7c <HAL_Delay>
	  			  	  HAL_GPIO_WritePin(pinMap[1].port, pinMap[1].pin, GPIO_PIN_RESET);
 8001e2c:	4b33      	ldr	r3, [pc, #204]	@ (8001efc <spiralInAndOut+0x634>)
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	4a32      	ldr	r2, [pc, #200]	@ (8001efc <spiralInAndOut+0x634>)
 8001e32:	8a91      	ldrh	r1, [r2, #20]
 8001e34:	2200      	movs	r2, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	f001 fb6c 	bl	8003514 <HAL_GPIO_WritePin>
	  			  	  HAL_Delay(x);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f001 f81c 	bl	8002e7c <HAL_Delay>
	  			  	  HAL_GPIO_WritePin(pinMap[2].port, pinMap[2].pin, GPIO_PIN_RESET);
 8001e44:	4b2d      	ldr	r3, [pc, #180]	@ (8001efc <spiralInAndOut+0x634>)
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	4a2c      	ldr	r2, [pc, #176]	@ (8001efc <spiralInAndOut+0x634>)
 8001e4a:	8c11      	ldrh	r1, [r2, #32]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f001 fb60 	bl	8003514 <HAL_GPIO_WritePin>
	  			  	  HAL_Delay(x);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f001 f810 	bl	8002e7c <HAL_Delay>
	  			  	  HAL_GPIO_WritePin(pinMap[3].port, pinMap[3].pin, GPIO_PIN_RESET);
 8001e5c:	4b27      	ldr	r3, [pc, #156]	@ (8001efc <spiralInAndOut+0x634>)
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e60:	4a26      	ldr	r2, [pc, #152]	@ (8001efc <spiralInAndOut+0x634>)
 8001e62:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 8001e64:	2200      	movs	r2, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f001 fb54 	bl	8003514 <HAL_GPIO_WritePin>
	  			  	  HAL_Delay(x);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f001 f804 	bl	8002e7c <HAL_Delay>
	  			  	  HAL_GPIO_WritePin(pinMap[7].port, pinMap[7].pin, GPIO_PIN_RESET);
 8001e74:	4b21      	ldr	r3, [pc, #132]	@ (8001efc <spiralInAndOut+0x634>)
 8001e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e78:	4a20      	ldr	r2, [pc, #128]	@ (8001efc <spiralInAndOut+0x634>)
 8001e7a:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8001e7e:	2200      	movs	r2, #0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f001 fb47 	bl	8003514 <HAL_GPIO_WritePin>
	  			  	  HAL_Delay(x);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f000 fff7 	bl	8002e7c <HAL_Delay>
	  			  	  HAL_GPIO_WritePin(pinMap[11].port, pinMap[11].pin, GPIO_PIN_RESET);
 8001e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001efc <spiralInAndOut+0x634>)
 8001e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e94:	4a19      	ldr	r2, [pc, #100]	@ (8001efc <spiralInAndOut+0x634>)
 8001e96:	f8b2 108c 	ldrh.w	r1, [r2, #140]	@ 0x8c
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f001 fb39 	bl	8003514 <HAL_GPIO_WritePin>
	  			  	  HAL_Delay(x);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f000 ffe9 	bl	8002e7c <HAL_Delay>
	  			      HAL_GPIO_WritePin(pinMap[15].port, pinMap[15].pin, GPIO_PIN_RESET);
 8001eaa:	4b14      	ldr	r3, [pc, #80]	@ (8001efc <spiralInAndOut+0x634>)
 8001eac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8001eb0:	4a12      	ldr	r2, [pc, #72]	@ (8001efc <spiralInAndOut+0x634>)
 8001eb2:	f8b2 10bc 	ldrh.w	r1, [r2, #188]	@ 0xbc
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f001 fb2b 	bl	8003514 <HAL_GPIO_WritePin>
	  			      HAL_Delay(x);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f000 ffdb 	bl	8002e7c <HAL_Delay>
	  			  	  HAL_GPIO_WritePin(pinMap[14].port, pinMap[14].pin, GPIO_PIN_RESET);
 8001ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8001efc <spiralInAndOut+0x634>)
 8001ec8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8001ecc:	4a0b      	ldr	r2, [pc, #44]	@ (8001efc <spiralInAndOut+0x634>)
 8001ece:	f8b2 10b0 	ldrh.w	r1, [r2, #176]	@ 0xb0
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f001 fb1d 	bl	8003514 <HAL_GPIO_WritePin>
	  			      HAL_Delay(x);
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 ffcd 	bl	8002e7c <HAL_Delay>
	  			  	  HAL_GPIO_WritePin(pinMap[13].port, pinMap[13].pin, GPIO_PIN_RESET);
 8001ee2:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <spiralInAndOut+0x634>)
 8001ee4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001ee8:	4a04      	ldr	r2, [pc, #16]	@ (8001efc <spiralInAndOut+0x634>)
 8001eea:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	@ 0xa4
 8001eee:	2200      	movs	r2, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f001 fb0f 	bl	8003514 <HAL_GPIO_WritePin>
	  			  	  HAL_Delay(x);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	e001      	b.n	8001f00 <spiralInAndOut+0x638>
 8001efc:	20000000 	.word	0x20000000
 8001f00:	f000 ffbc 	bl	8002e7c <HAL_Delay>
	  			  	  HAL_GPIO_WritePin(pinMap[12].port, pinMap[12].pin, GPIO_PIN_RESET);
 8001f04:	4b1f      	ldr	r3, [pc, #124]	@ (8001f84 <spiralInAndOut+0x6bc>)
 8001f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8001f84 <spiralInAndOut+0x6bc>)
 8001f0c:	f8b2 1098 	ldrh.w	r1, [r2, #152]	@ 0x98
 8001f10:	2200      	movs	r2, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f001 fafe 	bl	8003514 <HAL_GPIO_WritePin>
	  			  	  HAL_Delay(x);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 ffae 	bl	8002e7c <HAL_Delay>
	  			  	  HAL_GPIO_WritePin(pinMap[8].port, pinMap[8].pin, GPIO_PIN_RESET);
 8001f20:	4b18      	ldr	r3, [pc, #96]	@ (8001f84 <spiralInAndOut+0x6bc>)
 8001f22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f24:	4a17      	ldr	r2, [pc, #92]	@ (8001f84 <spiralInAndOut+0x6bc>)
 8001f26:	f8b2 1068 	ldrh.w	r1, [r2, #104]	@ 0x68
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f001 faf1 	bl	8003514 <HAL_GPIO_WritePin>
	  			  	  HAL_Delay(x);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f000 ffa1 	bl	8002e7c <HAL_Delay>
	  			      HAL_GPIO_WritePin(pinMap[4].port, pinMap[4].pin, GPIO_PIN_RESET);
 8001f3a:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <spiralInAndOut+0x6bc>)
 8001f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f3e:	4a11      	ldr	r2, [pc, #68]	@ (8001f84 <spiralInAndOut+0x6bc>)
 8001f40:	8f11      	ldrh	r1, [r2, #56]	@ 0x38
 8001f42:	2200      	movs	r2, #0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f001 fae5 	bl	8003514 <HAL_GPIO_WritePin>
	  			  	  HAL_Delay(x);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f000 ff95 	bl	8002e7c <HAL_Delay>
	  			      HAL_GPIO_WritePin(pinMap[0].port, pinMap[0].pin, GPIO_PIN_RESET);
 8001f52:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <spiralInAndOut+0x6bc>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	4a0b      	ldr	r2, [pc, #44]	@ (8001f84 <spiralInAndOut+0x6bc>)
 8001f58:	8911      	ldrh	r1, [r2, #8]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f001 fad9 	bl	8003514 <HAL_GPIO_WritePin>
	  			  	  HAL_Delay(x);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 ff89 	bl	8002e7c <HAL_Delay>
  for(int i = 0; i<6; i++)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	607b      	str	r3, [r7, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b05      	cmp	r3, #5
 8001f74:	f77f acb2 	ble.w	80018dc <spiralInAndOut+0x14>
  }
}
 8001f78:	bf00      	nop
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000000 	.word	0x20000000

08001f88 <goThroughAllLedsOneAtATime>:
//go through all leds one at a time
void goThroughAllLedsOneAtATime()
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08a      	sub	sp, #40	@ 0x28
 8001f8c:	af00      	add	r7, sp, #0
  int x = 15;
 8001f8e:	230f      	movs	r3, #15
 8001f90:	603b      	str	r3, [r7, #0]
  disableAllPins();
 8001f92:	f7fe fac7 	bl	8000524 <disableAllPins>
  for(int y = 0; y<5; y++)
 8001f96:	2300      	movs	r3, #0
 8001f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f9a:	e1d6      	b.n	800234a <goThroughAllLedsOneAtATime+0x3c2>
  {
    //0-3
    for(int count = 4; count != 0; count--)
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	623b      	str	r3, [r7, #32]
 8001fa0:	e06f      	b.n	8002082 <goThroughAllLedsOneAtATime+0xfa>
    {
    	HAL_GPIO_WritePin(layers[count-1].port, layers[count-1].pin, GPIO_PIN_SET);
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	1e5a      	subs	r2, r3, #1
 8001fa6:	49ba      	ldr	r1, [pc, #744]	@ (8002290 <goThroughAllLedsOneAtATime+0x308>)
 8001fa8:	4613      	mov	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	1e5a      	subs	r2, r3, #1
 8001fba:	49b5      	ldr	r1, [pc, #724]	@ (8002290 <goThroughAllLedsOneAtATime+0x308>)
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	3308      	adds	r3, #8
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f001 faa1 	bl	8003514 <HAL_GPIO_WritePin>
      for(int i = 0; i<4; i++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
 8001fd6:	e036      	b.n	8002046 <goThroughAllLedsOneAtATime+0xbe>
      {
    	  HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 8001fd8:	49ae      	ldr	r1, [pc, #696]	@ (8002294 <goThroughAllLedsOneAtATime+0x30c>)
 8001fda:	69fa      	ldr	r2, [r7, #28]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	6818      	ldr	r0, [r3, #0]
 8001fea:	49aa      	ldr	r1, [pc, #680]	@ (8002294 <goThroughAllLedsOneAtATime+0x30c>)
 8001fec:	69fa      	ldr	r2, [r7, #28]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	3308      	adds	r3, #8
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	4619      	mov	r1, r3
 8002000:	f001 fa88 	bl	8003514 <HAL_GPIO_WritePin>
    	  HAL_Delay(x);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f000 ff38 	bl	8002e7c <HAL_Delay>
    	  HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_SET);
 800200c:	49a1      	ldr	r1, [pc, #644]	@ (8002294 <goThroughAllLedsOneAtATime+0x30c>)
 800200e:	69fa      	ldr	r2, [r7, #28]
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	3304      	adds	r3, #4
 800201c:	6818      	ldr	r0, [r3, #0]
 800201e:	499d      	ldr	r1, [pc, #628]	@ (8002294 <goThroughAllLedsOneAtATime+0x30c>)
 8002020:	69fa      	ldr	r2, [r7, #28]
 8002022:	4613      	mov	r3, r2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	3308      	adds	r3, #8
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	2201      	movs	r2, #1
 8002032:	4619      	mov	r1, r3
 8002034:	f001 fa6e 	bl	8003514 <HAL_GPIO_WritePin>
        HAL_Delay(x);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f000 ff1e 	bl	8002e7c <HAL_Delay>
      for(int i = 0; i<4; i++)
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	3301      	adds	r3, #1
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	2b03      	cmp	r3, #3
 800204a:	ddc5      	ble.n	8001fd8 <goThroughAllLedsOneAtATime+0x50>
      }
      HAL_GPIO_WritePin(layers[count-1].port, layers[count-1].pin, GPIO_PIN_RESET);
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	1e5a      	subs	r2, r3, #1
 8002050:	498f      	ldr	r1, [pc, #572]	@ (8002290 <goThroughAllLedsOneAtATime+0x308>)
 8002052:	4613      	mov	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	3304      	adds	r3, #4
 800205e:	6818      	ldr	r0, [r3, #0]
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	1e5a      	subs	r2, r3, #1
 8002064:	498a      	ldr	r1, [pc, #552]	@ (8002290 <goThroughAllLedsOneAtATime+0x308>)
 8002066:	4613      	mov	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4413      	add	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	440b      	add	r3, r1
 8002070:	3308      	adds	r3, #8
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	2200      	movs	r2, #0
 8002076:	4619      	mov	r1, r3
 8002078:	f001 fa4c 	bl	8003514 <HAL_GPIO_WritePin>
    for(int count = 4; count != 0; count--)
 800207c:	6a3b      	ldr	r3, [r7, #32]
 800207e:	3b01      	subs	r3, #1
 8002080:	623b      	str	r3, [r7, #32]
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d18c      	bne.n	8001fa2 <goThroughAllLedsOneAtATime+0x1a>
    }
    //4-7
    for(int count = 0; count < 4; count++)
 8002088:	2300      	movs	r3, #0
 800208a:	61bb      	str	r3, [r7, #24]
 800208c:	e06b      	b.n	8002166 <goThroughAllLedsOneAtATime+0x1de>
    {
    	HAL_GPIO_WritePin(layers[count].port, layers[count].pin, GPIO_PIN_SET);
 800208e:	4980      	ldr	r1, [pc, #512]	@ (8002290 <goThroughAllLedsOneAtATime+0x308>)
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4613      	mov	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	3304      	adds	r3, #4
 800209e:	6818      	ldr	r0, [r3, #0]
 80020a0:	497b      	ldr	r1, [pc, #492]	@ (8002290 <goThroughAllLedsOneAtATime+0x308>)
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4613      	mov	r3, r2
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	4413      	add	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	3308      	adds	r3, #8
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	2201      	movs	r2, #1
 80020b4:	4619      	mov	r1, r3
 80020b6:	f001 fa2d 	bl	8003514 <HAL_GPIO_WritePin>
      for(int i = 4; i<8; i++)
 80020ba:	2304      	movs	r3, #4
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	e036      	b.n	800212e <goThroughAllLedsOneAtATime+0x1a6>
      {
    	  HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 80020c0:	4974      	ldr	r1, [pc, #464]	@ (8002294 <goThroughAllLedsOneAtATime+0x30c>)
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	4613      	mov	r3, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	3304      	adds	r3, #4
 80020d0:	6818      	ldr	r0, [r3, #0]
 80020d2:	4970      	ldr	r1, [pc, #448]	@ (8002294 <goThroughAllLedsOneAtATime+0x30c>)
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	4613      	mov	r3, r2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	4413      	add	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	3308      	adds	r3, #8
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	2200      	movs	r2, #0
 80020e6:	4619      	mov	r1, r3
 80020e8:	f001 fa14 	bl	8003514 <HAL_GPIO_WritePin>
    	  HAL_Delay(x);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 fec4 	bl	8002e7c <HAL_Delay>
    	  HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_SET);
 80020f4:	4967      	ldr	r1, [pc, #412]	@ (8002294 <goThroughAllLedsOneAtATime+0x30c>)
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	4613      	mov	r3, r2
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4413      	add	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	3304      	adds	r3, #4
 8002104:	6818      	ldr	r0, [r3, #0]
 8002106:	4963      	ldr	r1, [pc, #396]	@ (8002294 <goThroughAllLedsOneAtATime+0x30c>)
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	4613      	mov	r3, r2
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	3308      	adds	r3, #8
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	2201      	movs	r2, #1
 800211a:	4619      	mov	r1, r3
 800211c:	f001 f9fa 	bl	8003514 <HAL_GPIO_WritePin>
    	  HAL_Delay(x);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f000 feaa 	bl	8002e7c <HAL_Delay>
      for(int i = 4; i<8; i++)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	3301      	adds	r3, #1
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2b07      	cmp	r3, #7
 8002132:	ddc5      	ble.n	80020c0 <goThroughAllLedsOneAtATime+0x138>
      }
      HAL_GPIO_WritePin(layers[count].port, layers[count].pin, GPIO_PIN_RESET);
 8002134:	4956      	ldr	r1, [pc, #344]	@ (8002290 <goThroughAllLedsOneAtATime+0x308>)
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4613      	mov	r3, r2
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	3304      	adds	r3, #4
 8002144:	6818      	ldr	r0, [r3, #0]
 8002146:	4952      	ldr	r1, [pc, #328]	@ (8002290 <goThroughAllLedsOneAtATime+0x308>)
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4613      	mov	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4413      	add	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	3308      	adds	r3, #8
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	2200      	movs	r2, #0
 800215a:	4619      	mov	r1, r3
 800215c:	f001 f9da 	bl	8003514 <HAL_GPIO_WritePin>
    for(int count = 0; count < 4; count++)
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	3301      	adds	r3, #1
 8002164:	61bb      	str	r3, [r7, #24]
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	2b03      	cmp	r3, #3
 800216a:	dd90      	ble.n	800208e <goThroughAllLedsOneAtATime+0x106>
    }
    //8-11
    for(int count = 4; count != 0; count--)
 800216c:	2304      	movs	r3, #4
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	e06f      	b.n	8002252 <goThroughAllLedsOneAtATime+0x2ca>
    {
    	HAL_GPIO_WritePin(layers[count-1].port, layers[count-1].pin, GPIO_PIN_SET);
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1e5a      	subs	r2, r3, #1
 8002176:	4946      	ldr	r1, [pc, #280]	@ (8002290 <goThroughAllLedsOneAtATime+0x308>)
 8002178:	4613      	mov	r3, r2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	4413      	add	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	3304      	adds	r3, #4
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1e5a      	subs	r2, r3, #1
 800218a:	4941      	ldr	r1, [pc, #260]	@ (8002290 <goThroughAllLedsOneAtATime+0x308>)
 800218c:	4613      	mov	r3, r2
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	4413      	add	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	3308      	adds	r3, #8
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	2201      	movs	r2, #1
 800219c:	4619      	mov	r1, r3
 800219e:	f001 f9b9 	bl	8003514 <HAL_GPIO_WritePin>
      for(int i = 8; i<12; i++)
 80021a2:	2308      	movs	r3, #8
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	e036      	b.n	8002216 <goThroughAllLedsOneAtATime+0x28e>
      {
    	  HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 80021a8:	493a      	ldr	r1, [pc, #232]	@ (8002294 <goThroughAllLedsOneAtATime+0x30c>)
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	4613      	mov	r3, r2
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	3304      	adds	r3, #4
 80021b8:	6818      	ldr	r0, [r3, #0]
 80021ba:	4936      	ldr	r1, [pc, #216]	@ (8002294 <goThroughAllLedsOneAtATime+0x30c>)
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	4613      	mov	r3, r2
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4413      	add	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	3308      	adds	r3, #8
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	2200      	movs	r2, #0
 80021ce:	4619      	mov	r1, r3
 80021d0:	f001 f9a0 	bl	8003514 <HAL_GPIO_WritePin>
    	      	  HAL_Delay(x);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fe50 	bl	8002e7c <HAL_Delay>
    	      	  HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_SET);
 80021dc:	492d      	ldr	r1, [pc, #180]	@ (8002294 <goThroughAllLedsOneAtATime+0x30c>)
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4613      	mov	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4413      	add	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	3304      	adds	r3, #4
 80021ec:	6818      	ldr	r0, [r3, #0]
 80021ee:	4929      	ldr	r1, [pc, #164]	@ (8002294 <goThroughAllLedsOneAtATime+0x30c>)
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4613      	mov	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	4413      	add	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	3308      	adds	r3, #8
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	2201      	movs	r2, #1
 8002202:	4619      	mov	r1, r3
 8002204:	f001 f986 	bl	8003514 <HAL_GPIO_WritePin>
    	      	  HAL_Delay(x);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f000 fe36 	bl	8002e7c <HAL_Delay>
      for(int i = 8; i<12; i++)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	3301      	adds	r3, #1
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b0b      	cmp	r3, #11
 800221a:	ddc5      	ble.n	80021a8 <goThroughAllLedsOneAtATime+0x220>
      }
      HAL_GPIO_WritePin(layers[count-1].port, layers[count-1].pin, GPIO_PIN_RESET);
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1e5a      	subs	r2, r3, #1
 8002220:	491b      	ldr	r1, [pc, #108]	@ (8002290 <goThroughAllLedsOneAtATime+0x308>)
 8002222:	4613      	mov	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	3304      	adds	r3, #4
 800222e:	6818      	ldr	r0, [r3, #0]
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1e5a      	subs	r2, r3, #1
 8002234:	4916      	ldr	r1, [pc, #88]	@ (8002290 <goThroughAllLedsOneAtATime+0x308>)
 8002236:	4613      	mov	r3, r2
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4413      	add	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	440b      	add	r3, r1
 8002240:	3308      	adds	r3, #8
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	2200      	movs	r2, #0
 8002246:	4619      	mov	r1, r3
 8002248:	f001 f964 	bl	8003514 <HAL_GPIO_WritePin>
    for(int count = 4; count != 0; count--)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	3b01      	subs	r3, #1
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d18c      	bne.n	8002172 <goThroughAllLedsOneAtATime+0x1ea>
    }
    //12-15
    for(int count = 0; count < 4; count++)
 8002258:	2300      	movs	r3, #0
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	e06f      	b.n	800233e <goThroughAllLedsOneAtATime+0x3b6>
    {
    	HAL_GPIO_WritePin(layers[count].port, layers[count].pin, GPIO_PIN_SET);
 800225e:	490c      	ldr	r1, [pc, #48]	@ (8002290 <goThroughAllLedsOneAtATime+0x308>)
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	4613      	mov	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	440b      	add	r3, r1
 800226c:	3304      	adds	r3, #4
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	4907      	ldr	r1, [pc, #28]	@ (8002290 <goThroughAllLedsOneAtATime+0x308>)
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	4613      	mov	r3, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4413      	add	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	3308      	adds	r3, #8
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	2201      	movs	r2, #1
 8002284:	4619      	mov	r1, r3
 8002286:	f001 f945 	bl	8003514 <HAL_GPIO_WritePin>
      for(int i = 12; i<16; i++)
 800228a:	230c      	movs	r3, #12
 800228c:	607b      	str	r3, [r7, #4]
 800228e:	e03a      	b.n	8002306 <goThroughAllLedsOneAtATime+0x37e>
 8002290:	200000c0 	.word	0x200000c0
 8002294:	20000000 	.word	0x20000000
      {
    	  HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_RESET);
 8002298:	4930      	ldr	r1, [pc, #192]	@ (800235c <goThroughAllLedsOneAtATime+0x3d4>)
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	3304      	adds	r3, #4
 80022a8:	6818      	ldr	r0, [r3, #0]
 80022aa:	492c      	ldr	r1, [pc, #176]	@ (800235c <goThroughAllLedsOneAtATime+0x3d4>)
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	3308      	adds	r3, #8
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	2200      	movs	r2, #0
 80022be:	4619      	mov	r1, r3
 80022c0:	f001 f928 	bl	8003514 <HAL_GPIO_WritePin>
    	  HAL_Delay(x);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 fdd8 	bl	8002e7c <HAL_Delay>
    	  HAL_GPIO_WritePin(pinMap[i].port, pinMap[i].pin, GPIO_PIN_SET);
 80022cc:	4923      	ldr	r1, [pc, #140]	@ (800235c <goThroughAllLedsOneAtATime+0x3d4>)
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	3304      	adds	r3, #4
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	491f      	ldr	r1, [pc, #124]	@ (800235c <goThroughAllLedsOneAtATime+0x3d4>)
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	4413      	add	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	3308      	adds	r3, #8
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	2201      	movs	r2, #1
 80022f2:	4619      	mov	r1, r3
 80022f4:	f001 f90e 	bl	8003514 <HAL_GPIO_WritePin>
    	  HAL_Delay(x);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 fdbe 	bl	8002e7c <HAL_Delay>
      for(int i = 12; i<16; i++)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3301      	adds	r3, #1
 8002304:	607b      	str	r3, [r7, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b0f      	cmp	r3, #15
 800230a:	ddc5      	ble.n	8002298 <goThroughAllLedsOneAtATime+0x310>
      }
      HAL_GPIO_WritePin(layers[count].port, layers[count].pin, GPIO_PIN_RESET);
 800230c:	4914      	ldr	r1, [pc, #80]	@ (8002360 <goThroughAllLedsOneAtATime+0x3d8>)
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	4613      	mov	r3, r2
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	3304      	adds	r3, #4
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	4910      	ldr	r1, [pc, #64]	@ (8002360 <goThroughAllLedsOneAtATime+0x3d8>)
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	4613      	mov	r3, r2
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	3308      	adds	r3, #8
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	2200      	movs	r2, #0
 8002332:	4619      	mov	r1, r3
 8002334:	f001 f8ee 	bl	8003514 <HAL_GPIO_WritePin>
    for(int count = 0; count < 4; count++)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	3301      	adds	r3, #1
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2b03      	cmp	r3, #3
 8002342:	dd8c      	ble.n	800225e <goThroughAllLedsOneAtATime+0x2d6>
  for(int y = 0; y<5; y++)
 8002344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002346:	3301      	adds	r3, #1
 8002348:	627b      	str	r3, [r7, #36]	@ 0x24
 800234a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234c:	2b04      	cmp	r3, #4
 800234e:	f77f ae25 	ble.w	8001f9c <goThroughAllLedsOneAtATime+0x14>
    }
  }
}
 8002352:	bf00      	nop
 8002354:	bf00      	nop
 8002356:	3728      	adds	r7, #40	@ 0x28
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000000 	.word	0x20000000
 8002360:	200000c0 	.word	0x200000c0

08002364 <processBluetoothCommands>:
} CommandQueueItem;

CommandQueueItem commandQueue[MAX_COMMAND_QUEUE];
int commandQueueSize = 0;

void processBluetoothCommands(char* recv_str) {
 8002364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002366:	b09b      	sub	sp, #108	@ 0x6c
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
    char commandOn[40];
    char commandOff[40];

    strcpy(commandOn, recv_str);
 800236c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4618      	mov	r0, r3
 8002374:	f003 f916 	bl	80055a4 <strcpy>
    strcpy(commandOff, recv_str);
 8002378:	f107 030c 	add.w	r3, r7, #12
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	4618      	mov	r0, r3
 8002380:	f003 f910 	bl	80055a4 <strcpy>
    strcat(commandOn, "_on");
 8002384:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002388:	4618      	mov	r0, r3
 800238a:	f7fd ff2d 	bl	80001e8 <strlen>
 800238e:	4603      	mov	r3, r0
 8002390:	461a      	mov	r2, r3
 8002392:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002396:	4413      	add	r3, r2
 8002398:	4a65      	ldr	r2, [pc, #404]	@ (8002530 <processBluetoothCommands+0x1cc>)
 800239a:	6810      	ldr	r0, [r2, #0]
 800239c:	6018      	str	r0, [r3, #0]
    strcat(commandOff, "_off");
 800239e:	f107 030c 	add.w	r3, r7, #12
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fd ff20 	bl	80001e8 <strlen>
 80023a8:	4603      	mov	r3, r0
 80023aa:	461a      	mov	r2, r3
 80023ac:	f107 030c 	add.w	r3, r7, #12
 80023b0:	4413      	add	r3, r2
 80023b2:	4a60      	ldr	r2, [pc, #384]	@ (8002534 <processBluetoothCommands+0x1d0>)
 80023b4:	6810      	ldr	r0, [r2, #0]
 80023b6:	6018      	str	r0, [r3, #0]
 80023b8:	7912      	ldrb	r2, [r2, #4]
 80023ba:	711a      	strb	r2, [r3, #4]

    // Check if the received command is to turn on
    if (strstr(recv_str, "_on")) {
 80023bc:	495c      	ldr	r1, [pc, #368]	@ (8002530 <processBluetoothCommands+0x1cc>)
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f003 f8b6 	bl	8005530 <strstr>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d047      	beq.n	800245a <processBluetoothCommands+0xf6>
        // Remove "_on" from the command
        recv_str[strlen(recv_str) - 3] = '\0';
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7fd ff0c 	bl	80001e8 <strlen>
 80023d0:	4603      	mov	r3, r0
 80023d2:	3b03      	subs	r3, #3
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	4413      	add	r3, r2
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]

        // Check if the command is already in the queue
        for (int j = 0; j < commandQueueSize; ++j) {
 80023dc:	2300      	movs	r3, #0
 80023de:	667b      	str	r3, [r7, #100]	@ 0x64
 80023e0:	e012      	b.n	8002408 <processBluetoothCommands+0xa4>
            if (!strcmp(commandQueue[j].command, recv_str)) {
 80023e2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4413      	add	r3, r2
 80023ee:	4a52      	ldr	r2, [pc, #328]	@ (8002538 <processBluetoothCommands+0x1d4>)
 80023f0:	4413      	add	r3, r2
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fd feed 	bl	80001d4 <strcmp>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 8093 	beq.w	8002528 <processBluetoothCommands+0x1c4>
        for (int j = 0; j < commandQueueSize; ++j) {
 8002402:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002404:	3301      	adds	r3, #1
 8002406:	667b      	str	r3, [r7, #100]	@ 0x64
 8002408:	4b4c      	ldr	r3, [pc, #304]	@ (800253c <processBluetoothCommands+0x1d8>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800240e:	429a      	cmp	r2, r3
 8002410:	dbe7      	blt.n	80023e2 <processBluetoothCommands+0x7e>
                return;
            }
        }

        // Add the command to the queue
        if (commandQueueSize < MAX_COMMAND_QUEUE) {
 8002412:	4b4a      	ldr	r3, [pc, #296]	@ (800253c <processBluetoothCommands+0x1d8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b09      	cmp	r3, #9
 8002418:	f300 8087 	bgt.w	800252a <processBluetoothCommands+0x1c6>
            strcpy(commandQueue[commandQueueSize].command, recv_str);
 800241c:	4b47      	ldr	r3, [pc, #284]	@ (800253c <processBluetoothCommands+0x1d8>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4413      	add	r3, r2
 800242a:	4a43      	ldr	r2, [pc, #268]	@ (8002538 <processBluetoothCommands+0x1d4>)
 800242c:	4413      	add	r3, r2
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4618      	mov	r0, r3
 8002432:	f003 f8b7 	bl	80055a4 <strcpy>
            commandQueue[commandQueueSize].active = true;
 8002436:	4b41      	ldr	r3, [pc, #260]	@ (800253c <processBluetoothCommands+0x1d8>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	493f      	ldr	r1, [pc, #252]	@ (8002538 <processBluetoothCommands+0x1d4>)
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	440b      	add	r3, r1
 8002448:	3328      	adds	r3, #40	@ 0x28
 800244a:	2201      	movs	r2, #1
 800244c:	701a      	strb	r2, [r3, #0]
            commandQueueSize++;
 800244e:	4b3b      	ldr	r3, [pc, #236]	@ (800253c <processBluetoothCommands+0x1d8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	3301      	adds	r3, #1
 8002454:	4a39      	ldr	r2, [pc, #228]	@ (800253c <processBluetoothCommands+0x1d8>)
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	e067      	b.n	800252a <processBluetoothCommands+0x1c6>
        }
    } else if (strstr(recv_str, "_off")) {
 800245a:	4936      	ldr	r1, [pc, #216]	@ (8002534 <processBluetoothCommands+0x1d0>)
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f003 f867 	bl	8005530 <strstr>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d060      	beq.n	800252a <processBluetoothCommands+0x1c6>
        // Remove "_off" from the command
        recv_str[strlen(recv_str) - 4] = '\0';
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7fd febd 	bl	80001e8 <strlen>
 800246e:	4603      	mov	r3, r0
 8002470:	3b04      	subs	r3, #4
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	2200      	movs	r2, #0
 8002478:	701a      	strb	r2, [r3, #0]

        // Deactivate the command in the queue
        for (int j = 0; j < commandQueueSize; ++j) {
 800247a:	2300      	movs	r3, #0
 800247c:	663b      	str	r3, [r7, #96]	@ 0x60
 800247e:	e04d      	b.n	800251c <processBluetoothCommands+0x1b8>
            if (!strcmp(commandQueue[j].command, recv_str)) {
 8002480:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4413      	add	r3, r2
 800248c:	4a2a      	ldr	r2, [pc, #168]	@ (8002538 <processBluetoothCommands+0x1d4>)
 800248e:	4413      	add	r3, r2
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	4618      	mov	r0, r3
 8002494:	f7fd fe9e 	bl	80001d4 <strcmp>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d13b      	bne.n	8002516 <processBluetoothCommands+0x1b2>
                // Remove the command from the queue
                for (int k = j; k < commandQueueSize - 1; ++k) {
 800249e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024a2:	e02c      	b.n	80024fe <processBluetoothCommands+0x19a>
                    commandQueue[k] = commandQueue[k + 1];
 80024a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	4823      	ldr	r0, [pc, #140]	@ (8002538 <processBluetoothCommands+0x1d4>)
 80024aa:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80024ac:	460b      	mov	r3, r1
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	440b      	add	r3, r1
 80024b6:	4418      	add	r0, r3
 80024b8:	491f      	ldr	r1, [pc, #124]	@ (8002538 <processBluetoothCommands+0x1d4>)
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	4413      	add	r3, r2
 80024c4:	440b      	add	r3, r1
 80024c6:	f103 0420 	add.w	r4, r3, #32
 80024ca:	4602      	mov	r2, r0
 80024cc:	4619      	mov	r1, r3
 80024ce:	f8d1 c000 	ldr.w	ip, [r1]
 80024d2:	684e      	ldr	r6, [r1, #4]
 80024d4:	688d      	ldr	r5, [r1, #8]
 80024d6:	68c9      	ldr	r1, [r1, #12]
 80024d8:	f8c2 c000 	str.w	ip, [r2]
 80024dc:	6056      	str	r6, [r2, #4]
 80024de:	6095      	str	r5, [r2, #8]
 80024e0:	60d1      	str	r1, [r2, #12]
 80024e2:	3310      	adds	r3, #16
 80024e4:	3010      	adds	r0, #16
 80024e6:	42a3      	cmp	r3, r4
 80024e8:	d1ef      	bne.n	80024ca <processBluetoothCommands+0x166>
 80024ea:	4602      	mov	r2, r0
 80024ec:	6818      	ldr	r0, [r3, #0]
 80024ee:	6859      	ldr	r1, [r3, #4]
 80024f0:	6010      	str	r0, [r2, #0]
 80024f2:	6051      	str	r1, [r2, #4]
 80024f4:	7a1b      	ldrb	r3, [r3, #8]
 80024f6:	7213      	strb	r3, [r2, #8]
                for (int k = j; k < commandQueueSize - 1; ++k) {
 80024f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024fa:	3301      	adds	r3, #1
 80024fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024fe:	4b0f      	ldr	r3, [pc, #60]	@ (800253c <processBluetoothCommands+0x1d8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	3b01      	subs	r3, #1
 8002504:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002506:	429a      	cmp	r2, r3
 8002508:	dbcc      	blt.n	80024a4 <processBluetoothCommands+0x140>
                }
                commandQueueSize--;
 800250a:	4b0c      	ldr	r3, [pc, #48]	@ (800253c <processBluetoothCommands+0x1d8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	3b01      	subs	r3, #1
 8002510:	4a0a      	ldr	r2, [pc, #40]	@ (800253c <processBluetoothCommands+0x1d8>)
 8002512:	6013      	str	r3, [r2, #0]
                return;
 8002514:	e009      	b.n	800252a <processBluetoothCommands+0x1c6>
        for (int j = 0; j < commandQueueSize; ++j) {
 8002516:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002518:	3301      	adds	r3, #1
 800251a:	663b      	str	r3, [r7, #96]	@ 0x60
 800251c:	4b07      	ldr	r3, [pc, #28]	@ (800253c <processBluetoothCommands+0x1d8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002522:	429a      	cmp	r2, r3
 8002524:	dbac      	blt.n	8002480 <processBluetoothCommands+0x11c>
 8002526:	e000      	b.n	800252a <processBluetoothCommands+0x1c6>
                return;
 8002528:	bf00      	nop
            }
        }
    }
}
 800252a:	376c      	adds	r7, #108	@ 0x6c
 800252c:	46bd      	mov	sp, r7
 800252e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002530:	08005680 	.word	0x08005680
 8002534:	08005684 	.word	0x08005684
 8002538:	20000214 	.word	0x20000214
 800253c:	200003b0 	.word	0x200003b0

08002540 <executeCommandQueue>:




void executeCommandQueue() {
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
    for (int j = 0; j < commandQueueSize; ++j) {
 8002546:	2300      	movs	r3, #0
 8002548:	607b      	str	r3, [r7, #4]
 800254a:	e0c2      	b.n	80026d2 <executeCommandQueue+0x192>
        if (commandQueue[j].active) {
 800254c:	4966      	ldr	r1, [pc, #408]	@ (80026e8 <executeCommandQueue+0x1a8>)
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4413      	add	r3, r2
 800255a:	440b      	add	r3, r1
 800255c:	3328      	adds	r3, #40	@ 0x28
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 80b3 	beq.w	80026cc <executeCommandQueue+0x18c>
            if (!strcmp(commandQueue[j].command, COMMAND_FLICKER_ON)) {
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4413      	add	r3, r2
 8002572:	4a5d      	ldr	r2, [pc, #372]	@ (80026e8 <executeCommandQueue+0x1a8>)
 8002574:	4413      	add	r3, r2
 8002576:	495d      	ldr	r1, [pc, #372]	@ (80026ec <executeCommandQueue+0x1ac>)
 8002578:	4618      	mov	r0, r3
 800257a:	f7fd fe2b 	bl	80001d4 <strcmp>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d102      	bne.n	800258a <executeCommandQueue+0x4a>
                flickerOn();
 8002584:	f7fd ffb0 	bl	80004e8 <flickerOn>
 8002588:	e0a0      	b.n	80026cc <executeCommandQueue+0x18c>
            } else if (!strcmp(commandQueue[j].command, COMMAND_LAYER_UP_DOWN)) {
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	4a54      	ldr	r2, [pc, #336]	@ (80026e8 <executeCommandQueue+0x1a8>)
 8002598:	4413      	add	r3, r2
 800259a:	4955      	ldr	r1, [pc, #340]	@ (80026f0 <executeCommandQueue+0x1b0>)
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd fe19 	bl	80001d4 <strcmp>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d102      	bne.n	80025ae <executeCommandQueue+0x6e>
                turnOnAndOffAllByLayerUpAndDownNotTimed();
 80025a8:	f7fe f88e 	bl	80006c8 <turnOnAndOffAllByLayerUpAndDownNotTimed>
 80025ac:	e08e      	b.n	80026cc <executeCommandQueue+0x18c>
            } else if (!strcmp(commandQueue[j].command, COMMAND_COLUMNS_SIDEWAYS)) {
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4413      	add	r3, r2
 80025ba:	4a4b      	ldr	r2, [pc, #300]	@ (80026e8 <executeCommandQueue+0x1a8>)
 80025bc:	4413      	add	r3, r2
 80025be:	494d      	ldr	r1, [pc, #308]	@ (80026f4 <executeCommandQueue+0x1b4>)
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fd fe07 	bl	80001d4 <strcmp>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d102      	bne.n	80025d2 <executeCommandQueue+0x92>
                turnOnAndOffAllByColumnSideways();
 80025cc:	f7fe f92c 	bl	8000828 <turnOnAndOffAllByColumnSideways>
 80025d0:	e07c      	b.n	80026cc <executeCommandQueue+0x18c>
            } else if (!strcmp(commandQueue[j].command, COMMAND_STOMP_UP_DOWN)) {
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4413      	add	r3, r2
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	4413      	add	r3, r2
 80025de:	4a42      	ldr	r2, [pc, #264]	@ (80026e8 <executeCommandQueue+0x1a8>)
 80025e0:	4413      	add	r3, r2
 80025e2:	4945      	ldr	r1, [pc, #276]	@ (80026f8 <executeCommandQueue+0x1b8>)
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fd fdf5 	bl	80001d4 <strcmp>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d102      	bne.n	80025f6 <executeCommandQueue+0xb6>
                layerstompUpAndDown();
 80025f0:	f7fe fb8a 	bl	8000d08 <layerstompUpAndDown>
 80025f4:	e06a      	b.n	80026cc <executeCommandQueue+0x18c>
            } else if (!strcmp(commandQueue[j].command, COMMAND_FLICKER_OFF)) {
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4413      	add	r3, r2
 8002602:	4a39      	ldr	r2, [pc, #228]	@ (80026e8 <executeCommandQueue+0x1a8>)
 8002604:	4413      	add	r3, r2
 8002606:	493d      	ldr	r1, [pc, #244]	@ (80026fc <executeCommandQueue+0x1bc>)
 8002608:	4618      	mov	r0, r3
 800260a:	f7fd fde3 	bl	80001d4 <strcmp>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d102      	bne.n	800261a <executeCommandQueue+0xda>
                flickerOff();
 8002614:	f7fe fc74 	bl	8000f00 <flickerOff>
 8002618:	e058      	b.n	80026cc <executeCommandQueue+0x18c>
            } else if (!strcmp(commandQueue[j].command, COMMAND_AROUND_EDGE)) {
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4413      	add	r3, r2
 8002626:	4a30      	ldr	r2, [pc, #192]	@ (80026e8 <executeCommandQueue+0x1a8>)
 8002628:	4413      	add	r3, r2
 800262a:	4935      	ldr	r1, [pc, #212]	@ (8002700 <executeCommandQueue+0x1c0>)
 800262c:	4618      	mov	r0, r3
 800262e:	f7fd fdd1 	bl	80001d4 <strcmp>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d102      	bne.n	800263e <executeCommandQueue+0xfe>
                aroundEdgeDown();
 8002638:	f7fe fc82 	bl	8000f40 <aroundEdgeDown>
 800263c:	e046      	b.n	80026cc <executeCommandQueue+0x18c>
            } else if (!strcmp(commandQueue[j].command, COMMAND_RECTANGLE)) {
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	4413      	add	r3, r2
 800264a:	4a27      	ldr	r2, [pc, #156]	@ (80026e8 <executeCommandQueue+0x1a8>)
 800264c:	4413      	add	r3, r2
 800264e:	492d      	ldr	r1, [pc, #180]	@ (8002704 <executeCommandQueue+0x1c4>)
 8002650:	4618      	mov	r0, r3
 8002652:	f7fd fdbf 	bl	80001d4 <strcmp>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d102      	bne.n	8002662 <executeCommandQueue+0x122>
                diagonalRectangle();
 800265c:	f7fe fdd6 	bl	800120c <diagonalRectangle>
 8002660:	e034      	b.n	80026cc <executeCommandQueue+0x18c>
            } else if (!strcmp(commandQueue[j].command, COMMAND_PROPELLER)) {
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	4a1e      	ldr	r2, [pc, #120]	@ (80026e8 <executeCommandQueue+0x1a8>)
 8002670:	4413      	add	r3, r2
 8002672:	4925      	ldr	r1, [pc, #148]	@ (8002708 <executeCommandQueue+0x1c8>)
 8002674:	4618      	mov	r0, r3
 8002676:	f7fd fdad 	bl	80001d4 <strcmp>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d102      	bne.n	8002686 <executeCommandQueue+0x146>
                propeller();
 8002680:	f7fe ffc0 	bl	8001604 <propeller>
 8002684:	e022      	b.n	80026cc <executeCommandQueue+0x18c>
            } else if (!strcmp(commandQueue[j].command, COMMAND_SPIRAL)) {
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4413      	add	r3, r2
 8002692:	4a15      	ldr	r2, [pc, #84]	@ (80026e8 <executeCommandQueue+0x1a8>)
 8002694:	4413      	add	r3, r2
 8002696:	491d      	ldr	r1, [pc, #116]	@ (800270c <executeCommandQueue+0x1cc>)
 8002698:	4618      	mov	r0, r3
 800269a:	f7fd fd9b 	bl	80001d4 <strcmp>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d102      	bne.n	80026aa <executeCommandQueue+0x16a>
                spiralInAndOut();
 80026a4:	f7ff f910 	bl	80018c8 <spiralInAndOut>
 80026a8:	e010      	b.n	80026cc <executeCommandQueue+0x18c>
            } else if (!strcmp(commandQueue[j].command, COMMAND_ALL_LEDS)) {
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	4413      	add	r3, r2
 80026b6:	4a0c      	ldr	r2, [pc, #48]	@ (80026e8 <executeCommandQueue+0x1a8>)
 80026b8:	4413      	add	r3, r2
 80026ba:	4915      	ldr	r1, [pc, #84]	@ (8002710 <executeCommandQueue+0x1d0>)
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fd fd89 	bl	80001d4 <strcmp>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <executeCommandQueue+0x18c>
                goThroughAllLedsOneAtATime();
 80026c8:	f7ff fc5e 	bl	8001f88 <goThroughAllLedsOneAtATime>
    for (int j = 0; j < commandQueueSize; ++j) {
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3301      	adds	r3, #1
 80026d0:	607b      	str	r3, [r7, #4]
 80026d2:	4b10      	ldr	r3, [pc, #64]	@ (8002714 <executeCommandQueue+0x1d4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	429a      	cmp	r2, r3
 80026da:	f6ff af37 	blt.w	800254c <executeCommandQueue+0xc>
            }
        }
    }
}
 80026de:	bf00      	nop
 80026e0:	bf00      	nop
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20000214 	.word	0x20000214
 80026ec:	0800568c 	.word	0x0800568c
 80026f0:	080056a0 	.word	0x080056a0
 80026f4:	080056b8 	.word	0x080056b8
 80026f8:	080056d4 	.word	0x080056d4
 80026fc:	080056ec 	.word	0x080056ec
 8002700:	08005700 	.word	0x08005700
 8002704:	08005714 	.word	0x08005714
 8002708:	08005728 	.word	0x08005728
 800270c:	0800573c 	.word	0x0800573c
 8002710:	0800574c 	.word	0x0800574c
 8002714:	200003b0 	.word	0x200003b0

08002718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800271c:	f000 fb3c 	bl	8002d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002720:	f000 f848 	bl	80027b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002724:	f000 f928 	bl	8002978 <MX_GPIO_Init>
  MX_TIM3_Init();
 8002728:	f000 f8ae 	bl	8002888 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800272c:	f000 f8fa 	bl	8002924 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &recv_char, 1);
 8002730:	2201      	movs	r2, #1
 8002732:	4918      	ldr	r1, [pc, #96]	@ (8002794 <main+0x7c>)
 8002734:	4818      	ldr	r0, [pc, #96]	@ (8002798 <main+0x80>)
 8002736:	f001 ffcf 	bl	80046d8 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(!strcmp(recv_str, on)){
 800273a:	4b18      	ldr	r3, [pc, #96]	@ (800279c <main+0x84>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4619      	mov	r1, r3
 8002740:	4817      	ldr	r0, [pc, #92]	@ (80027a0 <main+0x88>)
 8002742:	f7fd fd47 	bl	80001d4 <strcmp>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d105      	bne.n	8002758 <main+0x40>
	  		   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 800274c:	2201      	movs	r2, #1
 800274e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002752:	4814      	ldr	r0, [pc, #80]	@ (80027a4 <main+0x8c>)
 8002754:	f000 fede 	bl	8003514 <HAL_GPIO_WritePin>
	  		}
	  		if(!strcmp(recv_str, off)){
 8002758:	4b13      	ldr	r3, [pc, #76]	@ (80027a8 <main+0x90>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4619      	mov	r1, r3
 800275e:	4810      	ldr	r0, [pc, #64]	@ (80027a0 <main+0x88>)
 8002760:	f7fd fd38 	bl	80001d4 <strcmp>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d105      	bne.n	8002776 <main+0x5e>
	  		    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 800276a:	2200      	movs	r2, #0
 800276c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002770:	480c      	ldr	r0, [pc, #48]	@ (80027a4 <main+0x8c>)
 8002772:	f000 fecf 	bl	8003514 <HAL_GPIO_WritePin>
	  	        }
	  		if(interruptOccurred) {
 8002776:	4b0d      	ldr	r3, [pc, #52]	@ (80027ac <main+0x94>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <main+0x74>
	  			interruptOccurred = false;
 8002780:	4b0a      	ldr	r3, [pc, #40]	@ (80027ac <main+0x94>)
 8002782:	2200      	movs	r2, #0
 8002784:	701a      	strb	r2, [r3, #0]
	  			processBluetoothCommands(command);
 8002786:	480a      	ldr	r0, [pc, #40]	@ (80027b0 <main+0x98>)
 8002788:	f7ff fdec 	bl	8002364 <processBluetoothCommands>
	  		}
	 executeCommandQueue();
 800278c:	f7ff fed8 	bl	8002540 <executeCommandQueue>
	  if(!strcmp(recv_str, on)){
 8002790:	e7d3      	b.n	800273a <main+0x22>
 8002792:	bf00      	nop
 8002794:	200001b8 	.word	0x200001b8
 8002798:	20000170 	.word	0x20000170
 800279c:	200000f8 	.word	0x200000f8
 80027a0:	200001bc 	.word	0x200001bc
 80027a4:	40020800 	.word	0x40020800
 80027a8:	200000fc 	.word	0x200000fc
 80027ac:	20000210 	.word	0x20000210
 80027b0:	200001e4 	.word	0x200001e4

080027b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b094      	sub	sp, #80	@ 0x50
 80027b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027ba:	f107 0320 	add.w	r3, r7, #32
 80027be:	2230      	movs	r2, #48	@ 0x30
 80027c0:	2100      	movs	r1, #0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f002 feac 	bl	8005520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027c8:	f107 030c 	add.w	r3, r7, #12
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027d8:	2300      	movs	r3, #0
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	4b28      	ldr	r3, [pc, #160]	@ (8002880 <SystemClock_Config+0xcc>)
 80027de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e0:	4a27      	ldr	r2, [pc, #156]	@ (8002880 <SystemClock_Config+0xcc>)
 80027e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80027e8:	4b25      	ldr	r3, [pc, #148]	@ (8002880 <SystemClock_Config+0xcc>)
 80027ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80027f4:	2300      	movs	r3, #0
 80027f6:	607b      	str	r3, [r7, #4]
 80027f8:	4b22      	ldr	r3, [pc, #136]	@ (8002884 <SystemClock_Config+0xd0>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002800:	4a20      	ldr	r2, [pc, #128]	@ (8002884 <SystemClock_Config+0xd0>)
 8002802:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	4b1e      	ldr	r3, [pc, #120]	@ (8002884 <SystemClock_Config+0xd0>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002810:	607b      	str	r3, [r7, #4]
 8002812:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002814:	2301      	movs	r3, #1
 8002816:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002818:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800281c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800281e:	2302      	movs	r3, #2
 8002820:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002822:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002826:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002828:	2304      	movs	r3, #4
 800282a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800282c:	2354      	movs	r3, #84	@ 0x54
 800282e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002830:	2302      	movs	r3, #2
 8002832:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002834:	2307      	movs	r3, #7
 8002836:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002838:	f107 0320 	add.w	r3, r7, #32
 800283c:	4618      	mov	r0, r3
 800283e:	f000 fe83 	bl	8003548 <HAL_RCC_OscConfig>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002848:	f000 f980 	bl	8002b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800284c:	230f      	movs	r3, #15
 800284e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002850:	2302      	movs	r3, #2
 8002852:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002858:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800285c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002862:	f107 030c 	add.w	r3, r7, #12
 8002866:	2102      	movs	r1, #2
 8002868:	4618      	mov	r0, r3
 800286a:	f001 f8e5 	bl	8003a38 <HAL_RCC_ClockConfig>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002874:	f000 f96a 	bl	8002b4c <Error_Handler>
  }
}
 8002878:	bf00      	nop
 800287a:	3750      	adds	r7, #80	@ 0x50
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40023800 	.word	0x40023800
 8002884:	40007000 	.word	0x40007000

08002888 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800288e:	f107 0308 	add.w	r3, r7, #8
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	605a      	str	r2, [r3, #4]
 8002898:	609a      	str	r2, [r3, #8]
 800289a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800289c:	463b      	mov	r3, r7
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028a4:	4b1d      	ldr	r3, [pc, #116]	@ (800291c <MX_TIM3_Init+0x94>)
 80028a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002920 <MX_TIM3_Init+0x98>)
 80028a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720;
 80028aa:	4b1c      	ldr	r3, [pc, #112]	@ (800291c <MX_TIM3_Init+0x94>)
 80028ac:	f44f 7234 	mov.w	r2, #720	@ 0x2d0
 80028b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b2:	4b1a      	ldr	r3, [pc, #104]	@ (800291c <MX_TIM3_Init+0x94>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 80028b8:	4b18      	ldr	r3, [pc, #96]	@ (800291c <MX_TIM3_Init+0x94>)
 80028ba:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80028be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028c0:	4b16      	ldr	r3, [pc, #88]	@ (800291c <MX_TIM3_Init+0x94>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028c6:	4b15      	ldr	r3, [pc, #84]	@ (800291c <MX_TIM3_Init+0x94>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80028cc:	4813      	ldr	r0, [pc, #76]	@ (800291c <MX_TIM3_Init+0x94>)
 80028ce:	f001 fad3 	bl	8003e78 <HAL_TIM_Base_Init>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80028d8:	f000 f938 	bl	8002b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80028e2:	f107 0308 	add.w	r3, r7, #8
 80028e6:	4619      	mov	r1, r3
 80028e8:	480c      	ldr	r0, [pc, #48]	@ (800291c <MX_TIM3_Init+0x94>)
 80028ea:	f001 fc04 	bl	80040f6 <HAL_TIM_ConfigClockSource>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80028f4:	f000 f92a 	bl	8002b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028f8:	2300      	movs	r3, #0
 80028fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028fc:	2300      	movs	r3, #0
 80028fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002900:	463b      	mov	r3, r7
 8002902:	4619      	mov	r1, r3
 8002904:	4805      	ldr	r0, [pc, #20]	@ (800291c <MX_TIM3_Init+0x94>)
 8002906:	f001 fe15 	bl	8004534 <HAL_TIMEx_MasterConfigSynchronization>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002910:	f000 f91c 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002914:	bf00      	nop
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20000128 	.word	0x20000128
 8002920:	40000400 	.word	0x40000400

08002924 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002928:	4b11      	ldr	r3, [pc, #68]	@ (8002970 <MX_USART1_UART_Init+0x4c>)
 800292a:	4a12      	ldr	r2, [pc, #72]	@ (8002974 <MX_USART1_UART_Init+0x50>)
 800292c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800292e:	4b10      	ldr	r3, [pc, #64]	@ (8002970 <MX_USART1_UART_Init+0x4c>)
 8002930:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002934:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002936:	4b0e      	ldr	r3, [pc, #56]	@ (8002970 <MX_USART1_UART_Init+0x4c>)
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800293c:	4b0c      	ldr	r3, [pc, #48]	@ (8002970 <MX_USART1_UART_Init+0x4c>)
 800293e:	2200      	movs	r2, #0
 8002940:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002942:	4b0b      	ldr	r3, [pc, #44]	@ (8002970 <MX_USART1_UART_Init+0x4c>)
 8002944:	2200      	movs	r2, #0
 8002946:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002948:	4b09      	ldr	r3, [pc, #36]	@ (8002970 <MX_USART1_UART_Init+0x4c>)
 800294a:	220c      	movs	r2, #12
 800294c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800294e:	4b08      	ldr	r3, [pc, #32]	@ (8002970 <MX_USART1_UART_Init+0x4c>)
 8002950:	2200      	movs	r2, #0
 8002952:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002954:	4b06      	ldr	r3, [pc, #24]	@ (8002970 <MX_USART1_UART_Init+0x4c>)
 8002956:	2200      	movs	r2, #0
 8002958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800295a:	4805      	ldr	r0, [pc, #20]	@ (8002970 <MX_USART1_UART_Init+0x4c>)
 800295c:	f001 fe6c 	bl	8004638 <HAL_UART_Init>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002966:	f000 f8f1 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000170 	.word	0x20000170
 8002974:	40011000 	.word	0x40011000

08002978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08a      	sub	sp, #40	@ 0x28
 800297c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297e:	f107 0314 	add.w	r3, r7, #20
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	605a      	str	r2, [r3, #4]
 8002988:	609a      	str	r2, [r3, #8]
 800298a:	60da      	str	r2, [r3, #12]
 800298c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	4b43      	ldr	r3, [pc, #268]	@ (8002aa0 <MX_GPIO_Init+0x128>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002996:	4a42      	ldr	r2, [pc, #264]	@ (8002aa0 <MX_GPIO_Init+0x128>)
 8002998:	f043 0304 	orr.w	r3, r3, #4
 800299c:	6313      	str	r3, [r2, #48]	@ 0x30
 800299e:	4b40      	ldr	r3, [pc, #256]	@ (8002aa0 <MX_GPIO_Init+0x128>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	613b      	str	r3, [r7, #16]
 80029a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	4b3c      	ldr	r3, [pc, #240]	@ (8002aa0 <MX_GPIO_Init+0x128>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b2:	4a3b      	ldr	r2, [pc, #236]	@ (8002aa0 <MX_GPIO_Init+0x128>)
 80029b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ba:	4b39      	ldr	r3, [pc, #228]	@ (8002aa0 <MX_GPIO_Init+0x128>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	4b35      	ldr	r3, [pc, #212]	@ (8002aa0 <MX_GPIO_Init+0x128>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ce:	4a34      	ldr	r2, [pc, #208]	@ (8002aa0 <MX_GPIO_Init+0x128>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029d6:	4b32      	ldr	r3, [pc, #200]	@ (8002aa0 <MX_GPIO_Init+0x128>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	60bb      	str	r3, [r7, #8]
 80029e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	607b      	str	r3, [r7, #4]
 80029e6:	4b2e      	ldr	r3, [pc, #184]	@ (8002aa0 <MX_GPIO_Init+0x128>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ea:	4a2d      	ldr	r2, [pc, #180]	@ (8002aa0 <MX_GPIO_Init+0x128>)
 80029ec:	f043 0302 	orr.w	r3, r3, #2
 80029f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029f2:	4b2b      	ldr	r3, [pc, #172]	@ (8002aa0 <MX_GPIO_Init+0x128>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	607b      	str	r3, [r7, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PIN11_Pin|PIN12_Pin|PIN31_Pin|PIN13_Pin
 80029fe:	2200      	movs	r2, #0
 8002a00:	f240 11e3 	movw	r1, #483	@ 0x1e3
 8002a04:	4827      	ldr	r0, [pc, #156]	@ (8002aa4 <MX_GPIO_Init+0x12c>)
 8002a06:	f000 fd85 	bl	8003514 <HAL_GPIO_WritePin>
                          |PIN32_Pin|LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LAYER1_Pin|LAYER2_Pin|LAYER3_Pin|PIN42_Pin
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f240 11f3 	movw	r1, #499	@ 0x1f3
 8002a10:	4825      	ldr	r0, [pc, #148]	@ (8002aa8 <MX_GPIO_Init+0x130>)
 8002a12:	f000 fd7f 	bl	8003514 <HAL_GPIO_WritePin>
                          |PIN41_Pin|PIN34_Pin|PIN24_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LAYER4_Pin|PIN23_Pin|PIN14_Pin|PIN22_Pin
 8002a16:	2200      	movs	r2, #0
 8002a18:	f240 7179 	movw	r1, #1913	@ 0x779
 8002a1c:	4823      	ldr	r0, [pc, #140]	@ (8002aac <MX_GPIO_Init+0x134>)
 8002a1e:	f000 fd79 	bl	8003514 <HAL_GPIO_WritePin>
                          |PIN21_Pin|PIN33_Pin|PIN44_Pin|PIN43_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a28:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a32:	f107 0314 	add.w	r3, r7, #20
 8002a36:	4619      	mov	r1, r3
 8002a38:	481a      	ldr	r0, [pc, #104]	@ (8002aa4 <MX_GPIO_Init+0x12c>)
 8002a3a:	f000 fbe7 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN11_Pin PIN12_Pin PIN31_Pin PIN13_Pin
                           PIN32_Pin LED_Pin */
  GPIO_InitStruct.Pin = PIN11_Pin|PIN12_Pin|PIN31_Pin|PIN13_Pin
 8002a3e:	f240 13e3 	movw	r3, #483	@ 0x1e3
 8002a42:	617b      	str	r3, [r7, #20]
                          |PIN32_Pin|LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a44:	2301      	movs	r3, #1
 8002a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a50:	f107 0314 	add.w	r3, r7, #20
 8002a54:	4619      	mov	r1, r3
 8002a56:	4813      	ldr	r0, [pc, #76]	@ (8002aa4 <MX_GPIO_Init+0x12c>)
 8002a58:	f000 fbd8 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pins : LAYER1_Pin LAYER2_Pin LAYER3_Pin PIN42_Pin
                           PIN41_Pin PIN34_Pin PIN24_Pin */
  GPIO_InitStruct.Pin = LAYER1_Pin|LAYER2_Pin|LAYER3_Pin|PIN42_Pin
 8002a5c:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8002a60:	617b      	str	r3, [r7, #20]
                          |PIN41_Pin|PIN34_Pin|PIN24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a62:	2301      	movs	r3, #1
 8002a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6e:	f107 0314 	add.w	r3, r7, #20
 8002a72:	4619      	mov	r1, r3
 8002a74:	480c      	ldr	r0, [pc, #48]	@ (8002aa8 <MX_GPIO_Init+0x130>)
 8002a76:	f000 fbc9 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pins : LAYER4_Pin PIN23_Pin PIN14_Pin PIN22_Pin
                           PIN21_Pin PIN33_Pin PIN44_Pin PIN43_Pin */
  GPIO_InitStruct.Pin = LAYER4_Pin|PIN23_Pin|PIN14_Pin|PIN22_Pin
 8002a7a:	f240 7379 	movw	r3, #1913	@ 0x779
 8002a7e:	617b      	str	r3, [r7, #20]
                          |PIN21_Pin|PIN33_Pin|PIN44_Pin|PIN43_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a80:	2301      	movs	r3, #1
 8002a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a8c:	f107 0314 	add.w	r3, r7, #20
 8002a90:	4619      	mov	r1, r3
 8002a92:	4806      	ldr	r0, [pc, #24]	@ (8002aac <MX_GPIO_Init+0x134>)
 8002a94:	f000 fbba 	bl	800320c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a98:	bf00      	nop
 8002a9a:	3728      	adds	r7, #40	@ 0x28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40020800 	.word	0x40020800
 8002aa8:	40020000 	.word	0x40020000
 8002aac:	40020400 	.word	0x40020400

08002ab0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002ab0:	b5b0      	push	{r4, r5, r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1 ){
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a1c      	ldr	r2, [pc, #112]	@ (8002b30 <HAL_UART_RxCpltCallback+0x80>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d132      	bne.n	8002b28 <HAL_UART_RxCpltCallback+0x78>
        if(recv_char == '\r'){
 8002ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8002b34 <HAL_UART_RxCpltCallback+0x84>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b0d      	cmp	r3, #13
 8002ac8:	d11c      	bne.n	8002b04 <HAL_UART_RxCpltCallback+0x54>
        memset(command, 0, sizeof(command));
 8002aca:	2228      	movs	r2, #40	@ 0x28
 8002acc:	2100      	movs	r1, #0
 8002ace:	481a      	ldr	r0, [pc, #104]	@ (8002b38 <HAL_UART_RxCpltCallback+0x88>)
 8002ad0:	f002 fd26 	bl	8005520 <memset>
        memcpy(command, recv_str, sizeof(recv_str));
 8002ad4:	4a18      	ldr	r2, [pc, #96]	@ (8002b38 <HAL_UART_RxCpltCallback+0x88>)
 8002ad6:	4b19      	ldr	r3, [pc, #100]	@ (8002b3c <HAL_UART_RxCpltCallback+0x8c>)
 8002ad8:	4614      	mov	r4, r2
 8002ada:	461d      	mov	r5, r3
 8002adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ae4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002ae8:	e884 0003 	stmia.w	r4, {r0, r1}
		memset(recv_str, 0, sizeof(recv_str));
 8002aec:	2228      	movs	r2, #40	@ 0x28
 8002aee:	2100      	movs	r1, #0
 8002af0:	4812      	ldr	r0, [pc, #72]	@ (8002b3c <HAL_UART_RxCpltCallback+0x8c>)
 8002af2:	f002 fd15 	bl	8005520 <memset>
		i=0;
 8002af6:	4b12      	ldr	r3, [pc, #72]	@ (8002b40 <HAL_UART_RxCpltCallback+0x90>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
		interruptOccurred = true;
 8002afc:	4b11      	ldr	r3, [pc, #68]	@ (8002b44 <HAL_UART_RxCpltCallback+0x94>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	701a      	strb	r2, [r3, #0]
 8002b02:	e00c      	b.n	8002b1e <HAL_UART_RxCpltCallback+0x6e>
		}else{
		    if(recv_char != '\n'){
 8002b04:	4b0b      	ldr	r3, [pc, #44]	@ (8002b34 <HAL_UART_RxCpltCallback+0x84>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b0a      	cmp	r3, #10
 8002b0a:	d008      	beq.n	8002b1e <HAL_UART_RxCpltCallback+0x6e>
		    	recv_str[i++] = recv_char;
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b40 <HAL_UART_RxCpltCallback+0x90>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	490b      	ldr	r1, [pc, #44]	@ (8002b40 <HAL_UART_RxCpltCallback+0x90>)
 8002b14:	600a      	str	r2, [r1, #0]
 8002b16:	4a07      	ldr	r2, [pc, #28]	@ (8002b34 <HAL_UART_RxCpltCallback+0x84>)
 8002b18:	7811      	ldrb	r1, [r2, #0]
 8002b1a:	4a08      	ldr	r2, [pc, #32]	@ (8002b3c <HAL_UART_RxCpltCallback+0x8c>)
 8002b1c:	54d1      	strb	r1, [r2, r3]
		}
	 }
	 HAL_UART_Receive_IT(&huart1, &recv_char, 1); //UART1 Interrupt call
 8002b1e:	2201      	movs	r2, #1
 8002b20:	4904      	ldr	r1, [pc, #16]	@ (8002b34 <HAL_UART_RxCpltCallback+0x84>)
 8002b22:	4809      	ldr	r0, [pc, #36]	@ (8002b48 <HAL_UART_RxCpltCallback+0x98>)
 8002b24:	f001 fdd8 	bl	80046d8 <HAL_UART_Receive_IT>

    }
}
 8002b28:	bf00      	nop
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bdb0      	pop	{r4, r5, r7, pc}
 8002b30:	40011000 	.word	0x40011000
 8002b34:	200001b8 	.word	0x200001b8
 8002b38:	200001e4 	.word	0x200001e4
 8002b3c:	200001bc 	.word	0x200001bc
 8002b40:	2000020c 	.word	0x2000020c
 8002b44:	20000210 	.word	0x20000210
 8002b48:	20000170 	.word	0x20000170

08002b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b50:	b672      	cpsid	i
}
 8002b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b54:	bf00      	nop
 8002b56:	e7fd      	b.n	8002b54 <Error_Handler+0x8>

08002b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	4b10      	ldr	r3, [pc, #64]	@ (8002ba4 <HAL_MspInit+0x4c>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b66:	4a0f      	ldr	r2, [pc, #60]	@ (8002ba4 <HAL_MspInit+0x4c>)
 8002b68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba4 <HAL_MspInit+0x4c>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b76:	607b      	str	r3, [r7, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	603b      	str	r3, [r7, #0]
 8002b7e:	4b09      	ldr	r3, [pc, #36]	@ (8002ba4 <HAL_MspInit+0x4c>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b82:	4a08      	ldr	r2, [pc, #32]	@ (8002ba4 <HAL_MspInit+0x4c>)
 8002b84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b88:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ba4 <HAL_MspInit+0x4c>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002b96:	2007      	movs	r0, #7
 8002b98:	f000 fa64 	bl	8003064 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b9c:	bf00      	nop
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40023800 	.word	0x40023800

08002ba8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a0e      	ldr	r2, [pc, #56]	@ (8002bf0 <HAL_TIM_Base_MspInit+0x48>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d115      	bne.n	8002be6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf4 <HAL_TIM_Base_MspInit+0x4c>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc2:	4a0c      	ldr	r2, [pc, #48]	@ (8002bf4 <HAL_TIM_Base_MspInit+0x4c>)
 8002bc4:	f043 0302 	orr.w	r3, r3, #2
 8002bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bca:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf4 <HAL_TIM_Base_MspInit+0x4c>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2100      	movs	r1, #0
 8002bda:	201d      	movs	r0, #29
 8002bdc:	f000 fa4d 	bl	800307a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002be0:	201d      	movs	r0, #29
 8002be2:	f000 fa66 	bl	80030b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002be6:	bf00      	nop
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40000400 	.word	0x40000400
 8002bf4:	40023800 	.word	0x40023800

08002bf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08a      	sub	sp, #40	@ 0x28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c00:	f107 0314 	add.w	r3, r7, #20
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a1d      	ldr	r2, [pc, #116]	@ (8002c8c <HAL_UART_MspInit+0x94>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d134      	bne.n	8002c84 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8002c90 <HAL_UART_MspInit+0x98>)
 8002c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c22:	4a1b      	ldr	r2, [pc, #108]	@ (8002c90 <HAL_UART_MspInit+0x98>)
 8002c24:	f043 0310 	orr.w	r3, r3, #16
 8002c28:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c2a:	4b19      	ldr	r3, [pc, #100]	@ (8002c90 <HAL_UART_MspInit+0x98>)
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2e:	f003 0310 	and.w	r3, r3, #16
 8002c32:	613b      	str	r3, [r7, #16]
 8002c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	4b15      	ldr	r3, [pc, #84]	@ (8002c90 <HAL_UART_MspInit+0x98>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3e:	4a14      	ldr	r2, [pc, #80]	@ (8002c90 <HAL_UART_MspInit+0x98>)
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c46:	4b12      	ldr	r3, [pc, #72]	@ (8002c90 <HAL_UART_MspInit+0x98>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c52:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c60:	2303      	movs	r3, #3
 8002c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c64:	2307      	movs	r3, #7
 8002c66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c68:	f107 0314 	add.w	r3, r7, #20
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4809      	ldr	r0, [pc, #36]	@ (8002c94 <HAL_UART_MspInit+0x9c>)
 8002c70:	f000 facc 	bl	800320c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c74:	2200      	movs	r2, #0
 8002c76:	2100      	movs	r1, #0
 8002c78:	2025      	movs	r0, #37	@ 0x25
 8002c7a:	f000 f9fe 	bl	800307a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c7e:	2025      	movs	r0, #37	@ 0x25
 8002c80:	f000 fa17 	bl	80030b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c84:	bf00      	nop
 8002c86:	3728      	adds	r7, #40	@ 0x28
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40011000 	.word	0x40011000
 8002c90:	40023800 	.word	0x40023800
 8002c94:	40020000 	.word	0x40020000

08002c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c9c:	bf00      	nop
 8002c9e:	e7fd      	b.n	8002c9c <NMI_Handler+0x4>

08002ca0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ca4:	bf00      	nop
 8002ca6:	e7fd      	b.n	8002ca4 <HardFault_Handler+0x4>

08002ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cac:	bf00      	nop
 8002cae:	e7fd      	b.n	8002cac <MemManage_Handler+0x4>

08002cb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cb4:	bf00      	nop
 8002cb6:	e7fd      	b.n	8002cb4 <BusFault_Handler+0x4>

08002cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cbc:	bf00      	nop
 8002cbe:	e7fd      	b.n	8002cbc <UsageFault_Handler+0x4>

08002cc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cee:	f000 f8a5 	bl	8002e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002cfc:	4802      	ldr	r0, [pc, #8]	@ (8002d08 <TIM3_IRQHandler+0x10>)
 8002cfe:	f001 f90a 	bl	8003f16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000128 	.word	0x20000128

08002d0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d10:	4802      	ldr	r0, [pc, #8]	@ (8002d1c <USART1_IRQHandler+0x10>)
 8002d12:	f001 fd07 	bl	8004724 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d16:	bf00      	nop
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20000170 	.word	0x20000170

08002d20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d24:	4b06      	ldr	r3, [pc, #24]	@ (8002d40 <SystemInit+0x20>)
 8002d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d2a:	4a05      	ldr	r2, [pc, #20]	@ (8002d40 <SystemInit+0x20>)
 8002d2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002d48:	f7ff ffea 	bl	8002d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d4c:	480c      	ldr	r0, [pc, #48]	@ (8002d80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d4e:	490d      	ldr	r1, [pc, #52]	@ (8002d84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d50:	4a0d      	ldr	r2, [pc, #52]	@ (8002d88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d54:	e002      	b.n	8002d5c <LoopCopyDataInit>

08002d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d5a:	3304      	adds	r3, #4

08002d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d60:	d3f9      	bcc.n	8002d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d62:	4a0a      	ldr	r2, [pc, #40]	@ (8002d8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d64:	4c0a      	ldr	r4, [pc, #40]	@ (8002d90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d68:	e001      	b.n	8002d6e <LoopFillZerobss>

08002d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d6c:	3204      	adds	r2, #4

08002d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d70:	d3fb      	bcc.n	8002d6a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002d72:	f002 fbf3 	bl	800555c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d76:	f7ff fccf 	bl	8002718 <main>
  bx  lr    
 8002d7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d7c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d84:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8002d88:	08005788 	.word	0x08005788
  ldr r2, =_sbss
 8002d8c:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8002d90:	200003b8 	.word	0x200003b8

08002d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d94:	e7fe      	b.n	8002d94 <ADC_IRQHandler>
	...

08002d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd8 <HAL_Init+0x40>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a0d      	ldr	r2, [pc, #52]	@ (8002dd8 <HAL_Init+0x40>)
 8002da2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002da8:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd8 <HAL_Init+0x40>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd8 <HAL_Init+0x40>)
 8002dae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002db4:	4b08      	ldr	r3, [pc, #32]	@ (8002dd8 <HAL_Init+0x40>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a07      	ldr	r2, [pc, #28]	@ (8002dd8 <HAL_Init+0x40>)
 8002dba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dc0:	2003      	movs	r0, #3
 8002dc2:	f000 f94f 	bl	8003064 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	f000 f808 	bl	8002ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dcc:	f7ff fec4 	bl	8002b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40023c00 	.word	0x40023c00

08002ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002de4:	4b12      	ldr	r3, [pc, #72]	@ (8002e30 <HAL_InitTick+0x54>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	4b12      	ldr	r3, [pc, #72]	@ (8002e34 <HAL_InitTick+0x58>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	4619      	mov	r1, r3
 8002dee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 f967 	bl	80030ce <HAL_SYSTICK_Config>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e00e      	b.n	8002e28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b0f      	cmp	r3, #15
 8002e0e:	d80a      	bhi.n	8002e26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e10:	2200      	movs	r2, #0
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	f04f 30ff 	mov.w	r0, #4294967295
 8002e18:	f000 f92f 	bl	800307a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e1c:	4a06      	ldr	r2, [pc, #24]	@ (8002e38 <HAL_InitTick+0x5c>)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
 8002e24:	e000      	b.n	8002e28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	20000100 	.word	0x20000100
 8002e34:	20000108 	.word	0x20000108
 8002e38:	20000104 	.word	0x20000104

08002e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e40:	4b06      	ldr	r3, [pc, #24]	@ (8002e5c <HAL_IncTick+0x20>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	4b06      	ldr	r3, [pc, #24]	@ (8002e60 <HAL_IncTick+0x24>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	4a04      	ldr	r2, [pc, #16]	@ (8002e60 <HAL_IncTick+0x24>)
 8002e4e:	6013      	str	r3, [r2, #0]
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	20000108 	.word	0x20000108
 8002e60:	200003b4 	.word	0x200003b4

08002e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return uwTick;
 8002e68:	4b03      	ldr	r3, [pc, #12]	@ (8002e78 <HAL_GetTick+0x14>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	200003b4 	.word	0x200003b4

08002e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e84:	f7ff ffee 	bl	8002e64 <HAL_GetTick>
 8002e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e94:	d005      	beq.n	8002ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e96:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec0 <HAL_Delay+0x44>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ea2:	bf00      	nop
 8002ea4:	f7ff ffde 	bl	8002e64 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d8f7      	bhi.n	8002ea4 <HAL_Delay+0x28>
  {
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20000108 	.word	0x20000108

08002ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f08 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ef6:	4a04      	ldr	r2, [pc, #16]	@ (8002f08 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	60d3      	str	r3, [r2, #12]
}
 8002efc:	bf00      	nop
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f10:	4b04      	ldr	r3, [pc, #16]	@ (8002f24 <__NVIC_GetPriorityGrouping+0x18>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	0a1b      	lsrs	r3, r3, #8
 8002f16:	f003 0307 	and.w	r3, r3, #7
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	db0b      	blt.n	8002f52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	f003 021f 	and.w	r2, r3, #31
 8002f40:	4907      	ldr	r1, [pc, #28]	@ (8002f60 <__NVIC_EnableIRQ+0x38>)
 8002f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	2001      	movs	r0, #1
 8002f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	e000e100 	.word	0xe000e100

08002f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	6039      	str	r1, [r7, #0]
 8002f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	db0a      	blt.n	8002f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	490c      	ldr	r1, [pc, #48]	@ (8002fb0 <__NVIC_SetPriority+0x4c>)
 8002f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f82:	0112      	lsls	r2, r2, #4
 8002f84:	b2d2      	uxtb	r2, r2
 8002f86:	440b      	add	r3, r1
 8002f88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f8c:	e00a      	b.n	8002fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	4908      	ldr	r1, [pc, #32]	@ (8002fb4 <__NVIC_SetPriority+0x50>)
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	3b04      	subs	r3, #4
 8002f9c:	0112      	lsls	r2, r2, #4
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	761a      	strb	r2, [r3, #24]
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	e000e100 	.word	0xe000e100
 8002fb4:	e000ed00 	.word	0xe000ed00

08002fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b089      	sub	sp, #36	@ 0x24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f1c3 0307 	rsb	r3, r3, #7
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	bf28      	it	cs
 8002fd6:	2304      	movcs	r3, #4
 8002fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3304      	adds	r3, #4
 8002fde:	2b06      	cmp	r3, #6
 8002fe0:	d902      	bls.n	8002fe8 <NVIC_EncodePriority+0x30>
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	3b03      	subs	r3, #3
 8002fe6:	e000      	b.n	8002fea <NVIC_EncodePriority+0x32>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fec:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43da      	mvns	r2, r3
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	401a      	ands	r2, r3
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003000:	f04f 31ff 	mov.w	r1, #4294967295
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	fa01 f303 	lsl.w	r3, r1, r3
 800300a:	43d9      	mvns	r1, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003010:	4313      	orrs	r3, r2
         );
}
 8003012:	4618      	mov	r0, r3
 8003014:	3724      	adds	r7, #36	@ 0x24
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
	...

08003020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3b01      	subs	r3, #1
 800302c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003030:	d301      	bcc.n	8003036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003032:	2301      	movs	r3, #1
 8003034:	e00f      	b.n	8003056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003036:	4a0a      	ldr	r2, [pc, #40]	@ (8003060 <SysTick_Config+0x40>)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3b01      	subs	r3, #1
 800303c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800303e:	210f      	movs	r1, #15
 8003040:	f04f 30ff 	mov.w	r0, #4294967295
 8003044:	f7ff ff8e 	bl	8002f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003048:	4b05      	ldr	r3, [pc, #20]	@ (8003060 <SysTick_Config+0x40>)
 800304a:	2200      	movs	r2, #0
 800304c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800304e:	4b04      	ldr	r3, [pc, #16]	@ (8003060 <SysTick_Config+0x40>)
 8003050:	2207      	movs	r2, #7
 8003052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	e000e010 	.word	0xe000e010

08003064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7ff ff29 	bl	8002ec4 <__NVIC_SetPriorityGrouping>
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800307a:	b580      	push	{r7, lr}
 800307c:	b086      	sub	sp, #24
 800307e:	af00      	add	r7, sp, #0
 8003080:	4603      	mov	r3, r0
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]
 8003086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800308c:	f7ff ff3e 	bl	8002f0c <__NVIC_GetPriorityGrouping>
 8003090:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	68b9      	ldr	r1, [r7, #8]
 8003096:	6978      	ldr	r0, [r7, #20]
 8003098:	f7ff ff8e 	bl	8002fb8 <NVIC_EncodePriority>
 800309c:	4602      	mov	r2, r0
 800309e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030a2:	4611      	mov	r1, r2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff ff5d 	bl	8002f64 <__NVIC_SetPriority>
}
 80030aa:	bf00      	nop
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	4603      	mov	r3, r0
 80030ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff ff31 	bl	8002f28 <__NVIC_EnableIRQ>
}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7ff ffa2 	bl	8003020 <SysTick_Config>
 80030dc:	4603      	mov	r3, r0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b084      	sub	sp, #16
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030f4:	f7ff feb6 	bl	8002e64 <HAL_GetTick>
 80030f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d008      	beq.n	8003118 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2280      	movs	r2, #128	@ 0x80
 800310a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e052      	b.n	80031be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0216 	bic.w	r2, r2, #22
 8003126:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695a      	ldr	r2, [r3, #20]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003136:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313c:	2b00      	cmp	r3, #0
 800313e:	d103      	bne.n	8003148 <HAL_DMA_Abort+0x62>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003144:	2b00      	cmp	r3, #0
 8003146:	d007      	beq.n	8003158 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0208 	bic.w	r2, r2, #8
 8003156:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0201 	bic.w	r2, r2, #1
 8003166:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003168:	e013      	b.n	8003192 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800316a:	f7ff fe7b 	bl	8002e64 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b05      	cmp	r3, #5
 8003176:	d90c      	bls.n	8003192 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2220      	movs	r2, #32
 800317c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2203      	movs	r2, #3
 8003182:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e015      	b.n	80031be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1e4      	bne.n	800316a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a4:	223f      	movs	r2, #63	@ 0x3f
 80031a6:	409a      	lsls	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d004      	beq.n	80031e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2280      	movs	r2, #128	@ 0x80
 80031de:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e00c      	b.n	80031fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2205      	movs	r2, #5
 80031e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0201 	bic.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
	...

0800320c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800320c:	b480      	push	{r7}
 800320e:	b089      	sub	sp, #36	@ 0x24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003216:	2300      	movs	r3, #0
 8003218:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800321a:	2300      	movs	r3, #0
 800321c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800321e:	2300      	movs	r3, #0
 8003220:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003222:	2300      	movs	r3, #0
 8003224:	61fb      	str	r3, [r7, #28]
 8003226:	e159      	b.n	80034dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003228:	2201      	movs	r2, #1
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	4013      	ands	r3, r2
 800323a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	429a      	cmp	r2, r3
 8003242:	f040 8148 	bne.w	80034d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	2b01      	cmp	r3, #1
 8003250:	d005      	beq.n	800325e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800325a:	2b02      	cmp	r3, #2
 800325c:	d130      	bne.n	80032c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	2203      	movs	r2, #3
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	43db      	mvns	r3, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4013      	ands	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4313      	orrs	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003294:	2201      	movs	r2, #1
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4013      	ands	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	091b      	lsrs	r3, r3, #4
 80032aa:	f003 0201 	and.w	r2, r3, #1
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 0303 	and.w	r3, r3, #3
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d017      	beq.n	80032fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	2203      	movs	r2, #3
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	43db      	mvns	r3, r3
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4013      	ands	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 0303 	and.w	r3, r3, #3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d123      	bne.n	8003350 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	08da      	lsrs	r2, r3, #3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3208      	adds	r2, #8
 8003310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003314:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	220f      	movs	r2, #15
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4313      	orrs	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	08da      	lsrs	r2, r3, #3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3208      	adds	r2, #8
 800334a:	69b9      	ldr	r1, [r7, #24]
 800334c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	2203      	movs	r2, #3
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	43db      	mvns	r3, r3
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4013      	ands	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f003 0203 	and.w	r2, r3, #3
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 80a2 	beq.w	80034d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	4b57      	ldr	r3, [pc, #348]	@ (80034f4 <HAL_GPIO_Init+0x2e8>)
 8003398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339a:	4a56      	ldr	r2, [pc, #344]	@ (80034f4 <HAL_GPIO_Init+0x2e8>)
 800339c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80033a2:	4b54      	ldr	r3, [pc, #336]	@ (80034f4 <HAL_GPIO_Init+0x2e8>)
 80033a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033ae:	4a52      	ldr	r2, [pc, #328]	@ (80034f8 <HAL_GPIO_Init+0x2ec>)
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	089b      	lsrs	r3, r3, #2
 80033b4:	3302      	adds	r3, #2
 80033b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	220f      	movs	r2, #15
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43db      	mvns	r3, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4013      	ands	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a49      	ldr	r2, [pc, #292]	@ (80034fc <HAL_GPIO_Init+0x2f0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d019      	beq.n	800340e <HAL_GPIO_Init+0x202>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a48      	ldr	r2, [pc, #288]	@ (8003500 <HAL_GPIO_Init+0x2f4>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d013      	beq.n	800340a <HAL_GPIO_Init+0x1fe>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a47      	ldr	r2, [pc, #284]	@ (8003504 <HAL_GPIO_Init+0x2f8>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00d      	beq.n	8003406 <HAL_GPIO_Init+0x1fa>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a46      	ldr	r2, [pc, #280]	@ (8003508 <HAL_GPIO_Init+0x2fc>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d007      	beq.n	8003402 <HAL_GPIO_Init+0x1f6>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a45      	ldr	r2, [pc, #276]	@ (800350c <HAL_GPIO_Init+0x300>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d101      	bne.n	80033fe <HAL_GPIO_Init+0x1f2>
 80033fa:	2304      	movs	r3, #4
 80033fc:	e008      	b.n	8003410 <HAL_GPIO_Init+0x204>
 80033fe:	2307      	movs	r3, #7
 8003400:	e006      	b.n	8003410 <HAL_GPIO_Init+0x204>
 8003402:	2303      	movs	r3, #3
 8003404:	e004      	b.n	8003410 <HAL_GPIO_Init+0x204>
 8003406:	2302      	movs	r3, #2
 8003408:	e002      	b.n	8003410 <HAL_GPIO_Init+0x204>
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <HAL_GPIO_Init+0x204>
 800340e:	2300      	movs	r3, #0
 8003410:	69fa      	ldr	r2, [r7, #28]
 8003412:	f002 0203 	and.w	r2, r2, #3
 8003416:	0092      	lsls	r2, r2, #2
 8003418:	4093      	lsls	r3, r2
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4313      	orrs	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003420:	4935      	ldr	r1, [pc, #212]	@ (80034f8 <HAL_GPIO_Init+0x2ec>)
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	089b      	lsrs	r3, r3, #2
 8003426:	3302      	adds	r3, #2
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800342e:	4b38      	ldr	r3, [pc, #224]	@ (8003510 <HAL_GPIO_Init+0x304>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	43db      	mvns	r3, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4013      	ands	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003452:	4a2f      	ldr	r2, [pc, #188]	@ (8003510 <HAL_GPIO_Init+0x304>)
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003458:	4b2d      	ldr	r3, [pc, #180]	@ (8003510 <HAL_GPIO_Init+0x304>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	43db      	mvns	r3, r3
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4013      	ands	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800347c:	4a24      	ldr	r2, [pc, #144]	@ (8003510 <HAL_GPIO_Init+0x304>)
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003482:	4b23      	ldr	r3, [pc, #140]	@ (8003510 <HAL_GPIO_Init+0x304>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	43db      	mvns	r3, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4013      	ands	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003510 <HAL_GPIO_Init+0x304>)
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034ac:	4b18      	ldr	r3, [pc, #96]	@ (8003510 <HAL_GPIO_Init+0x304>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	43db      	mvns	r3, r3
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4013      	ands	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034d0:	4a0f      	ldr	r2, [pc, #60]	@ (8003510 <HAL_GPIO_Init+0x304>)
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	3301      	adds	r3, #1
 80034da:	61fb      	str	r3, [r7, #28]
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	2b0f      	cmp	r3, #15
 80034e0:	f67f aea2 	bls.w	8003228 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034e4:	bf00      	nop
 80034e6:	bf00      	nop
 80034e8:	3724      	adds	r7, #36	@ 0x24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40023800 	.word	0x40023800
 80034f8:	40013800 	.word	0x40013800
 80034fc:	40020000 	.word	0x40020000
 8003500:	40020400 	.word	0x40020400
 8003504:	40020800 	.word	0x40020800
 8003508:	40020c00 	.word	0x40020c00
 800350c:	40021000 	.word	0x40021000
 8003510:	40013c00 	.word	0x40013c00

08003514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	807b      	strh	r3, [r7, #2]
 8003520:	4613      	mov	r3, r2
 8003522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003524:	787b      	ldrb	r3, [r7, #1]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800352a:	887a      	ldrh	r2, [r7, #2]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003530:	e003      	b.n	800353a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003532:	887b      	ldrh	r3, [r7, #2]
 8003534:	041a      	lsls	r2, r3, #16
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	619a      	str	r2, [r3, #24]
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
	...

08003548 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e267      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d075      	beq.n	8003652 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003566:	4b88      	ldr	r3, [pc, #544]	@ (8003788 <HAL_RCC_OscConfig+0x240>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 030c 	and.w	r3, r3, #12
 800356e:	2b04      	cmp	r3, #4
 8003570:	d00c      	beq.n	800358c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003572:	4b85      	ldr	r3, [pc, #532]	@ (8003788 <HAL_RCC_OscConfig+0x240>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800357a:	2b08      	cmp	r3, #8
 800357c:	d112      	bne.n	80035a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800357e:	4b82      	ldr	r3, [pc, #520]	@ (8003788 <HAL_RCC_OscConfig+0x240>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003586:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800358a:	d10b      	bne.n	80035a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800358c:	4b7e      	ldr	r3, [pc, #504]	@ (8003788 <HAL_RCC_OscConfig+0x240>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d05b      	beq.n	8003650 <HAL_RCC_OscConfig+0x108>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d157      	bne.n	8003650 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e242      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035ac:	d106      	bne.n	80035bc <HAL_RCC_OscConfig+0x74>
 80035ae:	4b76      	ldr	r3, [pc, #472]	@ (8003788 <HAL_RCC_OscConfig+0x240>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a75      	ldr	r2, [pc, #468]	@ (8003788 <HAL_RCC_OscConfig+0x240>)
 80035b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	e01d      	b.n	80035f8 <HAL_RCC_OscConfig+0xb0>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035c4:	d10c      	bne.n	80035e0 <HAL_RCC_OscConfig+0x98>
 80035c6:	4b70      	ldr	r3, [pc, #448]	@ (8003788 <HAL_RCC_OscConfig+0x240>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a6f      	ldr	r2, [pc, #444]	@ (8003788 <HAL_RCC_OscConfig+0x240>)
 80035cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003788 <HAL_RCC_OscConfig+0x240>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a6c      	ldr	r2, [pc, #432]	@ (8003788 <HAL_RCC_OscConfig+0x240>)
 80035d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	e00b      	b.n	80035f8 <HAL_RCC_OscConfig+0xb0>
 80035e0:	4b69      	ldr	r3, [pc, #420]	@ (8003788 <HAL_RCC_OscConfig+0x240>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a68      	ldr	r2, [pc, #416]	@ (8003788 <HAL_RCC_OscConfig+0x240>)
 80035e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035ea:	6013      	str	r3, [r2, #0]
 80035ec:	4b66      	ldr	r3, [pc, #408]	@ (8003788 <HAL_RCC_OscConfig+0x240>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a65      	ldr	r2, [pc, #404]	@ (8003788 <HAL_RCC_OscConfig+0x240>)
 80035f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d013      	beq.n	8003628 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003600:	f7ff fc30 	bl	8002e64 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003608:	f7ff fc2c 	bl	8002e64 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b64      	cmp	r3, #100	@ 0x64
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e207      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361a:	4b5b      	ldr	r3, [pc, #364]	@ (8003788 <HAL_RCC_OscConfig+0x240>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f0      	beq.n	8003608 <HAL_RCC_OscConfig+0xc0>
 8003626:	e014      	b.n	8003652 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003628:	f7ff fc1c 	bl	8002e64 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003630:	f7ff fc18 	bl	8002e64 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b64      	cmp	r3, #100	@ 0x64
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e1f3      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003642:	4b51      	ldr	r3, [pc, #324]	@ (8003788 <HAL_RCC_OscConfig+0x240>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f0      	bne.n	8003630 <HAL_RCC_OscConfig+0xe8>
 800364e:	e000      	b.n	8003652 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d063      	beq.n	8003726 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800365e:	4b4a      	ldr	r3, [pc, #296]	@ (8003788 <HAL_RCC_OscConfig+0x240>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00b      	beq.n	8003682 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800366a:	4b47      	ldr	r3, [pc, #284]	@ (8003788 <HAL_RCC_OscConfig+0x240>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003672:	2b08      	cmp	r3, #8
 8003674:	d11c      	bne.n	80036b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003676:	4b44      	ldr	r3, [pc, #272]	@ (8003788 <HAL_RCC_OscConfig+0x240>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d116      	bne.n	80036b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003682:	4b41      	ldr	r3, [pc, #260]	@ (8003788 <HAL_RCC_OscConfig+0x240>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d005      	beq.n	800369a <HAL_RCC_OscConfig+0x152>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d001      	beq.n	800369a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e1c7      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369a:	4b3b      	ldr	r3, [pc, #236]	@ (8003788 <HAL_RCC_OscConfig+0x240>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	4937      	ldr	r1, [pc, #220]	@ (8003788 <HAL_RCC_OscConfig+0x240>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ae:	e03a      	b.n	8003726 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d020      	beq.n	80036fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036b8:	4b34      	ldr	r3, [pc, #208]	@ (800378c <HAL_RCC_OscConfig+0x244>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036be:	f7ff fbd1 	bl	8002e64 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036c6:	f7ff fbcd 	bl	8002e64 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e1a8      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003788 <HAL_RCC_OscConfig+0x240>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0f0      	beq.n	80036c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e4:	4b28      	ldr	r3, [pc, #160]	@ (8003788 <HAL_RCC_OscConfig+0x240>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	4925      	ldr	r1, [pc, #148]	@ (8003788 <HAL_RCC_OscConfig+0x240>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	600b      	str	r3, [r1, #0]
 80036f8:	e015      	b.n	8003726 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036fa:	4b24      	ldr	r3, [pc, #144]	@ (800378c <HAL_RCC_OscConfig+0x244>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003700:	f7ff fbb0 	bl	8002e64 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003708:	f7ff fbac 	bl	8002e64 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e187      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371a:	4b1b      	ldr	r3, [pc, #108]	@ (8003788 <HAL_RCC_OscConfig+0x240>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d036      	beq.n	80037a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d016      	beq.n	8003768 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800373a:	4b15      	ldr	r3, [pc, #84]	@ (8003790 <HAL_RCC_OscConfig+0x248>)
 800373c:	2201      	movs	r2, #1
 800373e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003740:	f7ff fb90 	bl	8002e64 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003748:	f7ff fb8c 	bl	8002e64 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e167      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800375a:	4b0b      	ldr	r3, [pc, #44]	@ (8003788 <HAL_RCC_OscConfig+0x240>)
 800375c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f0      	beq.n	8003748 <HAL_RCC_OscConfig+0x200>
 8003766:	e01b      	b.n	80037a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003768:	4b09      	ldr	r3, [pc, #36]	@ (8003790 <HAL_RCC_OscConfig+0x248>)
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800376e:	f7ff fb79 	bl	8002e64 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003774:	e00e      	b.n	8003794 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003776:	f7ff fb75 	bl	8002e64 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d907      	bls.n	8003794 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e150      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
 8003788:	40023800 	.word	0x40023800
 800378c:	42470000 	.word	0x42470000
 8003790:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003794:	4b88      	ldr	r3, [pc, #544]	@ (80039b8 <HAL_RCC_OscConfig+0x470>)
 8003796:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1ea      	bne.n	8003776 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 8097 	beq.w	80038dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ae:	2300      	movs	r3, #0
 80037b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037b2:	4b81      	ldr	r3, [pc, #516]	@ (80039b8 <HAL_RCC_OscConfig+0x470>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10f      	bne.n	80037de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037be:	2300      	movs	r3, #0
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	4b7d      	ldr	r3, [pc, #500]	@ (80039b8 <HAL_RCC_OscConfig+0x470>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c6:	4a7c      	ldr	r2, [pc, #496]	@ (80039b8 <HAL_RCC_OscConfig+0x470>)
 80037c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80037ce:	4b7a      	ldr	r3, [pc, #488]	@ (80039b8 <HAL_RCC_OscConfig+0x470>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037d6:	60bb      	str	r3, [r7, #8]
 80037d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037da:	2301      	movs	r3, #1
 80037dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037de:	4b77      	ldr	r3, [pc, #476]	@ (80039bc <HAL_RCC_OscConfig+0x474>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d118      	bne.n	800381c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ea:	4b74      	ldr	r3, [pc, #464]	@ (80039bc <HAL_RCC_OscConfig+0x474>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a73      	ldr	r2, [pc, #460]	@ (80039bc <HAL_RCC_OscConfig+0x474>)
 80037f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037f6:	f7ff fb35 	bl	8002e64 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037fe:	f7ff fb31 	bl	8002e64 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e10c      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003810:	4b6a      	ldr	r3, [pc, #424]	@ (80039bc <HAL_RCC_OscConfig+0x474>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0f0      	beq.n	80037fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d106      	bne.n	8003832 <HAL_RCC_OscConfig+0x2ea>
 8003824:	4b64      	ldr	r3, [pc, #400]	@ (80039b8 <HAL_RCC_OscConfig+0x470>)
 8003826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003828:	4a63      	ldr	r2, [pc, #396]	@ (80039b8 <HAL_RCC_OscConfig+0x470>)
 800382a:	f043 0301 	orr.w	r3, r3, #1
 800382e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003830:	e01c      	b.n	800386c <HAL_RCC_OscConfig+0x324>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2b05      	cmp	r3, #5
 8003838:	d10c      	bne.n	8003854 <HAL_RCC_OscConfig+0x30c>
 800383a:	4b5f      	ldr	r3, [pc, #380]	@ (80039b8 <HAL_RCC_OscConfig+0x470>)
 800383c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383e:	4a5e      	ldr	r2, [pc, #376]	@ (80039b8 <HAL_RCC_OscConfig+0x470>)
 8003840:	f043 0304 	orr.w	r3, r3, #4
 8003844:	6713      	str	r3, [r2, #112]	@ 0x70
 8003846:	4b5c      	ldr	r3, [pc, #368]	@ (80039b8 <HAL_RCC_OscConfig+0x470>)
 8003848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800384a:	4a5b      	ldr	r2, [pc, #364]	@ (80039b8 <HAL_RCC_OscConfig+0x470>)
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	6713      	str	r3, [r2, #112]	@ 0x70
 8003852:	e00b      	b.n	800386c <HAL_RCC_OscConfig+0x324>
 8003854:	4b58      	ldr	r3, [pc, #352]	@ (80039b8 <HAL_RCC_OscConfig+0x470>)
 8003856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003858:	4a57      	ldr	r2, [pc, #348]	@ (80039b8 <HAL_RCC_OscConfig+0x470>)
 800385a:	f023 0301 	bic.w	r3, r3, #1
 800385e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003860:	4b55      	ldr	r3, [pc, #340]	@ (80039b8 <HAL_RCC_OscConfig+0x470>)
 8003862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003864:	4a54      	ldr	r2, [pc, #336]	@ (80039b8 <HAL_RCC_OscConfig+0x470>)
 8003866:	f023 0304 	bic.w	r3, r3, #4
 800386a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d015      	beq.n	80038a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003874:	f7ff faf6 	bl	8002e64 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800387a:	e00a      	b.n	8003892 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800387c:	f7ff faf2 	bl	8002e64 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800388a:	4293      	cmp	r3, r2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e0cb      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003892:	4b49      	ldr	r3, [pc, #292]	@ (80039b8 <HAL_RCC_OscConfig+0x470>)
 8003894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0ee      	beq.n	800387c <HAL_RCC_OscConfig+0x334>
 800389e:	e014      	b.n	80038ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a0:	f7ff fae0 	bl	8002e64 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a6:	e00a      	b.n	80038be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038a8:	f7ff fadc 	bl	8002e64 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e0b5      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038be:	4b3e      	ldr	r3, [pc, #248]	@ (80039b8 <HAL_RCC_OscConfig+0x470>)
 80038c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1ee      	bne.n	80038a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038ca:	7dfb      	ldrb	r3, [r7, #23]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d105      	bne.n	80038dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038d0:	4b39      	ldr	r3, [pc, #228]	@ (80039b8 <HAL_RCC_OscConfig+0x470>)
 80038d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d4:	4a38      	ldr	r2, [pc, #224]	@ (80039b8 <HAL_RCC_OscConfig+0x470>)
 80038d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 80a1 	beq.w	8003a28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038e6:	4b34      	ldr	r3, [pc, #208]	@ (80039b8 <HAL_RCC_OscConfig+0x470>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d05c      	beq.n	80039ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d141      	bne.n	800397e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038fa:	4b31      	ldr	r3, [pc, #196]	@ (80039c0 <HAL_RCC_OscConfig+0x478>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003900:	f7ff fab0 	bl	8002e64 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003908:	f7ff faac 	bl	8002e64 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e087      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391a:	4b27      	ldr	r3, [pc, #156]	@ (80039b8 <HAL_RCC_OscConfig+0x470>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f0      	bne.n	8003908 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69da      	ldr	r2, [r3, #28]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003934:	019b      	lsls	r3, r3, #6
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393c:	085b      	lsrs	r3, r3, #1
 800393e:	3b01      	subs	r3, #1
 8003940:	041b      	lsls	r3, r3, #16
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003948:	061b      	lsls	r3, r3, #24
 800394a:	491b      	ldr	r1, [pc, #108]	@ (80039b8 <HAL_RCC_OscConfig+0x470>)
 800394c:	4313      	orrs	r3, r2
 800394e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003950:	4b1b      	ldr	r3, [pc, #108]	@ (80039c0 <HAL_RCC_OscConfig+0x478>)
 8003952:	2201      	movs	r2, #1
 8003954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003956:	f7ff fa85 	bl	8002e64 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800395e:	f7ff fa81 	bl	8002e64 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e05c      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003970:	4b11      	ldr	r3, [pc, #68]	@ (80039b8 <HAL_RCC_OscConfig+0x470>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0f0      	beq.n	800395e <HAL_RCC_OscConfig+0x416>
 800397c:	e054      	b.n	8003a28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800397e:	4b10      	ldr	r3, [pc, #64]	@ (80039c0 <HAL_RCC_OscConfig+0x478>)
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003984:	f7ff fa6e 	bl	8002e64 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800398c:	f7ff fa6a 	bl	8002e64 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e045      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399e:	4b06      	ldr	r3, [pc, #24]	@ (80039b8 <HAL_RCC_OscConfig+0x470>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <HAL_RCC_OscConfig+0x444>
 80039aa:	e03d      	b.n	8003a28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d107      	bne.n	80039c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e038      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
 80039b8:	40023800 	.word	0x40023800
 80039bc:	40007000 	.word	0x40007000
 80039c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a34 <HAL_RCC_OscConfig+0x4ec>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d028      	beq.n	8003a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039dc:	429a      	cmp	r2, r3
 80039de:	d121      	bne.n	8003a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d11a      	bne.n	8003a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80039f4:	4013      	ands	r3, r2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d111      	bne.n	8003a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a0a:	085b      	lsrs	r3, r3, #1
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d107      	bne.n	8003a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d001      	beq.n	8003a28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e000      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40023800 	.word	0x40023800

08003a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0cc      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a4c:	4b68      	ldr	r3, [pc, #416]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d90c      	bls.n	8003a74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5a:	4b65      	ldr	r3, [pc, #404]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a62:	4b63      	ldr	r3, [pc, #396]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d001      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e0b8      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d020      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a8c:	4b59      	ldr	r3, [pc, #356]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	4a58      	ldr	r2, [pc, #352]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aa4:	4b53      	ldr	r3, [pc, #332]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	4a52      	ldr	r2, [pc, #328]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003aae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab0:	4b50      	ldr	r3, [pc, #320]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	494d      	ldr	r1, [pc, #308]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d044      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d107      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad6:	4b47      	ldr	r3, [pc, #284]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d119      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e07f      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d003      	beq.n	8003af6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003af2:	2b03      	cmp	r3, #3
 8003af4:	d107      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af6:	4b3f      	ldr	r3, [pc, #252]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d109      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e06f      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b06:	4b3b      	ldr	r3, [pc, #236]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e067      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b16:	4b37      	ldr	r3, [pc, #220]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f023 0203 	bic.w	r2, r3, #3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	4934      	ldr	r1, [pc, #208]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b28:	f7ff f99c 	bl	8002e64 <HAL_GetTick>
 8003b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2e:	e00a      	b.n	8003b46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b30:	f7ff f998 	bl	8002e64 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e04f      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b46:	4b2b      	ldr	r3, [pc, #172]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 020c 	and.w	r2, r3, #12
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d1eb      	bne.n	8003b30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b58:	4b25      	ldr	r3, [pc, #148]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d20c      	bcs.n	8003b80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b66:	4b22      	ldr	r3, [pc, #136]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6e:	4b20      	ldr	r3, [pc, #128]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d001      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e032      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b8c:	4b19      	ldr	r3, [pc, #100]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	4916      	ldr	r1, [pc, #88]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d009      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003baa:	4b12      	ldr	r3, [pc, #72]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	490e      	ldr	r1, [pc, #56]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bbe:	f000 f821 	bl	8003c04 <HAL_RCC_GetSysClockFreq>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	091b      	lsrs	r3, r3, #4
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	490a      	ldr	r1, [pc, #40]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8003bd0:	5ccb      	ldrb	r3, [r1, r3]
 8003bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd6:	4a09      	ldr	r2, [pc, #36]	@ (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bda:	4b09      	ldr	r3, [pc, #36]	@ (8003c00 <HAL_RCC_ClockConfig+0x1c8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff f8fc 	bl	8002ddc <HAL_InitTick>

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40023c00 	.word	0x40023c00
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	08005760 	.word	0x08005760
 8003bfc:	20000100 	.word	0x20000100
 8003c00:	20000104 	.word	0x20000104

08003c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c08:	b094      	sub	sp, #80	@ 0x50
 8003c0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c10:	2300      	movs	r3, #0
 8003c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c14:	2300      	movs	r3, #0
 8003c16:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c1c:	4b79      	ldr	r3, [pc, #484]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f003 030c 	and.w	r3, r3, #12
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d00d      	beq.n	8003c44 <HAL_RCC_GetSysClockFreq+0x40>
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	f200 80e1 	bhi.w	8003df0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <HAL_RCC_GetSysClockFreq+0x34>
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d003      	beq.n	8003c3e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c36:	e0db      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c38:	4b73      	ldr	r3, [pc, #460]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003c3c:	e0db      	b.n	8003df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c3e:	4b73      	ldr	r3, [pc, #460]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x208>)
 8003c40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c42:	e0d8      	b.n	8003df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c44:	4b6f      	ldr	r3, [pc, #444]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c4c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c4e:	4b6d      	ldr	r3, [pc, #436]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d063      	beq.n	8003d22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c5a:	4b6a      	ldr	r3, [pc, #424]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	099b      	lsrs	r3, r3, #6
 8003c60:	2200      	movs	r2, #0
 8003c62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c64:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c6e:	2300      	movs	r3, #0
 8003c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c76:	4622      	mov	r2, r4
 8003c78:	462b      	mov	r3, r5
 8003c7a:	f04f 0000 	mov.w	r0, #0
 8003c7e:	f04f 0100 	mov.w	r1, #0
 8003c82:	0159      	lsls	r1, r3, #5
 8003c84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c88:	0150      	lsls	r0, r2, #5
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4621      	mov	r1, r4
 8003c90:	1a51      	subs	r1, r2, r1
 8003c92:	6139      	str	r1, [r7, #16]
 8003c94:	4629      	mov	r1, r5
 8003c96:	eb63 0301 	sbc.w	r3, r3, r1
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ca8:	4659      	mov	r1, fp
 8003caa:	018b      	lsls	r3, r1, #6
 8003cac:	4651      	mov	r1, sl
 8003cae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cb2:	4651      	mov	r1, sl
 8003cb4:	018a      	lsls	r2, r1, #6
 8003cb6:	4651      	mov	r1, sl
 8003cb8:	ebb2 0801 	subs.w	r8, r2, r1
 8003cbc:	4659      	mov	r1, fp
 8003cbe:	eb63 0901 	sbc.w	r9, r3, r1
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	f04f 0300 	mov.w	r3, #0
 8003cca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cd6:	4690      	mov	r8, r2
 8003cd8:	4699      	mov	r9, r3
 8003cda:	4623      	mov	r3, r4
 8003cdc:	eb18 0303 	adds.w	r3, r8, r3
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	462b      	mov	r3, r5
 8003ce4:	eb49 0303 	adc.w	r3, r9, r3
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cf6:	4629      	mov	r1, r5
 8003cf8:	024b      	lsls	r3, r1, #9
 8003cfa:	4621      	mov	r1, r4
 8003cfc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d00:	4621      	mov	r1, r4
 8003d02:	024a      	lsls	r2, r1, #9
 8003d04:	4610      	mov	r0, r2
 8003d06:	4619      	mov	r1, r3
 8003d08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d14:	f7fc fa70 	bl	80001f8 <__aeabi_uldivmod>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d20:	e058      	b.n	8003dd4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d22:	4b38      	ldr	r3, [pc, #224]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	099b      	lsrs	r3, r3, #6
 8003d28:	2200      	movs	r2, #0
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	4611      	mov	r1, r2
 8003d2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d32:	623b      	str	r3, [r7, #32]
 8003d34:	2300      	movs	r3, #0
 8003d36:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d3c:	4642      	mov	r2, r8
 8003d3e:	464b      	mov	r3, r9
 8003d40:	f04f 0000 	mov.w	r0, #0
 8003d44:	f04f 0100 	mov.w	r1, #0
 8003d48:	0159      	lsls	r1, r3, #5
 8003d4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d4e:	0150      	lsls	r0, r2, #5
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4641      	mov	r1, r8
 8003d56:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d5a:	4649      	mov	r1, r9
 8003d5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	f04f 0300 	mov.w	r3, #0
 8003d68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d74:	ebb2 040a 	subs.w	r4, r2, sl
 8003d78:	eb63 050b 	sbc.w	r5, r3, fp
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	f04f 0300 	mov.w	r3, #0
 8003d84:	00eb      	lsls	r3, r5, #3
 8003d86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d8a:	00e2      	lsls	r2, r4, #3
 8003d8c:	4614      	mov	r4, r2
 8003d8e:	461d      	mov	r5, r3
 8003d90:	4643      	mov	r3, r8
 8003d92:	18e3      	adds	r3, r4, r3
 8003d94:	603b      	str	r3, [r7, #0]
 8003d96:	464b      	mov	r3, r9
 8003d98:	eb45 0303 	adc.w	r3, r5, r3
 8003d9c:	607b      	str	r3, [r7, #4]
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	f04f 0300 	mov.w	r3, #0
 8003da6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003daa:	4629      	mov	r1, r5
 8003dac:	028b      	lsls	r3, r1, #10
 8003dae:	4621      	mov	r1, r4
 8003db0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003db4:	4621      	mov	r1, r4
 8003db6:	028a      	lsls	r2, r1, #10
 8003db8:	4610      	mov	r0, r2
 8003dba:	4619      	mov	r1, r3
 8003dbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	61bb      	str	r3, [r7, #24]
 8003dc2:	61fa      	str	r2, [r7, #28]
 8003dc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dc8:	f7fc fa16 	bl	80001f8 <__aeabi_uldivmod>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	0c1b      	lsrs	r3, r3, #16
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	3301      	adds	r3, #1
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003de4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003de6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003dee:	e002      	b.n	8003df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003df0:	4b05      	ldr	r3, [pc, #20]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x204>)
 8003df2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003df4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003df6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3750      	adds	r7, #80	@ 0x50
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e02:	bf00      	nop
 8003e04:	40023800 	.word	0x40023800
 8003e08:	00f42400 	.word	0x00f42400
 8003e0c:	007a1200 	.word	0x007a1200

08003e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e14:	4b03      	ldr	r3, [pc, #12]	@ (8003e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e16:	681b      	ldr	r3, [r3, #0]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	20000100 	.word	0x20000100

08003e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e2c:	f7ff fff0 	bl	8003e10 <HAL_RCC_GetHCLKFreq>
 8003e30:	4602      	mov	r2, r0
 8003e32:	4b05      	ldr	r3, [pc, #20]	@ (8003e48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	0a9b      	lsrs	r3, r3, #10
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	4903      	ldr	r1, [pc, #12]	@ (8003e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e3e:	5ccb      	ldrb	r3, [r1, r3]
 8003e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	08005770 	.word	0x08005770

08003e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e54:	f7ff ffdc 	bl	8003e10 <HAL_RCC_GetHCLKFreq>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	4b05      	ldr	r3, [pc, #20]	@ (8003e70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	0b5b      	lsrs	r3, r3, #13
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	4903      	ldr	r1, [pc, #12]	@ (8003e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e66:	5ccb      	ldrb	r3, [r1, r3]
 8003e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40023800 	.word	0x40023800
 8003e74:	08005770 	.word	0x08005770

08003e78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e041      	b.n	8003f0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d106      	bne.n	8003ea4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7fe fe82 	bl	8002ba8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	f000 fa16 	bl	80042e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b084      	sub	sp, #16
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d020      	beq.n	8003f7a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d01b      	beq.n	8003f7a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f06f 0202 	mvn.w	r2, #2
 8003f4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	f003 0303 	and.w	r3, r3, #3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f9a3 	bl	80042ac <HAL_TIM_IC_CaptureCallback>
 8003f66:	e005      	b.n	8003f74 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f995 	bl	8004298 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f9a6 	bl	80042c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d020      	beq.n	8003fc6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f003 0304 	and.w	r3, r3, #4
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d01b      	beq.n	8003fc6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f06f 0204 	mvn.w	r2, #4
 8003f96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f97d 	bl	80042ac <HAL_TIM_IC_CaptureCallback>
 8003fb2:	e005      	b.n	8003fc0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f96f 	bl	8004298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f980 	bl	80042c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f003 0308 	and.w	r3, r3, #8
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d020      	beq.n	8004012 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d01b      	beq.n	8004012 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f06f 0208 	mvn.w	r2, #8
 8003fe2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2204      	movs	r2, #4
 8003fe8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	f003 0303 	and.w	r3, r3, #3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f957 	bl	80042ac <HAL_TIM_IC_CaptureCallback>
 8003ffe:	e005      	b.n	800400c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f949 	bl	8004298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f95a 	bl	80042c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	2b00      	cmp	r3, #0
 800401a:	d020      	beq.n	800405e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f003 0310 	and.w	r3, r3, #16
 8004022:	2b00      	cmp	r3, #0
 8004024:	d01b      	beq.n	800405e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f06f 0210 	mvn.w	r2, #16
 800402e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2208      	movs	r2, #8
 8004034:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 f931 	bl	80042ac <HAL_TIM_IC_CaptureCallback>
 800404a:	e005      	b.n	8004058 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f923 	bl	8004298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f934 	bl	80042c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00c      	beq.n	8004082 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d007      	beq.n	8004082 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f06f 0201 	mvn.w	r2, #1
 800407a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f901 	bl	8004284 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00c      	beq.n	80040a6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004092:	2b00      	cmp	r3, #0
 8004094:	d007      	beq.n	80040a6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800409e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 fabf 	bl	8004624 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00c      	beq.n	80040ca <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d007      	beq.n	80040ca <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f905 	bl	80042d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00c      	beq.n	80040ee <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f003 0320 	and.w	r3, r3, #32
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d007      	beq.n	80040ee <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f06f 0220 	mvn.w	r2, #32
 80040e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 fa91 	bl	8004610 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040ee:	bf00      	nop
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b084      	sub	sp, #16
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004100:	2300      	movs	r3, #0
 8004102:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_TIM_ConfigClockSource+0x1c>
 800410e:	2302      	movs	r3, #2
 8004110:	e0b4      	b.n	800427c <HAL_TIM_ConfigClockSource+0x186>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2202      	movs	r2, #2
 800411e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004130:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004138:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800414a:	d03e      	beq.n	80041ca <HAL_TIM_ConfigClockSource+0xd4>
 800414c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004150:	f200 8087 	bhi.w	8004262 <HAL_TIM_ConfigClockSource+0x16c>
 8004154:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004158:	f000 8086 	beq.w	8004268 <HAL_TIM_ConfigClockSource+0x172>
 800415c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004160:	d87f      	bhi.n	8004262 <HAL_TIM_ConfigClockSource+0x16c>
 8004162:	2b70      	cmp	r3, #112	@ 0x70
 8004164:	d01a      	beq.n	800419c <HAL_TIM_ConfigClockSource+0xa6>
 8004166:	2b70      	cmp	r3, #112	@ 0x70
 8004168:	d87b      	bhi.n	8004262 <HAL_TIM_ConfigClockSource+0x16c>
 800416a:	2b60      	cmp	r3, #96	@ 0x60
 800416c:	d050      	beq.n	8004210 <HAL_TIM_ConfigClockSource+0x11a>
 800416e:	2b60      	cmp	r3, #96	@ 0x60
 8004170:	d877      	bhi.n	8004262 <HAL_TIM_ConfigClockSource+0x16c>
 8004172:	2b50      	cmp	r3, #80	@ 0x50
 8004174:	d03c      	beq.n	80041f0 <HAL_TIM_ConfigClockSource+0xfa>
 8004176:	2b50      	cmp	r3, #80	@ 0x50
 8004178:	d873      	bhi.n	8004262 <HAL_TIM_ConfigClockSource+0x16c>
 800417a:	2b40      	cmp	r3, #64	@ 0x40
 800417c:	d058      	beq.n	8004230 <HAL_TIM_ConfigClockSource+0x13a>
 800417e:	2b40      	cmp	r3, #64	@ 0x40
 8004180:	d86f      	bhi.n	8004262 <HAL_TIM_ConfigClockSource+0x16c>
 8004182:	2b30      	cmp	r3, #48	@ 0x30
 8004184:	d064      	beq.n	8004250 <HAL_TIM_ConfigClockSource+0x15a>
 8004186:	2b30      	cmp	r3, #48	@ 0x30
 8004188:	d86b      	bhi.n	8004262 <HAL_TIM_ConfigClockSource+0x16c>
 800418a:	2b20      	cmp	r3, #32
 800418c:	d060      	beq.n	8004250 <HAL_TIM_ConfigClockSource+0x15a>
 800418e:	2b20      	cmp	r3, #32
 8004190:	d867      	bhi.n	8004262 <HAL_TIM_ConfigClockSource+0x16c>
 8004192:	2b00      	cmp	r3, #0
 8004194:	d05c      	beq.n	8004250 <HAL_TIM_ConfigClockSource+0x15a>
 8004196:	2b10      	cmp	r3, #16
 8004198:	d05a      	beq.n	8004250 <HAL_TIM_ConfigClockSource+0x15a>
 800419a:	e062      	b.n	8004262 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041ac:	f000 f9a2 	bl	80044f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80041be:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	609a      	str	r2, [r3, #8]
      break;
 80041c8:	e04f      	b.n	800426a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041da:	f000 f98b 	bl	80044f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041ec:	609a      	str	r2, [r3, #8]
      break;
 80041ee:	e03c      	b.n	800426a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041fc:	461a      	mov	r2, r3
 80041fe:	f000 f8ff 	bl	8004400 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2150      	movs	r1, #80	@ 0x50
 8004208:	4618      	mov	r0, r3
 800420a:	f000 f958 	bl	80044be <TIM_ITRx_SetConfig>
      break;
 800420e:	e02c      	b.n	800426a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800421c:	461a      	mov	r2, r3
 800421e:	f000 f91e 	bl	800445e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2160      	movs	r1, #96	@ 0x60
 8004228:	4618      	mov	r0, r3
 800422a:	f000 f948 	bl	80044be <TIM_ITRx_SetConfig>
      break;
 800422e:	e01c      	b.n	800426a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800423c:	461a      	mov	r2, r3
 800423e:	f000 f8df 	bl	8004400 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2140      	movs	r1, #64	@ 0x40
 8004248:	4618      	mov	r0, r3
 800424a:	f000 f938 	bl	80044be <TIM_ITRx_SetConfig>
      break;
 800424e:	e00c      	b.n	800426a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4619      	mov	r1, r3
 800425a:	4610      	mov	r0, r2
 800425c:	f000 f92f 	bl	80044be <TIM_ITRx_SetConfig>
      break;
 8004260:	e003      	b.n	800426a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	73fb      	strb	r3, [r7, #15]
      break;
 8004266:	e000      	b.n	800426a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004268:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800427a:	7bfb      	ldrb	r3, [r7, #15]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a3a      	ldr	r2, [pc, #232]	@ (80043e4 <TIM_Base_SetConfig+0xfc>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d00f      	beq.n	8004320 <TIM_Base_SetConfig+0x38>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004306:	d00b      	beq.n	8004320 <TIM_Base_SetConfig+0x38>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a37      	ldr	r2, [pc, #220]	@ (80043e8 <TIM_Base_SetConfig+0x100>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d007      	beq.n	8004320 <TIM_Base_SetConfig+0x38>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a36      	ldr	r2, [pc, #216]	@ (80043ec <TIM_Base_SetConfig+0x104>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d003      	beq.n	8004320 <TIM_Base_SetConfig+0x38>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a35      	ldr	r2, [pc, #212]	@ (80043f0 <TIM_Base_SetConfig+0x108>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d108      	bne.n	8004332 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a2b      	ldr	r2, [pc, #172]	@ (80043e4 <TIM_Base_SetConfig+0xfc>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d01b      	beq.n	8004372 <TIM_Base_SetConfig+0x8a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004340:	d017      	beq.n	8004372 <TIM_Base_SetConfig+0x8a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a28      	ldr	r2, [pc, #160]	@ (80043e8 <TIM_Base_SetConfig+0x100>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d013      	beq.n	8004372 <TIM_Base_SetConfig+0x8a>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a27      	ldr	r2, [pc, #156]	@ (80043ec <TIM_Base_SetConfig+0x104>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d00f      	beq.n	8004372 <TIM_Base_SetConfig+0x8a>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a26      	ldr	r2, [pc, #152]	@ (80043f0 <TIM_Base_SetConfig+0x108>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d00b      	beq.n	8004372 <TIM_Base_SetConfig+0x8a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a25      	ldr	r2, [pc, #148]	@ (80043f4 <TIM_Base_SetConfig+0x10c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d007      	beq.n	8004372 <TIM_Base_SetConfig+0x8a>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a24      	ldr	r2, [pc, #144]	@ (80043f8 <TIM_Base_SetConfig+0x110>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d003      	beq.n	8004372 <TIM_Base_SetConfig+0x8a>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a23      	ldr	r2, [pc, #140]	@ (80043fc <TIM_Base_SetConfig+0x114>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d108      	bne.n	8004384 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004378:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4313      	orrs	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a0e      	ldr	r2, [pc, #56]	@ (80043e4 <TIM_Base_SetConfig+0xfc>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d103      	bne.n	80043b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d105      	bne.n	80043d6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f023 0201 	bic.w	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	611a      	str	r2, [r3, #16]
  }
}
 80043d6:	bf00      	nop
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40010000 	.word	0x40010000
 80043e8:	40000400 	.word	0x40000400
 80043ec:	40000800 	.word	0x40000800
 80043f0:	40000c00 	.word	0x40000c00
 80043f4:	40014000 	.word	0x40014000
 80043f8:	40014400 	.word	0x40014400
 80043fc:	40014800 	.word	0x40014800

08004400 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	f023 0201 	bic.w	r2, r3, #1
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800442a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	011b      	lsls	r3, r3, #4
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f023 030a 	bic.w	r3, r3, #10
 800443c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	4313      	orrs	r3, r2
 8004444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	621a      	str	r2, [r3, #32]
}
 8004452:	bf00      	nop
 8004454:	371c      	adds	r7, #28
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800445e:	b480      	push	{r7}
 8004460:	b087      	sub	sp, #28
 8004462:	af00      	add	r7, sp, #0
 8004464:	60f8      	str	r0, [r7, #12]
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	f023 0210 	bic.w	r2, r3, #16
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004488:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	031b      	lsls	r3, r3, #12
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	4313      	orrs	r3, r2
 8004492:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800449a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	621a      	str	r2, [r3, #32]
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044be:	b480      	push	{r7}
 80044c0:	b085      	sub	sp, #20
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4313      	orrs	r3, r2
 80044dc:	f043 0307 	orr.w	r3, r3, #7
 80044e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	609a      	str	r2, [r3, #8]
}
 80044e8:	bf00      	nop
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b087      	sub	sp, #28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
 8004500:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800450e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	021a      	lsls	r2, r3, #8
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	431a      	orrs	r2, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4313      	orrs	r3, r2
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	4313      	orrs	r3, r2
 8004520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	609a      	str	r2, [r3, #8]
}
 8004528:	bf00      	nop
 800452a:	371c      	adds	r7, #28
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004544:	2b01      	cmp	r3, #1
 8004546:	d101      	bne.n	800454c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004548:	2302      	movs	r3, #2
 800454a:	e050      	b.n	80045ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004572:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4313      	orrs	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a1c      	ldr	r2, [pc, #112]	@ (80045fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d018      	beq.n	80045c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004598:	d013      	beq.n	80045c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a18      	ldr	r2, [pc, #96]	@ (8004600 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d00e      	beq.n	80045c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a16      	ldr	r2, [pc, #88]	@ (8004604 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d009      	beq.n	80045c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a15      	ldr	r2, [pc, #84]	@ (8004608 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d004      	beq.n	80045c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a13      	ldr	r2, [pc, #76]	@ (800460c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d10c      	bne.n	80045dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40010000 	.word	0x40010000
 8004600:	40000400 	.word	0x40000400
 8004604:	40000800 	.word	0x40000800
 8004608:	40000c00 	.word	0x40000c00
 800460c:	40014000 	.word	0x40014000

08004610 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e042      	b.n	80046d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d106      	bne.n	8004664 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7fe faca 	bl	8002bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2224      	movs	r2, #36	@ 0x24
 8004668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68da      	ldr	r2, [r3, #12]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800467a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 fcdb 	bl	8005038 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	691a      	ldr	r2, [r3, #16]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004690:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	695a      	ldr	r2, [r3, #20]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80046b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2220      	movs	r2, #32
 80046c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	4613      	mov	r3, r2
 80046e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b20      	cmp	r3, #32
 80046f0:	d112      	bne.n	8004718 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <HAL_UART_Receive_IT+0x26>
 80046f8:	88fb      	ldrh	r3, [r7, #6]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e00b      	b.n	800471a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004708:	88fb      	ldrh	r3, [r7, #6]
 800470a:	461a      	mov	r2, r3
 800470c:	68b9      	ldr	r1, [r7, #8]
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 faba 	bl	8004c88 <UART_Start_Receive_IT>
 8004714:	4603      	mov	r3, r0
 8004716:	e000      	b.n	800471a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004718:	2302      	movs	r3, #2
  }
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
	...

08004724 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b0ba      	sub	sp, #232	@ 0xe8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800474a:	2300      	movs	r3, #0
 800474c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004750:	2300      	movs	r3, #0
 8004752:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800475a:	f003 030f 	and.w	r3, r3, #15
 800475e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004762:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10f      	bne.n	800478a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800476a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800476e:	f003 0320 	and.w	r3, r3, #32
 8004772:	2b00      	cmp	r3, #0
 8004774:	d009      	beq.n	800478a <HAL_UART_IRQHandler+0x66>
 8004776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800477a:	f003 0320 	and.w	r3, r3, #32
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fb99 	bl	8004eba <UART_Receive_IT>
      return;
 8004788:	e25b      	b.n	8004c42 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800478a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 80de 	beq.w	8004950 <HAL_UART_IRQHandler+0x22c>
 8004794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b00      	cmp	r3, #0
 800479e:	d106      	bne.n	80047ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 80d1 	beq.w	8004950 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00b      	beq.n	80047d2 <HAL_UART_IRQHandler+0xae>
 80047ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d005      	beq.n	80047d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ca:	f043 0201 	orr.w	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00b      	beq.n	80047f6 <HAL_UART_IRQHandler+0xd2>
 80047de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d005      	beq.n	80047f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ee:	f043 0202 	orr.w	r2, r3, #2
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00b      	beq.n	800481a <HAL_UART_IRQHandler+0xf6>
 8004802:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d005      	beq.n	800481a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004812:	f043 0204 	orr.w	r2, r3, #4
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800481a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800481e:	f003 0308 	and.w	r3, r3, #8
 8004822:	2b00      	cmp	r3, #0
 8004824:	d011      	beq.n	800484a <HAL_UART_IRQHandler+0x126>
 8004826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800482a:	f003 0320 	and.w	r3, r3, #32
 800482e:	2b00      	cmp	r3, #0
 8004830:	d105      	bne.n	800483e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	d005      	beq.n	800484a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004842:	f043 0208 	orr.w	r2, r3, #8
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 81f2 	beq.w	8004c38 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004858:	f003 0320 	and.w	r3, r3, #32
 800485c:	2b00      	cmp	r3, #0
 800485e:	d008      	beq.n	8004872 <HAL_UART_IRQHandler+0x14e>
 8004860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004864:	f003 0320 	and.w	r3, r3, #32
 8004868:	2b00      	cmp	r3, #0
 800486a:	d002      	beq.n	8004872 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fb24 	bl	8004eba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800487c:	2b40      	cmp	r3, #64	@ 0x40
 800487e:	bf0c      	ite	eq
 8004880:	2301      	moveq	r3, #1
 8004882:	2300      	movne	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800488e:	f003 0308 	and.w	r3, r3, #8
 8004892:	2b00      	cmp	r3, #0
 8004894:	d103      	bne.n	800489e <HAL_UART_IRQHandler+0x17a>
 8004896:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800489a:	2b00      	cmp	r3, #0
 800489c:	d04f      	beq.n	800493e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 fa2c 	bl	8004cfc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ae:	2b40      	cmp	r3, #64	@ 0x40
 80048b0:	d141      	bne.n	8004936 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3314      	adds	r3, #20
 80048b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80048c0:	e853 3f00 	ldrex	r3, [r3]
 80048c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80048c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80048cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	3314      	adds	r3, #20
 80048da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80048de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80048e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80048ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80048ee:	e841 2300 	strex	r3, r2, [r1]
 80048f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80048f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1d9      	bne.n	80048b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004902:	2b00      	cmp	r3, #0
 8004904:	d013      	beq.n	800492e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800490a:	4a7e      	ldr	r2, [pc, #504]	@ (8004b04 <HAL_UART_IRQHandler+0x3e0>)
 800490c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004912:	4618      	mov	r0, r3
 8004914:	f7fe fc57 	bl	80031c6 <HAL_DMA_Abort_IT>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d016      	beq.n	800494c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004928:	4610      	mov	r0, r2
 800492a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800492c:	e00e      	b.n	800494c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f994 	bl	8004c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004934:	e00a      	b.n	800494c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f990 	bl	8004c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800493c:	e006      	b.n	800494c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f98c 	bl	8004c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800494a:	e175      	b.n	8004c38 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800494c:	bf00      	nop
    return;
 800494e:	e173      	b.n	8004c38 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004954:	2b01      	cmp	r3, #1
 8004956:	f040 814f 	bne.w	8004bf8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800495a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800495e:	f003 0310 	and.w	r3, r3, #16
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 8148 	beq.w	8004bf8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800496c:	f003 0310 	and.w	r3, r3, #16
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 8141 	beq.w	8004bf8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004976:	2300      	movs	r3, #0
 8004978:	60bb      	str	r3, [r7, #8]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	60bb      	str	r3, [r7, #8]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	60bb      	str	r3, [r7, #8]
 800498a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004996:	2b40      	cmp	r3, #64	@ 0x40
 8004998:	f040 80b6 	bne.w	8004b08 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 8145 	beq.w	8004c3c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80049b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80049ba:	429a      	cmp	r2, r3
 80049bc:	f080 813e 	bcs.w	8004c3c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80049c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049d2:	f000 8088 	beq.w	8004ae6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	330c      	adds	r3, #12
 80049dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80049e4:	e853 3f00 	ldrex	r3, [r3]
 80049e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80049ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80049f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	330c      	adds	r3, #12
 80049fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004a02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004a0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004a12:	e841 2300 	strex	r3, r2, [r1]
 8004a16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004a1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1d9      	bne.n	80049d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3314      	adds	r3, #20
 8004a28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a2c:	e853 3f00 	ldrex	r3, [r3]
 8004a30:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004a32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a34:	f023 0301 	bic.w	r3, r3, #1
 8004a38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3314      	adds	r3, #20
 8004a42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004a46:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004a4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004a4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004a52:	e841 2300 	strex	r3, r2, [r1]
 8004a56:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004a58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1e1      	bne.n	8004a22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3314      	adds	r3, #20
 8004a64:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a68:	e853 3f00 	ldrex	r3, [r3]
 8004a6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004a6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3314      	adds	r3, #20
 8004a7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004a82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a86:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004a88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a8a:	e841 2300 	strex	r3, r2, [r1]
 8004a8e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004a90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1e3      	bne.n	8004a5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	330c      	adds	r3, #12
 8004aaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004aae:	e853 3f00 	ldrex	r3, [r3]
 8004ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004ab4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ab6:	f023 0310 	bic.w	r3, r3, #16
 8004aba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	330c      	adds	r3, #12
 8004ac4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004ac8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004aca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004acc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ace:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ad0:	e841 2300 	strex	r3, r2, [r1]
 8004ad4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004ad6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e3      	bne.n	8004aa4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7fe fb00 	bl	80030e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2202      	movs	r2, #2
 8004aea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	4619      	mov	r1, r3
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f8b7 	bl	8004c70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b02:	e09b      	b.n	8004c3c <HAL_UART_IRQHandler+0x518>
 8004b04:	08004dc3 	.word	0x08004dc3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 808e 	beq.w	8004c40 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004b24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 8089 	beq.w	8004c40 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	330c      	adds	r3, #12
 8004b34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b38:	e853 3f00 	ldrex	r3, [r3]
 8004b3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	330c      	adds	r3, #12
 8004b4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004b52:	647a      	str	r2, [r7, #68]	@ 0x44
 8004b54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b5a:	e841 2300 	strex	r3, r2, [r1]
 8004b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1e3      	bne.n	8004b2e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	3314      	adds	r3, #20
 8004b6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b70:	e853 3f00 	ldrex	r3, [r3]
 8004b74:	623b      	str	r3, [r7, #32]
   return(result);
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	f023 0301 	bic.w	r3, r3, #1
 8004b7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3314      	adds	r3, #20
 8004b86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004b8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b92:	e841 2300 	strex	r3, r2, [r1]
 8004b96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1e3      	bne.n	8004b66 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	330c      	adds	r3, #12
 8004bb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	e853 3f00 	ldrex	r3, [r3]
 8004bba:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 0310 	bic.w	r3, r3, #16
 8004bc2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	330c      	adds	r3, #12
 8004bcc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004bd0:	61fa      	str	r2, [r7, #28]
 8004bd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd4:	69b9      	ldr	r1, [r7, #24]
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	e841 2300 	strex	r3, r2, [r1]
 8004bdc:	617b      	str	r3, [r7, #20]
   return(result);
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1e3      	bne.n	8004bac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004bee:	4619      	mov	r1, r3
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f83d 	bl	8004c70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bf6:	e023      	b.n	8004c40 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d009      	beq.n	8004c18 <HAL_UART_IRQHandler+0x4f4>
 8004c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d003      	beq.n	8004c18 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f8ea 	bl	8004dea <UART_Transmit_IT>
    return;
 8004c16:	e014      	b.n	8004c42 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00e      	beq.n	8004c42 <HAL_UART_IRQHandler+0x51e>
 8004c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d008      	beq.n	8004c42 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f92a 	bl	8004e8a <UART_EndTransmit_IT>
    return;
 8004c36:	e004      	b.n	8004c42 <HAL_UART_IRQHandler+0x51e>
    return;
 8004c38:	bf00      	nop
 8004c3a:	e002      	b.n	8004c42 <HAL_UART_IRQHandler+0x51e>
      return;
 8004c3c:	bf00      	nop
 8004c3e:	e000      	b.n	8004c42 <HAL_UART_IRQHandler+0x51e>
      return;
 8004c40:	bf00      	nop
  }
}
 8004c42:	37e8      	adds	r7, #232	@ 0xe8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	460b      	mov	r3, r1
 8004c7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	4613      	mov	r3, r2
 8004c94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	88fa      	ldrh	r2, [r7, #6]
 8004ca0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	88fa      	ldrh	r2, [r7, #6]
 8004ca6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2222      	movs	r2, #34	@ 0x22
 8004cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d007      	beq.n	8004cce <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68da      	ldr	r2, [r3, #12]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ccc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	695a      	ldr	r2, [r3, #20]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f042 0201 	orr.w	r2, r2, #1
 8004cdc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68da      	ldr	r2, [r3, #12]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f042 0220 	orr.w	r2, r2, #32
 8004cec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b095      	sub	sp, #84	@ 0x54
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	330c      	adds	r3, #12
 8004d0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d0e:	e853 3f00 	ldrex	r3, [r3]
 8004d12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	330c      	adds	r3, #12
 8004d22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d24:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d2c:	e841 2300 	strex	r3, r2, [r1]
 8004d30:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1e5      	bne.n	8004d04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3314      	adds	r3, #20
 8004d3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	e853 3f00 	ldrex	r3, [r3]
 8004d46:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	f023 0301 	bic.w	r3, r3, #1
 8004d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3314      	adds	r3, #20
 8004d56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d60:	e841 2300 	strex	r3, r2, [r1]
 8004d64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e5      	bne.n	8004d38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d119      	bne.n	8004da8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	330c      	adds	r3, #12
 8004d7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	e853 3f00 	ldrex	r3, [r3]
 8004d82:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	f023 0310 	bic.w	r3, r3, #16
 8004d8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	330c      	adds	r3, #12
 8004d92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d94:	61ba      	str	r2, [r7, #24]
 8004d96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d98:	6979      	ldr	r1, [r7, #20]
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	e841 2300 	strex	r3, r2, [r1]
 8004da0:	613b      	str	r3, [r7, #16]
   return(result);
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1e5      	bne.n	8004d74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004db6:	bf00      	nop
 8004db8:	3754      	adds	r7, #84	@ 0x54
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b084      	sub	sp, #16
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f7ff ff3d 	bl	8004c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004de2:	bf00      	nop
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b085      	sub	sp, #20
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b21      	cmp	r3, #33	@ 0x21
 8004dfc:	d13e      	bne.n	8004e7c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e06:	d114      	bne.n	8004e32 <UART_Transmit_IT+0x48>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d110      	bne.n	8004e32 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e24:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	1c9a      	adds	r2, r3, #2
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	621a      	str	r2, [r3, #32]
 8004e30:	e008      	b.n	8004e44 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	1c59      	adds	r1, r3, #1
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6211      	str	r1, [r2, #32]
 8004e3c:	781a      	ldrb	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	4619      	mov	r1, r3
 8004e52:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10f      	bne.n	8004e78 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e66:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e76:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	e000      	b.n	8004e7e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e7c:	2302      	movs	r3, #2
  }
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b082      	sub	sp, #8
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68da      	ldr	r2, [r3, #12]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ea0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7ff fecc 	bl	8004c48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b08c      	sub	sp, #48	@ 0x30
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b22      	cmp	r3, #34	@ 0x22
 8004ecc:	f040 80ae 	bne.w	800502c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ed8:	d117      	bne.n	8004f0a <UART_Receive_IT+0x50>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d113      	bne.n	8004f0a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eea:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f02:	1c9a      	adds	r2, r3, #2
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f08:	e026      	b.n	8004f58 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004f10:	2300      	movs	r3, #0
 8004f12:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f1c:	d007      	beq.n	8004f2e <UART_Receive_IT+0x74>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10a      	bne.n	8004f3c <UART_Receive_IT+0x82>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d106      	bne.n	8004f3c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f38:	701a      	strb	r2, [r3, #0]
 8004f3a:	e008      	b.n	8004f4e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f4c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	4619      	mov	r1, r3
 8004f66:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d15d      	bne.n	8005028 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68da      	ldr	r2, [r3, #12]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0220 	bic.w	r2, r2, #32
 8004f7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	695a      	ldr	r2, [r3, #20]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0201 	bic.w	r2, r2, #1
 8004f9a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d135      	bne.n	800501e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	330c      	adds	r3, #12
 8004fbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	e853 3f00 	ldrex	r3, [r3]
 8004fc6:	613b      	str	r3, [r7, #16]
   return(result);
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f023 0310 	bic.w	r3, r3, #16
 8004fce:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	330c      	adds	r3, #12
 8004fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fd8:	623a      	str	r2, [r7, #32]
 8004fda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fdc:	69f9      	ldr	r1, [r7, #28]
 8004fde:	6a3a      	ldr	r2, [r7, #32]
 8004fe0:	e841 2300 	strex	r3, r2, [r1]
 8004fe4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1e5      	bne.n	8004fb8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0310 	and.w	r3, r3, #16
 8004ff6:	2b10      	cmp	r3, #16
 8004ff8:	d10a      	bne.n	8005010 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60fb      	str	r3, [r7, #12]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	60fb      	str	r3, [r7, #12]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005014:	4619      	mov	r1, r3
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7ff fe2a 	bl	8004c70 <HAL_UARTEx_RxEventCallback>
 800501c:	e002      	b.n	8005024 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7fd fd46 	bl	8002ab0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005024:	2300      	movs	r3, #0
 8005026:	e002      	b.n	800502e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005028:	2300      	movs	r3, #0
 800502a:	e000      	b.n	800502e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800502c:	2302      	movs	r3, #2
  }
}
 800502e:	4618      	mov	r0, r3
 8005030:	3730      	adds	r7, #48	@ 0x30
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
	...

08005038 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800503c:	b0c0      	sub	sp, #256	@ 0x100
 800503e:	af00      	add	r7, sp, #0
 8005040:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005054:	68d9      	ldr	r1, [r3, #12]
 8005056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	ea40 0301 	orr.w	r3, r0, r1
 8005060:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	431a      	orrs	r2, r3
 8005070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	431a      	orrs	r2, r3
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	4313      	orrs	r3, r2
 8005080:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005090:	f021 010c 	bic.w	r1, r1, #12
 8005094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800509e:	430b      	orrs	r3, r1
 80050a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80050ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b2:	6999      	ldr	r1, [r3, #24]
 80050b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	ea40 0301 	orr.w	r3, r0, r1
 80050be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	4b8f      	ldr	r3, [pc, #572]	@ (8005304 <UART_SetConfig+0x2cc>)
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d005      	beq.n	80050d8 <UART_SetConfig+0xa0>
 80050cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	4b8d      	ldr	r3, [pc, #564]	@ (8005308 <UART_SetConfig+0x2d0>)
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d104      	bne.n	80050e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050d8:	f7fe feba 	bl	8003e50 <HAL_RCC_GetPCLK2Freq>
 80050dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80050e0:	e003      	b.n	80050ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050e2:	f7fe fea1 	bl	8003e28 <HAL_RCC_GetPCLK1Freq>
 80050e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050f4:	f040 810c 	bne.w	8005310 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050fc:	2200      	movs	r2, #0
 80050fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005102:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005106:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800510a:	4622      	mov	r2, r4
 800510c:	462b      	mov	r3, r5
 800510e:	1891      	adds	r1, r2, r2
 8005110:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005112:	415b      	adcs	r3, r3
 8005114:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005116:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800511a:	4621      	mov	r1, r4
 800511c:	eb12 0801 	adds.w	r8, r2, r1
 8005120:	4629      	mov	r1, r5
 8005122:	eb43 0901 	adc.w	r9, r3, r1
 8005126:	f04f 0200 	mov.w	r2, #0
 800512a:	f04f 0300 	mov.w	r3, #0
 800512e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005132:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005136:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800513a:	4690      	mov	r8, r2
 800513c:	4699      	mov	r9, r3
 800513e:	4623      	mov	r3, r4
 8005140:	eb18 0303 	adds.w	r3, r8, r3
 8005144:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005148:	462b      	mov	r3, r5
 800514a:	eb49 0303 	adc.w	r3, r9, r3
 800514e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800515e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005162:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005166:	460b      	mov	r3, r1
 8005168:	18db      	adds	r3, r3, r3
 800516a:	653b      	str	r3, [r7, #80]	@ 0x50
 800516c:	4613      	mov	r3, r2
 800516e:	eb42 0303 	adc.w	r3, r2, r3
 8005172:	657b      	str	r3, [r7, #84]	@ 0x54
 8005174:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005178:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800517c:	f7fb f83c 	bl	80001f8 <__aeabi_uldivmod>
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	4b61      	ldr	r3, [pc, #388]	@ (800530c <UART_SetConfig+0x2d4>)
 8005186:	fba3 2302 	umull	r2, r3, r3, r2
 800518a:	095b      	lsrs	r3, r3, #5
 800518c:	011c      	lsls	r4, r3, #4
 800518e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005192:	2200      	movs	r2, #0
 8005194:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005198:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800519c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80051a0:	4642      	mov	r2, r8
 80051a2:	464b      	mov	r3, r9
 80051a4:	1891      	adds	r1, r2, r2
 80051a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80051a8:	415b      	adcs	r3, r3
 80051aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80051b0:	4641      	mov	r1, r8
 80051b2:	eb12 0a01 	adds.w	sl, r2, r1
 80051b6:	4649      	mov	r1, r9
 80051b8:	eb43 0b01 	adc.w	fp, r3, r1
 80051bc:	f04f 0200 	mov.w	r2, #0
 80051c0:	f04f 0300 	mov.w	r3, #0
 80051c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051d0:	4692      	mov	sl, r2
 80051d2:	469b      	mov	fp, r3
 80051d4:	4643      	mov	r3, r8
 80051d6:	eb1a 0303 	adds.w	r3, sl, r3
 80051da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051de:	464b      	mov	r3, r9
 80051e0:	eb4b 0303 	adc.w	r3, fp, r3
 80051e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80051e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80051f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80051fc:	460b      	mov	r3, r1
 80051fe:	18db      	adds	r3, r3, r3
 8005200:	643b      	str	r3, [r7, #64]	@ 0x40
 8005202:	4613      	mov	r3, r2
 8005204:	eb42 0303 	adc.w	r3, r2, r3
 8005208:	647b      	str	r3, [r7, #68]	@ 0x44
 800520a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800520e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005212:	f7fa fff1 	bl	80001f8 <__aeabi_uldivmod>
 8005216:	4602      	mov	r2, r0
 8005218:	460b      	mov	r3, r1
 800521a:	4611      	mov	r1, r2
 800521c:	4b3b      	ldr	r3, [pc, #236]	@ (800530c <UART_SetConfig+0x2d4>)
 800521e:	fba3 2301 	umull	r2, r3, r3, r1
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	2264      	movs	r2, #100	@ 0x64
 8005226:	fb02 f303 	mul.w	r3, r2, r3
 800522a:	1acb      	subs	r3, r1, r3
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005232:	4b36      	ldr	r3, [pc, #216]	@ (800530c <UART_SetConfig+0x2d4>)
 8005234:	fba3 2302 	umull	r2, r3, r3, r2
 8005238:	095b      	lsrs	r3, r3, #5
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005240:	441c      	add	r4, r3
 8005242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005246:	2200      	movs	r2, #0
 8005248:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800524c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005250:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005254:	4642      	mov	r2, r8
 8005256:	464b      	mov	r3, r9
 8005258:	1891      	adds	r1, r2, r2
 800525a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800525c:	415b      	adcs	r3, r3
 800525e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005260:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005264:	4641      	mov	r1, r8
 8005266:	1851      	adds	r1, r2, r1
 8005268:	6339      	str	r1, [r7, #48]	@ 0x30
 800526a:	4649      	mov	r1, r9
 800526c:	414b      	adcs	r3, r1
 800526e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	f04f 0300 	mov.w	r3, #0
 8005278:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800527c:	4659      	mov	r1, fp
 800527e:	00cb      	lsls	r3, r1, #3
 8005280:	4651      	mov	r1, sl
 8005282:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005286:	4651      	mov	r1, sl
 8005288:	00ca      	lsls	r2, r1, #3
 800528a:	4610      	mov	r0, r2
 800528c:	4619      	mov	r1, r3
 800528e:	4603      	mov	r3, r0
 8005290:	4642      	mov	r2, r8
 8005292:	189b      	adds	r3, r3, r2
 8005294:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005298:	464b      	mov	r3, r9
 800529a:	460a      	mov	r2, r1
 800529c:	eb42 0303 	adc.w	r3, r2, r3
 80052a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80052b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80052b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80052b8:	460b      	mov	r3, r1
 80052ba:	18db      	adds	r3, r3, r3
 80052bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052be:	4613      	mov	r3, r2
 80052c0:	eb42 0303 	adc.w	r3, r2, r3
 80052c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80052ce:	f7fa ff93 	bl	80001f8 <__aeabi_uldivmod>
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	4b0d      	ldr	r3, [pc, #52]	@ (800530c <UART_SetConfig+0x2d4>)
 80052d8:	fba3 1302 	umull	r1, r3, r3, r2
 80052dc:	095b      	lsrs	r3, r3, #5
 80052de:	2164      	movs	r1, #100	@ 0x64
 80052e0:	fb01 f303 	mul.w	r3, r1, r3
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	3332      	adds	r3, #50	@ 0x32
 80052ea:	4a08      	ldr	r2, [pc, #32]	@ (800530c <UART_SetConfig+0x2d4>)
 80052ec:	fba2 2303 	umull	r2, r3, r2, r3
 80052f0:	095b      	lsrs	r3, r3, #5
 80052f2:	f003 0207 	and.w	r2, r3, #7
 80052f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4422      	add	r2, r4
 80052fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005300:	e106      	b.n	8005510 <UART_SetConfig+0x4d8>
 8005302:	bf00      	nop
 8005304:	40011000 	.word	0x40011000
 8005308:	40011400 	.word	0x40011400
 800530c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005314:	2200      	movs	r2, #0
 8005316:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800531a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800531e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005322:	4642      	mov	r2, r8
 8005324:	464b      	mov	r3, r9
 8005326:	1891      	adds	r1, r2, r2
 8005328:	6239      	str	r1, [r7, #32]
 800532a:	415b      	adcs	r3, r3
 800532c:	627b      	str	r3, [r7, #36]	@ 0x24
 800532e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005332:	4641      	mov	r1, r8
 8005334:	1854      	adds	r4, r2, r1
 8005336:	4649      	mov	r1, r9
 8005338:	eb43 0501 	adc.w	r5, r3, r1
 800533c:	f04f 0200 	mov.w	r2, #0
 8005340:	f04f 0300 	mov.w	r3, #0
 8005344:	00eb      	lsls	r3, r5, #3
 8005346:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800534a:	00e2      	lsls	r2, r4, #3
 800534c:	4614      	mov	r4, r2
 800534e:	461d      	mov	r5, r3
 8005350:	4643      	mov	r3, r8
 8005352:	18e3      	adds	r3, r4, r3
 8005354:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005358:	464b      	mov	r3, r9
 800535a:	eb45 0303 	adc.w	r3, r5, r3
 800535e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800536e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005372:	f04f 0200 	mov.w	r2, #0
 8005376:	f04f 0300 	mov.w	r3, #0
 800537a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800537e:	4629      	mov	r1, r5
 8005380:	008b      	lsls	r3, r1, #2
 8005382:	4621      	mov	r1, r4
 8005384:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005388:	4621      	mov	r1, r4
 800538a:	008a      	lsls	r2, r1, #2
 800538c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005390:	f7fa ff32 	bl	80001f8 <__aeabi_uldivmod>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4b60      	ldr	r3, [pc, #384]	@ (800551c <UART_SetConfig+0x4e4>)
 800539a:	fba3 2302 	umull	r2, r3, r3, r2
 800539e:	095b      	lsrs	r3, r3, #5
 80053a0:	011c      	lsls	r4, r3, #4
 80053a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053a6:	2200      	movs	r2, #0
 80053a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80053ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80053b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80053b4:	4642      	mov	r2, r8
 80053b6:	464b      	mov	r3, r9
 80053b8:	1891      	adds	r1, r2, r2
 80053ba:	61b9      	str	r1, [r7, #24]
 80053bc:	415b      	adcs	r3, r3
 80053be:	61fb      	str	r3, [r7, #28]
 80053c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053c4:	4641      	mov	r1, r8
 80053c6:	1851      	adds	r1, r2, r1
 80053c8:	6139      	str	r1, [r7, #16]
 80053ca:	4649      	mov	r1, r9
 80053cc:	414b      	adcs	r3, r1
 80053ce:	617b      	str	r3, [r7, #20]
 80053d0:	f04f 0200 	mov.w	r2, #0
 80053d4:	f04f 0300 	mov.w	r3, #0
 80053d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053dc:	4659      	mov	r1, fp
 80053de:	00cb      	lsls	r3, r1, #3
 80053e0:	4651      	mov	r1, sl
 80053e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053e6:	4651      	mov	r1, sl
 80053e8:	00ca      	lsls	r2, r1, #3
 80053ea:	4610      	mov	r0, r2
 80053ec:	4619      	mov	r1, r3
 80053ee:	4603      	mov	r3, r0
 80053f0:	4642      	mov	r2, r8
 80053f2:	189b      	adds	r3, r3, r2
 80053f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053f8:	464b      	mov	r3, r9
 80053fa:	460a      	mov	r2, r1
 80053fc:	eb42 0303 	adc.w	r3, r2, r3
 8005400:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800540e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005410:	f04f 0200 	mov.w	r2, #0
 8005414:	f04f 0300 	mov.w	r3, #0
 8005418:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800541c:	4649      	mov	r1, r9
 800541e:	008b      	lsls	r3, r1, #2
 8005420:	4641      	mov	r1, r8
 8005422:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005426:	4641      	mov	r1, r8
 8005428:	008a      	lsls	r2, r1, #2
 800542a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800542e:	f7fa fee3 	bl	80001f8 <__aeabi_uldivmod>
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	4611      	mov	r1, r2
 8005438:	4b38      	ldr	r3, [pc, #224]	@ (800551c <UART_SetConfig+0x4e4>)
 800543a:	fba3 2301 	umull	r2, r3, r3, r1
 800543e:	095b      	lsrs	r3, r3, #5
 8005440:	2264      	movs	r2, #100	@ 0x64
 8005442:	fb02 f303 	mul.w	r3, r2, r3
 8005446:	1acb      	subs	r3, r1, r3
 8005448:	011b      	lsls	r3, r3, #4
 800544a:	3332      	adds	r3, #50	@ 0x32
 800544c:	4a33      	ldr	r2, [pc, #204]	@ (800551c <UART_SetConfig+0x4e4>)
 800544e:	fba2 2303 	umull	r2, r3, r2, r3
 8005452:	095b      	lsrs	r3, r3, #5
 8005454:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005458:	441c      	add	r4, r3
 800545a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800545e:	2200      	movs	r2, #0
 8005460:	673b      	str	r3, [r7, #112]	@ 0x70
 8005462:	677a      	str	r2, [r7, #116]	@ 0x74
 8005464:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005468:	4642      	mov	r2, r8
 800546a:	464b      	mov	r3, r9
 800546c:	1891      	adds	r1, r2, r2
 800546e:	60b9      	str	r1, [r7, #8]
 8005470:	415b      	adcs	r3, r3
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005478:	4641      	mov	r1, r8
 800547a:	1851      	adds	r1, r2, r1
 800547c:	6039      	str	r1, [r7, #0]
 800547e:	4649      	mov	r1, r9
 8005480:	414b      	adcs	r3, r1
 8005482:	607b      	str	r3, [r7, #4]
 8005484:	f04f 0200 	mov.w	r2, #0
 8005488:	f04f 0300 	mov.w	r3, #0
 800548c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005490:	4659      	mov	r1, fp
 8005492:	00cb      	lsls	r3, r1, #3
 8005494:	4651      	mov	r1, sl
 8005496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800549a:	4651      	mov	r1, sl
 800549c:	00ca      	lsls	r2, r1, #3
 800549e:	4610      	mov	r0, r2
 80054a0:	4619      	mov	r1, r3
 80054a2:	4603      	mov	r3, r0
 80054a4:	4642      	mov	r2, r8
 80054a6:	189b      	adds	r3, r3, r2
 80054a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054aa:	464b      	mov	r3, r9
 80054ac:	460a      	mov	r2, r1
 80054ae:	eb42 0303 	adc.w	r3, r2, r3
 80054b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80054b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80054be:	667a      	str	r2, [r7, #100]	@ 0x64
 80054c0:	f04f 0200 	mov.w	r2, #0
 80054c4:	f04f 0300 	mov.w	r3, #0
 80054c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80054cc:	4649      	mov	r1, r9
 80054ce:	008b      	lsls	r3, r1, #2
 80054d0:	4641      	mov	r1, r8
 80054d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054d6:	4641      	mov	r1, r8
 80054d8:	008a      	lsls	r2, r1, #2
 80054da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80054de:	f7fa fe8b 	bl	80001f8 <__aeabi_uldivmod>
 80054e2:	4602      	mov	r2, r0
 80054e4:	460b      	mov	r3, r1
 80054e6:	4b0d      	ldr	r3, [pc, #52]	@ (800551c <UART_SetConfig+0x4e4>)
 80054e8:	fba3 1302 	umull	r1, r3, r3, r2
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	2164      	movs	r1, #100	@ 0x64
 80054f0:	fb01 f303 	mul.w	r3, r1, r3
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	011b      	lsls	r3, r3, #4
 80054f8:	3332      	adds	r3, #50	@ 0x32
 80054fa:	4a08      	ldr	r2, [pc, #32]	@ (800551c <UART_SetConfig+0x4e4>)
 80054fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005500:	095b      	lsrs	r3, r3, #5
 8005502:	f003 020f 	and.w	r2, r3, #15
 8005506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4422      	add	r2, r4
 800550e:	609a      	str	r2, [r3, #8]
}
 8005510:	bf00      	nop
 8005512:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005516:	46bd      	mov	sp, r7
 8005518:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800551c:	51eb851f 	.word	0x51eb851f

08005520 <memset>:
 8005520:	4402      	add	r2, r0
 8005522:	4603      	mov	r3, r0
 8005524:	4293      	cmp	r3, r2
 8005526:	d100      	bne.n	800552a <memset+0xa>
 8005528:	4770      	bx	lr
 800552a:	f803 1b01 	strb.w	r1, [r3], #1
 800552e:	e7f9      	b.n	8005524 <memset+0x4>

08005530 <strstr>:
 8005530:	780a      	ldrb	r2, [r1, #0]
 8005532:	b570      	push	{r4, r5, r6, lr}
 8005534:	b96a      	cbnz	r2, 8005552 <strstr+0x22>
 8005536:	bd70      	pop	{r4, r5, r6, pc}
 8005538:	429a      	cmp	r2, r3
 800553a:	d109      	bne.n	8005550 <strstr+0x20>
 800553c:	460c      	mov	r4, r1
 800553e:	4605      	mov	r5, r0
 8005540:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0f6      	beq.n	8005536 <strstr+0x6>
 8005548:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800554c:	429e      	cmp	r6, r3
 800554e:	d0f7      	beq.n	8005540 <strstr+0x10>
 8005550:	3001      	adds	r0, #1
 8005552:	7803      	ldrb	r3, [r0, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1ef      	bne.n	8005538 <strstr+0x8>
 8005558:	4618      	mov	r0, r3
 800555a:	e7ec      	b.n	8005536 <strstr+0x6>

0800555c <__libc_init_array>:
 800555c:	b570      	push	{r4, r5, r6, lr}
 800555e:	4d0d      	ldr	r5, [pc, #52]	@ (8005594 <__libc_init_array+0x38>)
 8005560:	4c0d      	ldr	r4, [pc, #52]	@ (8005598 <__libc_init_array+0x3c>)
 8005562:	1b64      	subs	r4, r4, r5
 8005564:	10a4      	asrs	r4, r4, #2
 8005566:	2600      	movs	r6, #0
 8005568:	42a6      	cmp	r6, r4
 800556a:	d109      	bne.n	8005580 <__libc_init_array+0x24>
 800556c:	4d0b      	ldr	r5, [pc, #44]	@ (800559c <__libc_init_array+0x40>)
 800556e:	4c0c      	ldr	r4, [pc, #48]	@ (80055a0 <__libc_init_array+0x44>)
 8005570:	f000 f820 	bl	80055b4 <_init>
 8005574:	1b64      	subs	r4, r4, r5
 8005576:	10a4      	asrs	r4, r4, #2
 8005578:	2600      	movs	r6, #0
 800557a:	42a6      	cmp	r6, r4
 800557c:	d105      	bne.n	800558a <__libc_init_array+0x2e>
 800557e:	bd70      	pop	{r4, r5, r6, pc}
 8005580:	f855 3b04 	ldr.w	r3, [r5], #4
 8005584:	4798      	blx	r3
 8005586:	3601      	adds	r6, #1
 8005588:	e7ee      	b.n	8005568 <__libc_init_array+0xc>
 800558a:	f855 3b04 	ldr.w	r3, [r5], #4
 800558e:	4798      	blx	r3
 8005590:	3601      	adds	r6, #1
 8005592:	e7f2      	b.n	800557a <__libc_init_array+0x1e>
 8005594:	08005780 	.word	0x08005780
 8005598:	08005780 	.word	0x08005780
 800559c:	08005780 	.word	0x08005780
 80055a0:	08005784 	.word	0x08005784

080055a4 <strcpy>:
 80055a4:	4603      	mov	r3, r0
 80055a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055aa:	f803 2b01 	strb.w	r2, [r3], #1
 80055ae:	2a00      	cmp	r2, #0
 80055b0:	d1f9      	bne.n	80055a6 <strcpy+0x2>
 80055b2:	4770      	bx	lr

080055b4 <_init>:
 80055b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b6:	bf00      	nop
 80055b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ba:	bc08      	pop	{r3}
 80055bc:	469e      	mov	lr, r3
 80055be:	4770      	bx	lr

080055c0 <_fini>:
 80055c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c2:	bf00      	nop
 80055c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055c6:	bc08      	pop	{r3}
 80055c8:	469e      	mov	lr, r3
 80055ca:	4770      	bx	lr
